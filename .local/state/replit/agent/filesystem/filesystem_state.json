{"file_contents":{"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"replit.md":{"content":"# 2Mins Challenge App\n\n## Overview\n\n2Mins is a wellness and productivity application that helps users build better habits through quick, 2-minute challenges. The app focuses on five key life areas: physical health, mental wellness, learning, finance, and relationships. Users complete challenges, track their progress through streaks and points, earn achievement badges, view detailed analytics, and build sustainable habits through micro-actions.\n\nThe application is built as a full-stack web application using React for the frontend and Express for the backend, with a dark-first Material Design aesthetic optimized for utility and quick interactions.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework**: React 18+ with TypeScript, using Vite as the build tool and development server.\n\n**UI Component System**: Shadcn/ui (New York style variant) with Radix UI primitives. This provides a comprehensive set of accessible, unstyled components that are customized with Tailwind CSS. The component library is extensive, including accordions, dialogs, dropdowns, forms, and more.\n\n**Styling Approach**: \n- Tailwind CSS with a custom design system defined in `tailwind.config.ts`\n- Dark-first design with CSS variables for theming\n- Custom color palette using HSL values for consistent theming\n- Material Design principles adapted for wellness/productivity use case\n- Typography using Inter (body) and DM Sans (headings) from Google Fonts\n\n**State Management**: \n- TanStack Query (React Query) for server state management\n- Query client configured with custom fetch functions and error handling\n- No global client state management library (using React's built-in state and context)\n\n**Routing**: Wouter - a lightweight routing library as an alternative to React Router. Routes include:\n- Home dashboard (`/`)\n- Challenge detail view (`/challenge/:id`)\n- All challenges (`/challenges`)\n- User progress (`/progress`)\n- Challenge history (`/history`)\n- Achievements (`/achievements`)\n- Analytics dashboard (`/analytics`)\n\n**Key Features**:\n- Category-based challenge browsing (5 categories: physical, mental, learning, finance, relationships)\n- Circular timer component for 2-minute challenge tracking\n- Achievement badges system with 19 predefined achievements across 4 tiers (Bronze, Silver, Gold, Platinum)\n- Analytics dashboard with Recharts visualizations:\n  - Daily activity charts (bar and line charts)\n  - Category distribution (pie chart)\n  - Weekly and monthly trend analysis\n  - Summary metrics (total challenges, last 30 days, active categories)\n- Stats and progress visualization\n- Streak tracking system\n- Points/gamification system\n\n### Backend Architecture\n\n**Framework**: Express.js with TypeScript, running in ESM module mode.\n\n**API Design**: RESTful API with the following endpoints:\n- `GET /api/challenges` - List all challenges\n- `GET /api/challenges/random` - Get a random challenge\n- `GET /api/challenges/:id` - Get specific challenge\n- `GET /api/challenges/category/:category` - Get challenges by category\n- `POST /api/challenges/:id/complete` - Complete a challenge\n- `GET /api/progress` - Get user progress\n- `GET /api/history` - Get challenge history\n- `GET /api/achievements` - List all achievements\n- `GET /api/achievements/user` - Get user's achievement progress and unlocked achievements\n- `GET /api/analytics/daily?days=30` - Get daily challenge statistics (count and points) for last N days\n- `GET /api/analytics/category` - Get category distribution with percentages\n- `GET /api/analytics/weekly` - Get weekly aggregated statistics for last 12 weeks\n- `GET /api/analytics/monthly` - Get monthly aggregated statistics for last 12 months\n\n**Development Mode**: Custom Vite integration for hot module replacement and development experience. The Express server acts as middleware, with Vite handling the frontend in development mode.\n\n**Production Build**: Frontend is built to `dist/public`, backend is bundled using esbuild to `dist/index.js`.\n\n### Data Storage\n\n**ORM**: Drizzle ORM for type-safe database operations.\n\n**Database Provider**: Configured for PostgreSQL (specifically Neon Database serverless).\n\n**Schema Design**:\n- `challenges` table: Stores challenge definitions with title, description, category, subcategory, difficulty, points, and instructions\n- `userProgress` table: Single-row table tracking user stats (total challenges completed, current streak, longest streak, total points, last completed date)\n- `challengeHistory` table: Records each completed challenge with timestamp and time spent\n\n**In-Memory Fallback**: The `MemStorage` class in `server/storage.ts` provides an in-memory implementation of the storage interface, allowing the application to run without a database for development/testing purposes.\n\n**Type Safety**: Drizzle-Zod integration generates Zod schemas from database schema for runtime validation.\n\n### Authentication and Authorization\n\nCurrently, the application does not implement user authentication. The system tracks a single user's progress (hardcoded user ID). This is a simplification for the current version - future versions would implement proper multi-user authentication.\n\n### External Dependencies\n\n**Database**: \n- Neon Database (@neondatabase/serverless) - Serverless PostgreSQL\n- Connection via `DATABASE_URL` environment variable\n- Migrations managed through Drizzle Kit (`drizzle.config.ts`)\n\n**UI Libraries**:\n- Radix UI - Comprehensive set of unstyled, accessible React components\n- Lucide React - Icon library for consistent iconography\n- Embla Carousel - Carousel/slider component\n- cmdk - Command palette component\n- date-fns - Date manipulation and formatting\n\n**Form Handling**:\n- React Hook Form - Form state management\n- @hookform/resolvers - Validation resolver integration\n- Zod - Schema validation\n\n**Styling**:\n- Tailwind CSS - Utility-first CSS framework\n- class-variance-authority - Type-safe variant management\n- clsx & tailwind-merge - Conditional class name composition\n\n**Development Tools**:\n- Replit-specific plugins for enhanced development experience (cartographer, dev banner, runtime error overlay)\n- TypeScript for type safety across the entire stack\n- ESBuild for production bundling\n\n**Session Management**:\n- connect-pg-simple - PostgreSQL session store (configured but authentication not yet implemented)\n\n### Design System\n\nThe application follows a sophisticated dark-first design approach based on Material Design principles, customized for wellness and productivity use cases. Key design decisions include:\n\n- **Color System**: HSL-based variables allowing easy theming and light/dark mode support\n- **Spacing**: Consistent spacing using Tailwind's scale (2, 4, 6, 8 as primary units)\n- **Typography**: Clear hierarchy with Inter for body text and DM Sans for headings\n- **Interactive States**: Hover and active elevation states using custom CSS classes (`hover-elevate`, `active-elevate-2`)\n- **Component Borders**: Subtle borders with configurable outlines for buttons, badges, and cards\n- **Responsive Layout**: Mobile-first with max-width containers (max-w-2xl for content, max-w-6xl for dashboards)","size_bytes":7220},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL must be set\");\n}\n\nconst sql = neon(process.env.DATABASE_URL!);\nexport const db = drizzle(sql, { schema });\n","size_bytes":313},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"client/src/pages/Challenges.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation, useSearch } from \"wouter\";\nimport { ChallengeCard } from \"@/components/ChallengeCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Filter } from \"lucide-react\";\nimport type { Challenge, ChallengeCategory } from \"@shared/schema\";\nimport { challengeCategories } from \"@shared/schema\";\nimport { categoryConfig } from \"@/lib/categories\";\n\nexport default function Challenges() {\n  const [, setLocation] = useLocation();\n  const searchString = useSearch();\n  const urlParams = new URLSearchParams(searchString);\n  const categoryParam = urlParams.get(\"category\") as ChallengeCategory | null;\n\n  const [selectedCategory, setSelectedCategory] = useState<ChallengeCategory | \"all\">(\n    categoryParam || \"all\"\n  );\n\n  // Sync state with URL parameter when it changes\n  useEffect(() => {\n    setSelectedCategory(categoryParam || \"all\");\n  }, [categoryParam]);\n\n  // Fetch personalized challenges based on user preferences\n  const { data: challenges, isLoading } = useQuery<Challenge[]>({\n    queryKey: [\"/api/challenges/personalized\"],\n  });\n\n  const filteredChallenges = challenges?.filter(\n    (c) => selectedCategory === \"all\" || c.category === selectedCategory\n  ) || [];\n\n  const handleStartChallenge = (id: string) => {\n    setLocation(`/challenge/${id}`);\n  };\n\n  const handleBack = () => {\n    setLocation(\"/\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border bg-card/30 backdrop-blur-sm sticky top-0 z-10\">\n        <div className=\"container max-w-6xl mx-auto px-4 py-4\">\n          <Button variant=\"ghost\" onClick={handleBack} data-testid=\"button-back\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Button>\n        </div>\n      </header>\n\n      <main className=\"container max-w-6xl mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-3\" data-testid=\"heading-page\">All Challenges</h1>\n          <p className=\"text-muted-foreground text-lg\" data-testid=\"text-page-description\">\n            Choose a challenge and transform your next 2 minutes\n          </p>\n        </div>\n\n        {/* Category Filter */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center gap-2 mb-3\">\n            <Filter className=\"h-4 w-4 text-muted-foreground\" />\n            <span className=\"text-sm font-medium text-muted-foreground\">Filter by category</span>\n          </div>\n          <div className=\"flex gap-2 flex-wrap\">\n            <Badge\n              variant={selectedCategory === \"all\" ? \"default\" : \"outline\"}\n              className=\"cursor-pointer hover-elevate active-elevate-2\"\n              onClick={() => {\n                setSelectedCategory(\"all\");\n                setLocation(\"/challenges\");\n              }}\n              data-testid=\"filter-all\"\n            >\n              All\n            </Badge>\n            {challengeCategories.map((cat) => (\n              <Badge\n                key={cat}\n                variant={selectedCategory === cat ? \"default\" : \"outline\"}\n                className=\"cursor-pointer hover-elevate active-elevate-2\"\n                onClick={() => {\n                  setSelectedCategory(cat);\n                  setLocation(`/challenges?category=${cat}`);\n                }}\n                data-testid={`filter-${cat}`}\n              >\n                {categoryConfig[cat].label}\n              </Badge>\n            ))}\n          </div>\n        </div>\n\n        {/* Challenges Grid */}\n        {isLoading ? (\n          <div className=\"text-center py-12 text-muted-foreground\" data-testid=\"loading-challenges\">\n            Loading challenges...\n          </div>\n        ) : filteredChallenges.length === 0 ? (\n          <div className=\"text-center py-12\" data-testid=\"empty-challenges\">\n            <p className=\"text-muted-foreground\">No challenges found in this category.</p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {filteredChallenges.map((challenge) => (\n              <ChallengeCard\n                key={challenge.id}\n                challenge={challenge}\n                onStart={() => handleStartChallenge(challenge.id)}\n              />\n            ))}\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":4500},"client/src/pages/ShareAchievement.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Loader2, Trophy, Award, Sparkles } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface SharedAchievementData {\n  achievement: {\n    tier: string;\n    icon: string;\n    name: string;\n    description: string;\n  };\n  user: {\n    firstName: string | null;\n    lastName: string | null;\n    profileImageUrl: string | null;\n  };\n  unlockedAt: string | null;\n}\n\nexport default function ShareAchievement() {\n  const [, params] = useRoute(\"/share/achievement/:id\");\n  const userAchievementId = params?.id;\n\n  const { data, isLoading, error} = useQuery<SharedAchievementData>({\n    queryKey: [`/api/achievements/share/${userAchievementId}`],\n    enabled: !!userAchievementId, // Only fetch if ID is present\n  });\n\n  // Handle missing ID parameter\n  if (!userAchievementId) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n        <Card className=\"max-w-md w-full\" data-testid=\"card-not-found\">\n          <CardContent className=\"p-8 text-center space-y-4\">\n            <Trophy className=\"h-12 w-12 text-muted-foreground mx-auto\" />\n            <div>\n              <h2 className=\"text-xl font-semibold\" data-testid=\"text-not-found-title\">Achievement Not Found</h2>\n              <p className=\"text-muted-foreground mt-2\" data-testid=\"text-not-found-description\">\n                This achievement link may be invalid or has been removed.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary mx-auto\" />\n          <p className=\"text-muted-foreground mt-4\" data-testid=\"text-loading\">Loading achievement...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !data) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n        <Card className=\"max-w-md w-full\" data-testid=\"card-not-found\">\n          <CardContent className=\"p-8 text-center space-y-4\">\n            <Trophy className=\"h-12 w-12 text-muted-foreground mx-auto\" />\n            <div>\n              <h2 className=\"text-xl font-semibold\" data-testid=\"text-not-found-title\">Achievement Not Found</h2>\n              <p className=\"text-muted-foreground mt-2\" data-testid=\"text-not-found-description\">\n                This achievement link may be invalid or has been removed.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const { achievement, user, unlockedAt } = data;\n  const userName = [user.firstName, user.lastName].filter(Boolean).join(\" \") || \"Someone\";\n  const initials = `${user.firstName?.[0] || \"\"}${user.lastName?.[0] || \"\"}`.toUpperCase() || \"?\";\n\n  const tierColors = {\n    bronze: \"text-amber-700 dark:text-amber-600 border-amber-700/50 dark:border-amber-600/50 bg-amber-950/20 dark:bg-amber-950/30\",\n    silver: \"text-slate-400 dark:text-slate-300 border-slate-400/50 dark:border-slate-300/50 bg-slate-900/20 dark:bg-slate-900/30\",\n    gold: \"text-yellow-500 dark:text-yellow-400 border-yellow-500/50 dark:border-yellow-400/50 bg-yellow-950/20 dark:bg-yellow-950/30\",\n    platinum: \"text-cyan-400 dark:text-cyan-300 border-cyan-400/50 dark:border-cyan-300/50 bg-cyan-950/20 dark:bg-cyan-950/30\",\n  };\n\n  const tierColor = tierColors[achievement.tier as keyof typeof tierColors] || tierColors.bronze;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border bg-card/30 backdrop-blur-sm\">\n        <div className=\"container max-w-4xl mx-auto px-4 py-4\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-10 h-10 rounded-full bg-primary flex items-center justify-center\">\n              <Sparkles className=\"h-5 w-5 text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-foreground\">2Mins</h1>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"container max-w-2xl mx-auto px-4 py-12\">\n        <div className=\"space-y-8\">\n          {/* Achievement Card */}\n          <Card className=\"overflow-hidden\" data-testid=\"card-shared-achievement\">\n            <div className={`absolute inset-0 ${tierColor.split(' ').find(c => c.startsWith('bg-'))} pointer-events-none opacity-50`} />\n            <CardContent className=\"relative p-8 space-y-6\">\n              {/* Achievement Icon and Tier */}\n              <div className=\"flex items-start justify-between\">\n                <div className={`p-4 rounded-lg border ${tierColor}`}>\n                  {achievement.icon === \"Trophy\" ? (\n                    <Trophy className={`h-8 w-8 ${tierColor.split(' ')[0]}`} />\n                  ) : (\n                    <Award className={`h-8 w-8 ${tierColor.split(' ')[0]}`} />\n                  )}\n                </div>\n                <Badge\n                  variant=\"outline\"\n                  className={`${tierColor} capitalize text-base px-4 py-1`}\n                  data-testid=\"badge-tier\"\n                >\n                  {achievement.tier}\n                </Badge>\n              </div>\n\n              {/* Achievement Details */}\n              <div className=\"space-y-3\">\n                <h2 className=\"text-2xl font-bold\" data-testid=\"text-achievement-name\">\n                  {achievement.name}\n                </h2>\n                <p className=\"text-muted-foreground text-lg\">\n                  {achievement.description}\n                </p>\n              </div>\n\n              {/* User Info */}\n              <div className=\"pt-4 border-t border-border\">\n                <div className=\"flex items-center gap-3\">\n                  <Avatar className=\"h-12 w-12\">\n                    <AvatarImage src={user.profileImageUrl || undefined} />\n                    <AvatarFallback>{initials}</AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <p className=\"font-medium\" data-testid=\"text-user-name\">\n                      {userName}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Unlocked {unlockedAt ? format(new Date(unlockedAt), \"MMMM d, yyyy\") : \"recently\"}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Call to Action */}\n          <Card>\n            <CardContent className=\"p-6 text-center space-y-4\">\n              <div className=\"w-16 h-16 rounded-full bg-primary/10 flex items-center justify-center mx-auto\">\n                <Sparkles className=\"h-8 w-8 text-primary\" />\n              </div>\n              <div>\n                <h3 className=\"text-xl font-semibold mb-2\">\n                  Start Your Journey\n                </h3>\n                <p className=\"text-muted-foreground\">\n                  Join 2Mins and unlock achievements by completing 2-minute challenges across physical, mental, learning, finance, and relationship categories.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":7571},"client/src/pages/ChallengeDetail.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { CircularTimer } from \"@/components/CircularTimer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, CheckCircle2 } from \"lucide-react\";\nimport { categoryConfig, difficultyConfig } from \"@/lib/categories\";\nimport type { Challenge } from \"@shared/schema\";\nimport { useState } from \"react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function ChallengeDetail() {\n  const [, params] = useRoute(\"/challenge/:id\");\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isComplete, setIsComplete] = useState(false);\n  const [timeSpent, setTimeSpent] = useState(0);\n  const [pointsEarned, setPointsEarned] = useState(0);\n\n  const challengeId = params?.id;\n\n  // Fetch challenge details\n  const { data: challenge, isLoading } = useQuery<Challenge>({\n    queryKey: [\"/api/challenges\", challengeId],\n    enabled: !!challengeId,\n  });\n\n  // Complete challenge mutation\n  const completeMutation = useMutation({\n    mutationFn: async (data: { timeSpent: number }) => {\n      return apiRequest(\"POST\", `/api/challenges/${challengeId}/complete`, data);\n    },\n    onSuccess: (data: any) => {\n      setPointsEarned(data.pointsEarned || challenge?.points || 0);\n      setIsComplete(true);\n      \n      // Invalidate queries to refresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/progress\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/history\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/challenges/random\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/achievements/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/daily?days=30\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/category\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/weekly\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/monthly\"] });\n      \n      // Show challenge completion toast\n      toast({\n        title: \"Challenge Complete!\",\n        description: `You earned ${data.pointsEarned || challenge?.points} points!`,\n      });\n\n      // Show achievement unlock toasts\n      if (data.newAchievements && data.newAchievements.length > 0) {\n        data.newAchievements.forEach((achievement: any, index: number) => {\n          setTimeout(() => {\n            toast({\n              title: \"Achievement Unlocked!\",\n              description: `${achievement.name}: ${achievement.description}`,\n              duration: 5000,\n            });\n          }, (index + 1) * 1000); // Stagger notifications by 1 second\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to complete challenge. Please try again.\",\n        variant: \"destructive\",\n      });\n      // Reset completion state on error\n      setIsComplete(false);\n    },\n  });\n\n  const handleComplete = () => {\n    const totalTime = 120 - timeSpent;\n    completeMutation.mutate({ timeSpent: totalTime });\n  };\n\n  const handleTimeUpdate = (remaining: number) => {\n    setTimeSpent(remaining);\n  };\n\n  const handleBack = () => {\n    setLocation(\"/\");\n  };\n\n  if (isLoading || !challenge) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-muted-foreground\" data-testid=\"loading-challenge\">Loading challenge...</div>\n      </div>\n    );\n  }\n\n  const category = categoryConfig[challenge.category as keyof typeof categoryConfig];\n  const difficulty = difficultyConfig[challenge.difficulty as keyof typeof difficultyConfig];\n  const Icon = category?.icon;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border bg-card/30 backdrop-blur-sm sticky top-0 z-10\">\n        <div className=\"container max-w-4xl mx-auto px-4 py-4\">\n          <Button variant=\"ghost\" onClick={handleBack} data-testid=\"button-back\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Button>\n        </div>\n      </header>\n\n      <main className=\"container max-w-4xl mx-auto px-4 py-8\">\n        {/* Challenge Info */}\n        <Card className=\"border-card-border mb-8\">\n          <CardHeader>\n            <div className=\"flex items-start justify-between gap-4 flex-wrap\">\n              <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                {Icon && (\n                  <div className=\"w-14 h-14 rounded-full bg-card flex items-center justify-center shrink-0\">\n                    <Icon className=\"h-7 w-7 text-foreground\" />\n                  </div>\n                )}\n                <div className=\"flex-1 min-w-0\">\n                  <CardTitle className=\"text-2xl mb-1\" data-testid=\"text-challenge-title\">\n                    {challenge.title}\n                  </CardTitle>\n                  <CardDescription>{category?.label}</CardDescription>\n                </div>\n              </div>\n              <Badge variant=\"secondary\">\n                <span className={difficulty.color}>{difficulty.label}</span>\n              </Badge>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <h3 className=\"text-sm font-medium text-muted-foreground mb-2\">Description</h3>\n              <p className=\"text-foreground\">{challenge.description}</p>\n            </div>\n            <div>\n              <h3 className=\"text-sm font-medium text-muted-foreground mb-2\">Instructions</h3>\n              <p className=\"text-foreground leading-relaxed\">{challenge.instructions}</p>\n            </div>\n            <div className=\"flex items-center gap-6 pt-2 border-t border-border\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm text-muted-foreground\">Duration:</span>\n                <span className=\"font-semibold text-foreground\" data-testid=\"text-duration\">2 minutes</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm text-muted-foreground\">Points:</span>\n                <span className=\"font-semibold text-foreground\" data-testid=\"text-points\">{challenge.points}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Timer Section */}\n        <div className=\"flex flex-col items-center\">\n          {!isComplete ? (\n            <CircularTimer\n              duration={120} // 2 minutes\n              onComplete={handleComplete}\n              onTimeUpdate={handleTimeUpdate}\n            />\n          ) : (\n            <div className=\"text-center py-12\" data-testid=\"completion-message\">\n              <div className=\"w-24 h-24 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-6 animate-in zoom-in duration-500\">\n                <CheckCircle2 className=\"h-12 w-12 text-primary\" />\n              </div>\n              <h2 className=\"text-3xl font-bold text-foreground mb-2 animate-in fade-in slide-in-from-bottom-4 duration-700\" data-testid=\"text-completion-title\">\n                Well Done!\n              </h2>\n              <p className=\"text-muted-foreground mb-2 animate-in fade-in duration-1000\" data-testid=\"text-completion-message\">\n                You've completed this challenge and earned <span className=\"font-bold text-primary\">{pointsEarned || challenge.points} points</span>!\n              </p>\n              {completeMutation.isPending && (\n                <p className=\"text-sm text-muted-foreground mb-8\">Updating your progress...</p>\n              )}\n              {!completeMutation.isPending && (\n                <p className=\"text-sm text-muted-foreground mb-8\">Your streak and stats have been updated</p>\n              )}\n              <div className=\"flex gap-3 justify-center animate-in fade-in slide-in-from-bottom-4 duration-1000\">\n                <Button onClick={handleBack} data-testid=\"button-back-home\">\n                  Back to Home\n                </Button>\n                <Button variant=\"outline\" onClick={() => setLocation(\"/challenges\")} data-testid=\"link-more-challenges\">\n                  More Challenges\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":8619},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"mobile/src/components/ui/Badge.tsx":{"content":"import { type ReactNode } from 'react';\nimport { View, Text, StyleSheet, type StyleProp, type ViewStyle } from 'react-native';\nimport { colors, typography } from '@/constants/colors';\n\ninterface BadgeProps {\n  children: ReactNode;\n  variant?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'destructive';\n  style?: StyleProp<ViewStyle>;\n}\n\nexport function Badge({ children, variant = 'default', style }: BadgeProps) {\n  return (\n    <View style={[styles.badge, styles[variant], style]}>\n      <Text style={[styles.text, styles[`text_${variant}`]]} numberOfLines={1}>\n        {children}\n      </Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  badge: {\n    paddingHorizontal: 10,\n    paddingVertical: 4,\n    borderRadius: 8,\n    alignSelf: 'flex-start',\n  },\n  // Variants\n  default: {\n    backgroundColor: colors.secondary,\n  },\n  primary: {\n    backgroundColor: colors.primary,\n  },\n  secondary: {\n    backgroundColor: colors.secondary,\n  },\n  success: {\n    backgroundColor: colors.categories.finance, // green\n  },\n  warning: {\n    backgroundColor: colors.categories.learning, // yellow\n  },\n  destructive: {\n    backgroundColor: colors.destructive,\n  },\n  // Text styles\n  text: {\n    fontSize: typography.fontSize.xs,\n    fontFamily: typography.fontFamily.medium,\n  },\n  text_default: {\n    color: colors.foreground,\n  },\n  text_primary: {\n    color: colors.primaryForeground,\n  },\n  text_secondary: {\n    color: colors.foreground,\n  },\n  text_success: {\n    color: colors.foreground,\n  },\n  text_warning: {\n    color: colors.background,\n  },\n  text_destructive: {\n    color: colors.destructiveForeground,\n  },\n});\n","size_bytes":1649},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"mobile/App.tsx":{"content":"import { useCallback, useEffect, useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { View } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { QueryClientProvider } from '@tanstack/react-query';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\nimport {\n  useFonts,\n  Inter_400Regular,\n  Inter_500Medium,\n  Inter_600SemiBold,\n  Inter_700Bold,\n} from '@expo-google-fonts/inter';\nimport {\n  DMSans_400Regular,\n  DMSans_500Medium,\n  DMSans_700Bold,\n} from '@expo-google-fonts/dm-sans';\n\nimport { queryClient } from './src/utils/queryClient';\nimport { AuthProvider } from './src/contexts/AuthContext';\nimport RootNavigator from './src/navigation/RootNavigator';\n\n// Keep the splash screen visible while we fetch resources\nSplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n\n  let [fontsLoaded] = useFonts({\n    Inter_400Regular,\n    Inter_500Medium,\n    Inter_600SemiBold,\n    Inter_700Bold,\n    DMSans_400Regular,\n    DMSans_500Medium,\n    DMSans_700Bold,\n  });\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        // Pre-load fonts, make any API calls you need to do here\n        await Font.loadAsync({\n          Inter_400Regular,\n          Inter_500Medium,\n          Inter_600SemiBold,\n          Inter_700Bold,\n          DMSans_400Regular,\n          DMSans_500Medium,\n          DMSans_700Bold,\n        });\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        setAppIsReady(true);\n      }\n    }\n\n    prepare();\n  }, []);\n\n  const onLayoutRootView = useCallback(async () => {\n    if (appIsReady && fontsLoaded) {\n      await SplashScreen.hideAsync();\n    }\n  }, [appIsReady, fontsLoaded]);\n\n  if (!appIsReady || !fontsLoaded) {\n    return null;\n  }\n\n  return (\n    <SafeAreaProvider>\n      <QueryClientProvider client={queryClient}>\n        <AuthProvider>\n          <View style={{ flex: 1 }} onLayout={onLayoutRootView}>\n            <StatusBar style=\"light\" />\n            <RootNavigator />\n          </View>\n        </AuthProvider>\n      </QueryClientProvider>\n    </SafeAreaProvider>\n  );\n}\n","size_bytes":2211},"mobile/src/components/ui/Avatar.tsx":{"content":"import { View, Image, Text, StyleSheet } from 'react-native';\nimport { colors, typography } from '@/constants/colors';\n\ninterface AvatarProps {\n  imageUrl?: string | null;\n  fallback: string;\n  size?: number;\n}\n\nexport function Avatar({ imageUrl, fallback, size = 40 }: AvatarProps) {\n  return (\n    <View style={[styles.avatar, { width: size, height: size, borderRadius: size / 2 }]}>\n      {imageUrl ? (\n        <Image source={{ uri: imageUrl }} style={styles.image} />\n      ) : (\n        <Text style={[styles.fallback, { fontSize: size / 2.5 }]}>{fallback}</Text>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  avatar: {\n    backgroundColor: colors.secondary,\n    justifyContent: 'center',\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  image: {\n    width: '100%',\n    height: '100%',\n  },\n  fallback: {\n    color: colors.foreground,\n    fontFamily: typography.fontFamily.semibold,\n  },\n});\n","size_bytes":924},"mobile/babel.config.js":{"content":"module.exports = function(api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: ['nativewind/babel'],\n  };\n};\n","size_bytes":142},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/pages/Achievements.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { AchievementWithProgress } from \"@shared/schema\";\nimport {\n  Trophy,\n  Award,\n  Target,\n  Star,\n  Flame,\n  Zap,\n  Crown,\n  Sparkles,\n  Coins,\n  Gem,\n  Activity,\n  Brain,\n  BookOpen,\n  DollarSign,\n  Heart,\n  CircleDot,\n  Footprints,\n  TrendingUp,\n  Share2,\n  Copy,\n  Check,\n  type LucideIcon,\n} from \"lucide-react\";\n\n// Map icon names to Lucide icons\nconst iconMap: Record<string, LucideIcon> = {\n  Trophy,\n  Award,\n  Target,\n  Star,\n  Flame,\n  Zap,\n  Crown,\n  Sparkles,\n  Coins,\n  Gem,\n  Activity,\n  Brain,\n  BookOpen,\n  DollarSign,\n  Heart,\n  CircleDot,\n  Footprints,\n  TrendingUp,\n};\n\n// Tier colors\nconst tierColors = {\n  bronze: \"text-amber-700 dark:text-amber-600 border-amber-700/50 dark:border-amber-600/50\",\n  silver: \"text-slate-400 dark:text-slate-300 border-slate-400/50 dark:border-slate-300/50\",\n  gold: \"text-yellow-500 dark:text-yellow-400 border-yellow-500/50 dark:border-yellow-400/50\",\n  platinum: \"text-cyan-400 dark:text-cyan-300 border-cyan-400/50 dark:border-cyan-300/50\",\n};\n\nconst tierBgColors = {\n  bronze: \"bg-amber-950/20 dark:bg-amber-950/30\",\n  silver: \"bg-slate-900/20 dark:bg-slate-900/30\",\n  gold: \"bg-yellow-950/20 dark:bg-yellow-950/30\",\n  platinum: \"bg-cyan-950/20 dark:bg-cyan-950/30\",\n};\n\nexport default function Achievements() {\n  const { data: achievements, isLoading } = useQuery<AchievementWithProgress[]>({\n    queryKey: [\"/api/achievements/user\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-4\">\n        <div className=\"max-w-6xl mx-auto space-y-6\">\n          <div className=\"text-center\">\n            <div className=\"h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto\" />\n            <p className=\"text-muted-foreground mt-4\">Loading achievements...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const unlockedCount = achievements?.filter(a => a.unlocked).length || 0;\n  const totalCount = achievements?.length || 0;\n  const unlockedAchievements = achievements?.filter(a => a.unlocked) || [];\n  const lockedAchievements = achievements?.filter(a => !a.unlocked) || [];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-6xl mx-auto p-4 md:p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"space-y-2\">\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-achievements-title\">\n            Achievements\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {unlockedCount} of {totalCount} unlocked\n          </p>\n        </div>\n\n        {/* Progress Overview */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-lg font-medium\">Overall Progress</h3>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Keep completing challenges to unlock more achievements\n                </p>\n              </div>\n              <Trophy className=\"h-8 w-8 text-primary\" />\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Completion</span>\n                <span className=\"font-medium\">{Math.floor((unlockedCount / totalCount) * 100)}%</span>\n              </div>\n              <Progress value={(unlockedCount / totalCount) * 100} />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Unlocked Achievements */}\n        {unlockedAchievements.length > 0 && (\n          <div className=\"space-y-4\">\n            <h2 className=\"text-xl font-semibold\">Unlocked</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {unlockedAchievements.map((achievement) => (\n                <AchievementCard key={achievement.id} achievement={achievement} />\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Locked Achievements */}\n        {lockedAchievements.length > 0 && (\n          <div className=\"space-y-4\">\n            <h2 className=\"text-xl font-semibold\">Locked</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {lockedAchievements.map((achievement) => (\n                <AchievementCard key={achievement.id} achievement={achievement} />\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction AchievementCard({ achievement }: { achievement: AchievementWithProgress }) {\n  const { toast } = useToast();\n  const [shareDialogOpen, setShareDialogOpen] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const Icon = iconMap[achievement.icon] || Trophy;\n  const tierColor = tierColors[achievement.tier as keyof typeof tierColors] || tierColors.bronze;\n  const tierBg = tierBgColors[achievement.tier as keyof typeof tierBgColors] || tierBgColors.bronze;\n\n  const shareUrl = achievement.userAchievementId\n    ? `${window.location.origin}/share/achievement/${achievement.userAchievementId}`\n    : \"\";\n\n  const handleCopyLink = async () => {\n    try {\n      await navigator.clipboard.writeText(shareUrl);\n      setCopied(true);\n      toast({\n        title: \"Link Copied!\",\n        description: \"Share this achievement with your friends.\",\n      });\n      setTimeout(() => setCopied(false), 2000);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy link\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Card\n        className={`relative overflow-hidden transition-all ${achievement.unlocked ? \"hover-elevate\" : \"opacity-60\"}`}\n        data-testid={`card-achievement-${achievement.id}`}\n      >\n        {achievement.unlocked && (\n          <div className={`absolute inset-0 ${tierBg} pointer-events-none`} />\n        )}\n        <CardContent className=\"relative p-6 space-y-4\">\n          <div className=\"flex items-start justify-between\">\n            <div className={`p-3 rounded-lg ${tierBg} border ${tierColor}`}>\n              <Icon className={`h-6 w-6 ${tierColor}`} />\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Badge\n                variant=\"outline\"\n                className={`${tierColor} capitalize`}\n                data-testid={`badge-tier-${achievement.tier}`}\n              >\n                {achievement.tier}\n              </Badge>\n              {achievement.unlocked && achievement.userAchievementId && (\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  className=\"h-8 w-8\"\n                  onClick={() => setShareDialogOpen(true)}\n                  data-testid={`button-share-${achievement.id}`}\n                >\n                  <Share2 className=\"h-4 w-4\" />\n                </Button>\n              )}\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <h3 className=\"font-semibold text-lg\" data-testid={`text-achievement-name-${achievement.id}`}>\n              {achievement.name}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">{achievement.description}</p>\n          </div>\n\n          {!achievement.unlocked && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Progress</span>\n                <span className=\"font-medium\">\n                  {achievement.progress}/{achievement.requirementValue}\n                </span>\n              </div>\n              <Progress value={achievement.progressPercent} />\n            </div>\n          )}\n\n          {achievement.unlocked && achievement.unlockedAt && (\n            <p className=\"text-xs text-muted-foreground\">\n              Unlocked {new Date(achievement.unlockedAt).toLocaleDateString()}\n            </p>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Share Dialog */}\n      <Dialog open={shareDialogOpen} onOpenChange={setShareDialogOpen}>\n        <DialogContent data-testid=\"dialog-share-achievement\">\n          <DialogHeader>\n            <DialogTitle>Share Achievement</DialogTitle>\n            <DialogDescription>\n              Share your \"{achievement.name}\" achievement with friends\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"flex gap-2\">\n              <Input\n                value={shareUrl}\n                readOnly\n                className=\"flex-1\"\n                data-testid=\"input-share-url\"\n              />\n              <Button\n                onClick={handleCopyLink}\n                data-testid=\"button-copy-link\"\n              >\n                {copied ? (\n                  <>\n                    <Check className=\"h-4 w-4 mr-2\" />\n                    Copied\n                  </>\n                ) : (\n                  <>\n                    <Copy className=\"h-4 w-4 mr-2\" />\n                    Copy\n                  </>\n                )}\n              </Button>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Anyone with this link can see this achievement and when you unlocked it.\n            </p>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":9951},"mobile/src/screens/ShareAchievementScreen.tsx":{"content":"import { View, Text, StyleSheet } from 'react-native';\nimport { colors, typography } from '../constants/colors';\n\nexport default function ShareAchievementScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>ShareAchievement</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: colors.background, padding: 20, justifyContent: 'center', alignItems: 'center' },\n  title: { fontSize: typography.fontSize['3xl'], fontFamily: typography.fontFamily.heading, color: colors.foreground },\n});\n","size_bytes":571},"client/src/pages/Friends.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Users, UserPlus, UserMinus, Check, X, Loader2, Activity } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { FriendWithDetails } from \"@shared/schema\";\n\ntype FriendActivity = {\n  userId: string;\n  firstName: string | null;\n  lastName: string | null;\n  profileImageUrl: string | null;\n  challengeTitle: string;\n  completedAt: string;\n  pointsEarned: number;\n};\n\nexport default function Friends() {\n  const { toast } = useToast();\n  const [friendEmail, setFriendEmail] = useState(\"\");\n\n  const { data: friends = [], isLoading: loadingFriends } = useQuery<FriendWithDetails[]>({\n    queryKey: [\"/api/friends\"],\n  });\n\n  const { data: pendingRequests = [], isLoading: loadingPending } = useQuery<FriendWithDetails[]>({\n    queryKey: [\"/api/friends/pending\"],\n  });\n\n  const { data: friendActivity = [], isLoading: loadingActivity } = useQuery<FriendActivity[]>({\n    queryKey: [\"/api/friends/activity\"],\n  });\n\n  const sendRequestMutation = useMutation({\n    mutationFn: async (email: string) => {\n      return await apiRequest(\"POST\", \"/api/friends/request\", { email });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Friend Request Sent\",\n        description: \"Your friend request has been sent successfully.\",\n      });\n      setFriendEmail(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/friends\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send friend request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const acceptMutation = useMutation({\n    mutationFn: async (friendshipId: string) => {\n      return await apiRequest(\"PATCH\", `/api/friends/${friendshipId}/accept`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Friend Request Accepted\",\n        description: \"You are now friends!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/friends\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/friends/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/friends/activity\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to accept friend request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const declineMutation = useMutation({\n    mutationFn: async (friendshipId: string) => {\n      return await apiRequest(\"PATCH\", `/api/friends/${friendshipId}/decline`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Request Declined\",\n        description: \"Friend request has been declined.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/friends/pending\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to decline friend request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const unfriendMutation = useMutation({\n    mutationFn: async (friendshipId: string) => {\n      return await apiRequest(\"DELETE\", `/api/friends/${friendshipId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Friend Removed\",\n        description: \"You are no longer friends.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/friends\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/friends/activity\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to remove friend\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendRequest = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (friendEmail.trim()) {\n      sendRequestMutation.mutate(friendEmail.trim());\n    }\n  };\n\n  const getInitials = (firstName: string | null, lastName: string | null) => {\n    const first = firstName?.[0] || \"\";\n    const last = lastName?.[0] || \"\";\n    return (first + last).toUpperCase() || \"?\";\n  };\n\n  const getFullName = (firstName: string | null, lastName: string | null) => {\n    return [firstName, lastName].filter(Boolean).join(\" \") || \"Unknown User\";\n  };\n\n  if (loadingFriends || loadingPending) {\n    return (\n      <div className=\"min-h-screen bg-background p-4 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary mx-auto\" />\n          <p className=\"text-muted-foreground mt-4\">Loading friends...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-4 sm:p-6\">\n      <div className=\"max-w-6xl mx-auto space-y-6\">\n        <div className=\"flex items-center gap-3\">\n          <Users className=\"h-8 w-8 text-primary\" />\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">Friends</h1>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          {/* Left column: Friends list and add friend form */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Add Friend Form */}\n            <Card data-testid=\"card-add-friend\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <UserPlus className=\"h-5 w-5\" />\n                  Add Friend\n                </CardTitle>\n                <CardDescription>Send a friend request by email</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSendRequest} className=\"flex gap-2\">\n                  <div className=\"flex-1\">\n                    <Label htmlFor=\"friend-email\" className=\"sr-only\">Friend's Email</Label>\n                    <Input\n                      id=\"friend-email\"\n                      type=\"email\"\n                      placeholder=\"friend@example.com\"\n                      value={friendEmail}\n                      onChange={(e) => setFriendEmail(e.target.value)}\n                      disabled={sendRequestMutation.isPending}\n                      data-testid=\"input-friend-email\"\n                    />\n                  </div>\n                  <Button\n                    type=\"submit\"\n                    disabled={!friendEmail.trim() || sendRequestMutation.isPending}\n                    data-testid=\"button-send-request\"\n                  >\n                    {sendRequestMutation.isPending ? (\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    ) : (\n                      \"Send Request\"\n                    )}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* Pending Requests */}\n            {pendingRequests.length > 0 && (\n              <Card data-testid=\"card-pending-requests\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <UserPlus className=\"h-5 w-5\" />\n                    Pending Requests\n                    <Badge variant=\"secondary\">{pendingRequests.length}</Badge>\n                  </CardTitle>\n                  <CardDescription>Friend requests waiting for your response</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {pendingRequests.map((request) => (\n                    <div\n                      key={request.friendshipId}\n                      className=\"flex items-center justify-between p-3 rounded-lg border hover-elevate\"\n                      data-testid={`pending-request-${request.friendshipId}`}\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <Avatar>\n                          <AvatarImage src={request.profileImageUrl || undefined} />\n                          <AvatarFallback>\n                            {getInitials(request.firstName, request.lastName)}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"font-medium\" data-testid={`text-requester-name-${request.friendshipId}`}>\n                            {getFullName(request.firstName, request.lastName)}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">{request.email}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          size=\"sm\"\n                          onClick={() => acceptMutation.mutate(request.friendshipId)}\n                          disabled={acceptMutation.isPending}\n                          data-testid={`button-accept-${request.friendshipId}`}\n                        >\n                          <Check className=\"h-4 w-4 mr-1\" />\n                          Accept\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => declineMutation.mutate(request.friendshipId)}\n                          disabled={declineMutation.isPending}\n                          data-testid={`button-decline-${request.friendshipId}`}\n                        >\n                          <X className=\"h-4 w-4 mr-1\" />\n                          Decline\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Friends List */}\n            <Card data-testid=\"card-friends-list\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-5 w-5\" />\n                  Your Friends\n                  <Badge variant=\"secondary\">{friends.length}</Badge>\n                </CardTitle>\n                <CardDescription>People you're connected with</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {friends.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Users className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                    <p>No friends yet</p>\n                    <p className=\"text-sm mt-1\">Add friends to see their activity and compete!</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\" data-testid=\"friends-list\">\n                    {friends.map((friend) => (\n                      <div\n                        key={friend.friendshipId}\n                        className=\"flex items-center justify-between p-3 rounded-lg border hover-elevate\"\n                        data-testid={`friend-${friend.friendshipId}`}\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <Avatar>\n                            <AvatarImage src={friend.profileImageUrl || undefined} />\n                            <AvatarFallback>\n                              {getInitials(friend.firstName, friend.lastName)}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <p className=\"font-medium\" data-testid={`text-friend-name-${friend.friendshipId}`}>\n                              {getFullName(friend.firstName, friend.lastName)}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">{friend.email}</p>\n                          </div>\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => unfriendMutation.mutate(friend.friendshipId)}\n                          disabled={unfriendMutation.isPending}\n                          data-testid={`button-unfriend-${friend.friendshipId}`}\n                        >\n                          <UserMinus className=\"h-4 w-4 mr-1\" />\n                          Unfriend\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right column: Friend Activity Feed */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-6\" data-testid=\"card-activity-feed\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Activity className=\"h-5 w-5\" />\n                  Friend Activity\n                </CardTitle>\n                <CardDescription>Recent challenges completed by friends</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {loadingActivity ? (\n                  <div className=\"text-center py-4\">\n                    <Loader2 className=\"h-6 w-6 animate-spin text-primary mx-auto\" />\n                  </div>\n                ) : friendActivity.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Activity className=\"h-10 w-10 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">No recent activity</p>\n                    <p className=\"text-xs mt-1\">Your friends haven't completed any challenges yet</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\" data-testid=\"activity-feed\">\n                    {friendActivity.map((activity, index) => (\n                      <div key={`${activity.userId}-${activity.completedAt}-${index}`}>\n                        {index > 0 && <Separator className=\"my-3\" />}\n                        <div className=\"space-y-2\" data-testid={`activity-${index}`}>\n                          <div className=\"flex items-center gap-2\">\n                            <Avatar className=\"h-8 w-8\">\n                              <AvatarImage src={activity.profileImageUrl || undefined} />\n                              <AvatarFallback className=\"text-xs\">\n                                {getInitials(activity.firstName, activity.lastName)}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div className=\"flex-1 min-w-0\">\n                              <p className=\"text-sm font-medium truncate\">\n                                {getFullName(activity.firstName, activity.lastName)}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {format(new Date(activity.completedAt), \"MMM d, h:mm a\")}\n                              </p>\n                            </div>\n                            <Badge variant=\"outline\" className=\"shrink-0\">\n                              +{activity.pointsEarned}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm pl-10\">{activity.challengeTitle}</p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15790},"client/src/components/AppSidebar.tsx":{"content":"import {\n  Home,\n  Target,\n  TrendingUp,\n  Trophy,\n  BarChart3,\n  Users,\n  Settings,\n  User as UserIcon,\n  Plus,\n  Menu as MenuIcon,\n  Bell,\n  LogOut,\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nconst LOGOUT_URL = \"/api/logout\"; // Sunucunuz farklıysa (/api/auth/logout) burayı değiştirin.\n\nconst menuItems = [\n  { title: \"Home\", url: \"/\", icon: Home },\n  { title: \"My Challenges\", url: \"/challenges\", icon: Target },\n  { title: \"Progress\", url: \"/progress\", icon: TrendingUp },\n  { title: \"Achievements\", url: \"/achievements\", icon: Trophy },\n  { title: \"Analytics\", url: \"/analytics\", icon: BarChart3 },\n  { title: \"History\", url: \"/history\", icon: MenuIcon },\n  { title: \"Friends\", url: \"/friends\", icon: Users },\n  { title: \"Profile\", url: \"/profile\", icon: Users },\n  { title: \"Settings\", url: \"/settings\", icon: Settings },\n];\n\nexport function AppSidebar() {\n  const [location, navigate] = useLocation(); // <- navigate eklendi\n  const { user } = useAuth();\n\n  const initials =\n    user?.firstName && user?.lastName\n      ? `${user.firstName[0]}${user.lastName[0]}`.toUpperCase()\n      : user?.email?.[0]?.toUpperCase() || \"U\";\n\n  async function handleLogout() {\n    try {\n      // Bazı kurulumlardaki farklılıklar için POST dene, olmazsa GET dene\n      await fetch(LOGOUT_URL, { method: \"POST\", credentials: \"include\" }).catch(\n        () => fetch(LOGOUT_URL, { method: \"GET\", credentials: \"include\" }),\n      );\n    } catch {\n      // ağ hatasını yoksay – client navigasyonu yine de yapacağız\n    } finally {\n      // Wouter SPA yönlendirmesi (react-router yok!):\n      navigate(\"/login\", { replace: true });\n    }\n  }\n\n  return (\n    <Sidebar data-testid=\"sidebar-app\">\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url}>\n                    <a\n                      href={item.url}\n                      data-testid={`link-${item.title.toLowerCase().replace(/\\s+/g, \"-\")}`}\n                    >\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </a>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel>Create</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              <SidebarMenuItem>\n                <SidebarMenuButton\n                  asChild\n                  isActive={location === \"/create-challenge\"}\n                >\n                  <a\n                    href=\"/create-challenge\"\n                    data-testid=\"link-create-challenge\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                    <span>New Challenge</span>\n                  </a>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n              <SidebarMenuItem>\n                <SidebarMenuButton\n                  asChild\n                  isActive={location === \"/my-challenges\"}\n                >\n                  <a href=\"/my-challenges\" data-testid=\"link-my-challenges\">\n                    <Target className=\"h-4 w-4\" />\n                    <span>My Custom Challenges</span>\n                  </a>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      {/* ==== Bottom user area: click name/avatar opens dropdown ==== */}\n      <SidebarFooter>\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <DropdownMenu>\n              {/* Trigger: gerçek <button> kullanıyoruz */}\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full justify-start h-10 px-2\"\n                  data-testid=\"button-user-menu\"\n                >\n                  <Avatar className=\"h-6 w-6\">\n                    <AvatarImage src={user?.profileImageUrl || undefined} />\n                    <AvatarFallback className=\"text-xs\">\n                      {initials}\n                    </AvatarFallback>\n                  </Avatar>\n                  <span className=\"ml-2 truncate\">\n                    {user?.firstName || user?.username || user?.email || \"User\"}\n                  </span>\n                </Button>\n              </DropdownMenuTrigger>\n\n              <DropdownMenuContent align=\"end\" className=\"w-56\">\n                <DropdownMenuItem asChild data-testid=\"menu-item-account\">\n                  <a href=\"/settings\">\n                    <UserIcon className=\"mr-2 h-4 w-4\" />\n                    <span>Account</span>\n                  </a>\n                </DropdownMenuItem>\n\n                <DropdownMenuItem asChild data-testid=\"menu-item-notifications\">\n                  <a href=\"/notifications\">\n                    <Bell className=\"mr-2 h-4 w-4\" />\n                    <span>Notifications</span>\n                  </a>\n                </DropdownMenuItem>\n\n                <DropdownMenuSeparator />\n\n                <DropdownMenuItem\n                  onClick={handleLogout}\n                  data-testid=\"menu-item-logout\"\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Logout</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":6321},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"mobile/src/screens/FriendsScreen.tsx":{"content":"import { View, Text, StyleSheet } from 'react-native';\nimport { colors, typography } from '../constants/colors';\n\nexport default function FriendsScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Friends</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: colors.background, padding: 20, justifyContent: 'center', alignItems: 'center' },\n  title: { fontSize: typography.fontSize['3xl'], fontFamily: typography.fontFamily.heading, color: colors.foreground },\n});\n","size_bytes":553},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"mobile/src/components/ui/index.ts":{"content":"export { Card, CardHeader, CardContent } from './Card';\nexport { Button } from './Button';\nexport { Badge } from './Badge';\nexport { Avatar } from './Avatar';\nexport { Loading } from './Loading';\n","size_bytes":196},"design_guidelines.md":{"content":"# 2Mins Challenge App - Design Guidelines\n\n## Design Approach\n\n**Selected Approach:** Material Design Dark Theme adapted for wellness/productivity\n**Justification:** The app requires a sophisticated, mature dark interface for a utility-focused challenge tracking experience. Material Design provides robust dark mode patterns ideal for this use case.\n\n**Key Design Principles:**\n- Sophisticated minimalism for adult users\n- Dark-first design with strategic use of depth and elevation\n- Clear information hierarchy for quick 2-minute interactions\n- Focus on functionality and immediate usability\n\n---\n\n## Core Design Elements\n\n### A. Typography\n\n**Font Family:** Google Fonts - \"Inter\" (primary), \"DM Sans\" (headings)\n\n**Hierarchy:**\n- Page Titles: 2xl/3xl, semi-bold, tracking tight\n- Section Headers: xl/2xl, medium, tracking normal\n- Card Titles: lg, medium\n- Body Text: base, regular, leading relaxed\n- Timer Display: 5xl/6xl, bold, tabular numbers\n- Stats/Numbers: 2xl/3xl, semi-bold\n- Captions/Metadata: sm, regular, reduced opacity\n\n### B. Layout System\n\n**Spacing Units:** Tailwind units of 2, 4, 6, and 8 as primary building blocks\n- Component padding: p-4, p-6\n- Section spacing: space-y-6, space-y-8\n- Card gaps: gap-4, gap-6\n- Screen margins: px-4 (mobile), px-6 (tablet), px-8 (desktop)\n\n**Container Strategy:**\n- Mobile: Full width with px-4 padding\n- Tablet/Desktop: max-w-2xl centered for main content\n- Wide sections (dashboard): max-w-6xl with grid layouts\n\n### C. Component Library\n\n#### Navigation\n- Bottom navigation bar (mobile): Fixed bottom, 4-5 primary sections\n- Top app bar: Minimal, shows context (e.g., \"Today's Challenge\"), user profile icon\n- Icons: Heroicons (outline for inactive, solid for active states)\n\n#### Challenge Cards\n- Rounded corners (rounded-lg to rounded-xl)\n- Elevated appearance with subtle borders/shadows\n- Category indicator: Small pill/tag in top corner\n- Challenge title: Prominent, 2-3 lines max\n- Duration indicator: \"2 min\" badge\n- Action button: Full width at bottom or prominent CTA\n\n#### Timer Interface\n- Circular progress ring: Large, centered (200-240px diameter)\n- Time display: Centered within circle, large bold numbers\n- Start/Pause button: Centered below circle, prominent\n- Challenge details: Above timer, concise description\n- Background: Slightly blurred version of category-themed subtle gradient\n\n#### Progress Dashboard\n- Streak counter: Large, eye-catching card with flame/calendar icon\n- Points display: Prominent number with subtle animation on update\n- Category breakdown: Grid of cards (2 columns mobile, 3+ desktop)\n- Recent activity: Vertical list of completed challenges with timestamps\n- Achievement badges: Horizontal scrollable row of unlocked achievements\n\n#### Challenge History\n- Timeline view: Vertical list with date separators\n- Each entry: Compact card showing category icon, challenge name, completion time\n- Filter chips: Horizontal scrollable row for category filtering\n- Empty state: Motivational illustration + CTA to start first challenge\n\n#### Category Selection\n- Grid layout: 2 columns (mobile), 3 columns (tablet+)\n- Large category cards with:\n  - Distinctive icon (top, large size h-12 to h-16)\n  - Category name (bold, centered)\n  - Challenge count (small text, subtle)\n  - Subtle category-specific accent (via opacity variations, not colors)\n\n#### Forms & Inputs\n- Rounded inputs (rounded-lg)\n- Consistent padding (p-3 to p-4)\n- Clear focus states with subtle ring\n- Label above input pattern\n- Helper text below when needed\n\n### D. Iconography\n\n**Icon Library:** Heroicons (via CDN)\n**Icon Sizes:**\n- Navigation: h-6 w-6\n- Category icons: h-12 w-12 to h-16 w-16\n- Card icons: h-8 w-8\n- Inline icons: h-5 w-5\n- Stat icons: h-10 w-10\n\n**Style:** Outline icons for most UI elements, solid icons for active/selected states\n\n**Category Icons:**\n- Physical: Running figure, dumbbell\n- Mental: Brain, meditation pose\n- Learning: Book, lightbulb\n- Finance: Chart, coin stack\n- Relationships: Heart, people group\n\n### E. Depth & Elevation\n\n**Card Hierarchy:**\n- Inactive cards: Subtle border\n- Active/hover cards: Slight elevation with shadow\n- Modal overlays: Strong elevation with backdrop\n- Bottom navigation: Elevated with top border/shadow\n\n### F. Interactive Elements\n\n**Buttons:**\n- Primary action: Large, rounded-full or rounded-lg, bold text\n- Secondary action: Outline style or ghost variant\n- Icon buttons: Rounded-full, consistent h-10 w-10 sizing\n- Disabled state: Reduced opacity (opacity-50)\n\n**Touch Targets:**\n- Minimum 44px height for all interactive elements\n- Adequate spacing between tappable items (min 8px gap)\n\n### G. Animations\n\n**Minimal, Purposeful Animations Only:**\n- Timer countdown: Smooth circular progress ring animation\n- Streak increment: Quick scale + fade celebration effect\n- Challenge completion: Checkmark animation\n- Page transitions: Subtle slide transitions (100-200ms)\n- No decorative or auto-playing animations\n\n---\n\n## Screen-Specific Layouts\n\n### Home/Today Screen\n- Top section: Current streak + points (horizontal cards)\n- Featured challenge: Large, prominent card with \"Start Now\" CTA\n- Category quick access: Grid of category cards\n- Recent achievements: Horizontal scrollable row (if any unlocked)\n\n### Challenge Active Screen\n- Full-screen focus mode\n- Circular timer: Centered, dominant\n- Challenge instruction: Above timer, clear and concise\n- Pause/Stop buttons: Below timer\n- Minimal distractions, no bottom nav during active challenge\n\n### Progress Screen\n- Stats overview: 3-column grid (streak, total challenges, points)\n- Weekly chart: Simple bar/line chart showing activity\n- Category breakdown: Pie or donut chart with legend\n- Milestones: List of upcoming achievements with progress bars\n\n### Profile/Settings Screen\n- User info: Avatar + name at top\n- Settings sections: Grouped lists with dividers\n- Notification preferences: Toggle switches\n- Account actions: Clear, separated buttons (logout, delete account)\n\n---\n\n## Responsive Behavior\n\n**Mobile (default):**\n- Single column layouts\n- Bottom navigation (4-5 items)\n- Stacked cards\n- Full-width CTAs\n\n**Tablet (md: 768px+):**\n- 2-column grids for categories/stats\n- Side navigation option (if complex enough)\n- Wider max-width containers\n\n**Desktop (lg: 1024px+):**\n- 3-column grids where appropriate\n- Centered layout with max-width\n- Larger touch targets become clickable with hover states\n\n---\n\n## Images\n\n**Hero/Featured Sections:**\nNo large hero images required. This is a utility app focused on functionality.\n\n**Decorative Elements:**\n- Category cards: Use subtle gradient overlays or abstract patterns (optional background elements)\n- Empty states: Minimal illustrations (line art style, mature aesthetic)\n- Achievement badges: Custom icon designs or simple geometric shapes\n\n**Profile:**\n- User avatar: Circular, default placeholder with initials if no photo\n\n---\n\n## Accessibility Considerations\n\n- Consistent focus indicators (ring-2 with offset)\n- ARIA labels for icon-only buttons\n- Sufficient contrast ratios for all text on dark backgrounds\n- Touch target sizes minimum 44x44px\n- Semantic HTML structure (nav, main, section elements)\n- Screen reader announcements for timer updates and challenge completion","size_bytes":7236},"server/localAuth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport bcrypt from \"bcrypt\";\nimport { storage } from \"./storage\";\nimport type { User } from \"@shared/schema\";\n\nexport function setupLocalAuth() {\n  passport.use(\n    \"local\",\n    new LocalStrategy(\n      {\n        usernameField: \"emailOrUsername\",\n        passwordField: \"password\",\n      },\n      async (emailOrUsername, password, done) => {\n        try {\n          // Find user by email or username\n          const user = await storage.findUserByEmailOrUsername(emailOrUsername);\n          \n          if (!user) {\n            return done(null, false, { message: \"Invalid credentials\" });\n          }\n\n          if (!user.password) {\n            return done(null, false, { message: \"Please use Replit Auth to login\" });\n          }\n\n          // Verify password\n          const isValidPassword = await bcrypt.compare(password, user.password);\n          \n          if (!isValidPassword) {\n            return done(null, false, { message: \"Invalid credentials\" });\n          }\n\n          return done(null, user);\n        } catch (error) {\n          return done(error);\n        }\n      }\n    )\n  );\n}\n\nexport async function registerUser(\n  email: string,\n  username: string,\n  password: string,\n  firstName?: string,\n  lastName?: string\n): Promise<User> {\n  // Check if user already exists\n  const existingUser = await storage.findUserByEmailOrUsername(email);\n  if (existingUser) {\n    throw new Error(\"Email already registered\");\n  }\n\n  const existingUsername = await storage.findUserByEmailOrUsername(username);\n  if (existingUsername) {\n    throw new Error(\"Username already taken\");\n  }\n\n  // Hash password\n  const hashedPassword = await bcrypt.hash(password, 10);\n\n  // Create user\n  const user = await storage.createLocalUser({\n    email,\n    username,\n    password: hashedPassword,\n    firstName,\n    lastName,\n  });\n\n  return user;\n}\n","size_bytes":1933},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"mobile/src/components/ui/Button.tsx":{"content":"import { type ReactNode } from 'react';\nimport { TouchableOpacity, Text, StyleSheet, type StyleProp, type ViewStyle, ActivityIndicator } from 'react-native';\nimport { colors, typography } from '@/constants/colors';\n\ninterface ButtonProps {\n  children: ReactNode;\n  onPress?: () => void;\n  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive';\n  size?: 'sm' | 'default' | 'lg';\n  disabled?: boolean;\n  loading?: boolean;\n  style?: StyleProp<ViewStyle>;\n  testID?: string;\n}\n\nexport function Button({\n  children,\n  onPress,\n  variant = 'primary',\n  size = 'default',\n  disabled = false,\n  loading = false,\n  style,\n  testID,\n}: ButtonProps) {\n  const isDisabled = disabled || loading;\n\n  return (\n    <TouchableOpacity\n      style={[\n        styles.button,\n        styles[variant],\n        styles[`size_${size}`],\n        isDisabled && styles.disabled,\n        style,\n      ]}\n      onPress={onPress}\n      disabled={isDisabled}\n      activeOpacity={0.7}\n      testID={testID}\n    >\n      {loading ? (\n        <ActivityIndicator\n          size=\"small\"\n          color={variant === 'outline' || variant === 'ghost' ? colors.primary : colors.primaryForeground}\n        />\n      ) : (\n        <Text style={[styles.text, styles[`text_${variant}`], styles[`text_${size}`]]}>\n          {children}\n        </Text>\n      )}\n    </TouchableOpacity>\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    borderRadius: 12,\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  // Variants\n  primary: {\n    backgroundColor: colors.primary,\n  },\n  secondary: {\n    backgroundColor: colors.secondary,\n  },\n  outline: {\n    backgroundColor: 'transparent',\n    borderWidth: 1,\n    borderColor: colors.border,\n  },\n  ghost: {\n    backgroundColor: 'transparent',\n  },\n  destructive: {\n    backgroundColor: colors.destructive,\n  },\n  // Sizes\n  size_sm: {\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    minHeight: 32,\n  },\n  size_default: {\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    minHeight: 40,\n  },\n  size_lg: {\n    paddingVertical: 16,\n    paddingHorizontal: 20,\n    minHeight: 48,\n  },\n  // Text styles\n  text: {\n    fontFamily: typography.fontFamily.semibold,\n  },\n  text_primary: {\n    color: colors.primaryForeground,\n  },\n  text_secondary: {\n    color: colors.secondaryForeground,\n  },\n  text_outline: {\n    color: colors.foreground,\n  },\n  text_ghost: {\n    color: colors.foreground,\n  },\n  text_destructive: {\n    color: colors.destructiveForeground,\n  },\n  text_sm: {\n    fontSize: typography.fontSize.sm,\n  },\n  text_default: {\n    fontSize: typography.fontSize.base,\n  },\n  text_lg: {\n    fontSize: typography.fontSize.lg,\n  },\n  // States\n  disabled: {\n    opacity: 0.5,\n  },\n});\n","size_bytes":2756},"mobile/src/screens/CreateChallengeScreen.tsx":{"content":"import { View, Text, StyleSheet } from 'react-native';\nimport { colors, typography } from '../constants/colors';\n\nexport default function CreateChallengeScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>CreateChallenge</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: colors.background, padding: 20, justifyContent: 'center', alignItems: 'center' },\n  title: { fontSize: typography.fontSize['3xl'], fontFamily: typography.fontFamily.heading, color: colors.foreground },\n});\n","size_bytes":569},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/pages/Profile.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { UserProgress } from \"@shared/schema\";\nimport { Trophy, Target, Flame, Star, Activity, Brain, BookOpen, DollarSign, Heart } from \"lucide-react\";\n\nconst categoryIcons = {\n  physical: Activity,\n  mental: Brain,\n  learning: BookOpen,\n  finance: DollarSign,\n  relationships: Heart,\n};\n\nexport default function Profile() {\n  const { user } = useAuth();\n\n  const { data: progress } = useQuery<UserProgress>({\n    queryKey: [\"/api/progress\"],\n  });\n\n  if (!user) {\n    return null;\n  }\n\n  const initials = `${user.firstName?.[0] || \"\"}${user.lastName?.[0] || \"\"}`.toUpperCase() || user.email?.[0]?.toUpperCase() || \"U\";\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-4xl\">\n      <h1 className=\"text-3xl font-bold mb-6\" data-testid=\"text-profile-title\">Profile</h1>\n\n      <div className=\"space-y-6\">\n        {/* User Info Card */}\n        <Card data-testid=\"card-user-info\">\n          <CardHeader>\n            <CardTitle>Personal Information</CardTitle>\n            <CardDescription>Your account details</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center gap-6\">\n              <Avatar className=\"h-24 w-24\">\n                <AvatarImage src={user.profileImageUrl || undefined} />\n                <AvatarFallback className=\"text-2xl\">{initials}</AvatarFallback>\n              </Avatar>\n              <div className=\"space-y-2\">\n                <h2 className=\"text-2xl font-bold\" data-testid=\"text-user-name\">\n                  {user.firstName && user.lastName\n                    ? `${user.firstName} ${user.lastName}`\n                    : user.username || \"User\"}\n                </h2>\n                <p className=\"text-muted-foreground\" data-testid=\"text-user-email\">\n                  {user.email}\n                </p>\n                {user.username && (\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"text-username\">\n                    @{user.username}\n                  </p>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Stats Card */}\n        {progress && (\n          <Card data-testid=\"card-stats\">\n            <CardHeader>\n              <CardTitle>Your Stats</CardTitle>\n              <CardDescription>Your wellness journey at a glance</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"space-y-2\" data-testid=\"stat-challenges\">\n                  <div className=\"flex items-center gap-2 text-muted-foreground\">\n                    <Target className=\"h-4 w-4\" />\n                    <span className=\"text-sm\">Challenges</span>\n                  </div>\n                  <p className=\"text-2xl font-bold\">{progress.totalChallengesCompleted}</p>\n                </div>\n\n                <div className=\"space-y-2\" data-testid=\"stat-streak\">\n                  <div className=\"flex items-center gap-2 text-muted-foreground\">\n                    <Flame className=\"h-4 w-4\" />\n                    <span className=\"text-sm\">Current Streak</span>\n                  </div>\n                  <p className=\"text-2xl font-bold\">{progress.currentStreak}</p>\n                </div>\n\n                <div className=\"space-y-2\" data-testid=\"stat-longest-streak\">\n                  <div className=\"flex items-center gap-2 text-muted-foreground\">\n                    <Trophy className=\"h-4 w-4\" />\n                    <span className=\"text-sm\">Longest Streak</span>\n                  </div>\n                  <p className=\"text-2xl font-bold\">{progress.longestStreak}</p>\n                </div>\n\n                <div className=\"space-y-2\" data-testid=\"stat-points\">\n                  <div className=\"flex items-center gap-2 text-muted-foreground\">\n                    <Star className=\"h-4 w-4\" />\n                    <span className=\"text-sm\">Total Points</span>\n                  </div>\n                  <p className=\"text-2xl font-bold\">{progress.totalPoints}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Preferences Card */}\n        {user.onboardingCompleted === 1 && (\n          <Card data-testid=\"card-preferences\">\n            <CardHeader>\n              <CardTitle>Your Preferences</CardTitle>\n              <CardDescription>Challenge categories and schedule</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {user.preferredCategories && user.preferredCategories.length > 0 && (\n                <div>\n                  <h3 className=\"text-sm font-medium mb-2\">Preferred Categories</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {user.preferredCategories.map((category) => {\n                      const Icon = categoryIcons[category as keyof typeof categoryIcons];\n                      return (\n                        <Badge key={category} variant=\"secondary\" data-testid={`badge-category-${category}`}>\n                          {Icon && <Icon className=\"h-3 w-3 mr-1\" />}\n                          {category}\n                        </Badge>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n\n              <Separator />\n\n              {user.preferredDays && user.preferredDays.length > 0 && (\n                <div>\n                  <h3 className=\"text-sm font-medium mb-2\">Challenge Days</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {user.preferredDays.map((day) => {\n                      const dayNames = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n                      return (\n                        <Badge key={day} variant=\"outline\" data-testid={`badge-day-${day}`}>\n                          {dayNames[day]}\n                        </Badge>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n\n              {user.hasMentalHealthConcerns === \"yes\" && user.mentalHealthDetails && (\n                <>\n                  <Separator />\n                  <div>\n                    <h3 className=\"text-sm font-medium mb-2\">Mental Health Notes</h3>\n                    <p className=\"text-sm text-muted-foreground\" data-testid=\"text-mental-health-details\">\n                      {user.mentalHealthDetails}\n                    </p>\n                  </div>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6984},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"server/storage.ts":{"content":"import {\n  type Challenge,\n  type InsertChallenge,\n  type UserProgress,\n  type InsertUserProgress,\n  type ChallengeHistory,\n  type InsertChallengeHistory,\n  type CreateChallengeHistory,\n  type ChallengeWithDetails,\n  type User,\n  type UpsertUser,\n  type Achievement,\n  type InsertAchievement,\n  type UserAchievement,\n  type InsertUserAchievement,\n  type AchievementWithProgress,\n  type Friendship,\n  type InsertFriendship,\n  type FriendWithDetails,\n  challenges,\n  userProgress,\n  challengeHistory,\n  users,\n  achievements,\n  userAchievements,\n  friendships,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql, or, inArray } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (Required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  findUserByEmailOrUsername(emailOrUsername: string): Promise<User | undefined>;\n  createLocalUser(userData: {\n    email: string;\n    username: string;\n    password: string;\n    firstName?: string;\n    lastName?: string;\n  }): Promise<User>;\n  updateUserPreferences(userId: string, preferences: {\n    preferredCategories?: string[];\n    hasMentalHealthConcerns?: string;\n    mentalHealthDetails?: string;\n    preferredDays?: number[];\n    onboardingCompleted?: number;\n  }): Promise<User>;\n\n  // Challenges\n  getAllChallenges(): Promise<Challenge[]>;\n  getChallengeById(id: string): Promise<Challenge | undefined>;\n  getChallengesByCategory(category: string): Promise<Challenge[]>;\n  getRandomChallenge(): Promise<Challenge | undefined>;\n  createChallenge(challenge: InsertChallenge, userId: string): Promise<Challenge>;\n  updateChallenge(id: string, challenge: Partial<InsertChallenge>, userId: string): Promise<Challenge | undefined>;\n  deleteChallenge(id: string, userId: string): Promise<boolean>;\n  getUserChallenges(userId: string): Promise<Challenge[]>;\n\n  // User Progress (user-specific)\n  getUserProgress(userId: string): Promise<UserProgress>;\n  updateUserProgress(userId: string, progress: Partial<InsertUserProgress>): Promise<UserProgress>;\n  incrementStreak(userId: string): Promise<void>;\n  resetStreak(userId: string): Promise<void>;\n  addPoints(userId: string, points: number): Promise<void>;\n\n  // Challenge History (user-specific)\n  getAllHistory(userId: string): Promise<ChallengeWithDetails[]>;\n  addHistoryEntry(userId: string, entry: CreateChallengeHistory): Promise<ChallengeHistory>;\n  getHistoryByDate(userId: string, date: string): Promise<ChallengeHistory[]>;\n\n  // Achievements\n  getAllAchievements(): Promise<Achievement[]>;\n  getUserAchievements(userId: string): Promise<AchievementWithProgress[]>;\n  checkAndUnlockAchievements(userId: string): Promise<Achievement[]>;\n  unlockAchievement(userId: string, achievementId: string): Promise<UserAchievement>;\n  getAchievementShare(userAchievementId: string): Promise<{\n    achievement: Achievement;\n    user: Pick<User, 'firstName' | 'lastName' | 'profileImageUrl'>;\n    unlockedAt: Date | null;\n  } | null>;\n\n  // Analytics\n  getDailyStats(userId: string, days: number): Promise<Array<{ date: string; count: number; points: number }>>;\n  getCategoryDistribution(userId: string): Promise<Array<{ category: string; count: number; percentage: number }>>;\n  getWeeklyTrend(userId: string): Promise<Array<{ week: string; count: number; points: number }>>;\n  getMonthlyTrend(userId: string): Promise<Array<{ month: string; count: number; points: number }>>;\n\n  // Friends\n  sendFriendRequest(requesterId: string, receiverEmail: string): Promise<Friendship | null>;\n  acceptFriendRequest(friendshipId: string, userId: string): Promise<Friendship | null>;\n  declineFriendRequest(friendshipId: string, userId: string): Promise<boolean>;\n  getFriends(userId: string): Promise<FriendWithDetails[]>;\n  getPendingRequests(userId: string): Promise<FriendWithDetails[]>;\n  unfriend(friendshipId: string, userId: string): Promise<boolean>;\n  getFriendActivity(userId: string, limit?: number): Promise<Array<{\n    userId: string;\n    firstName: string | null;\n    lastName: string | null;\n    profileImageUrl: string | null;\n    challengeTitle: string;\n    completedAt: string;\n    pointsEarned: number;\n  }>>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (Required for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async findUserByEmailOrUsername(emailOrUsername: string): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(\n        or(\n          eq(users.email, emailOrUsername),\n          eq(users.username, emailOrUsername)\n        )\n      );\n    return user;\n  }\n\n  async createLocalUser(userData: {\n    email: string;\n    username: string;\n    password: string;\n    firstName?: string;\n    lastName?: string;\n  }): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        email: userData.email,\n        username: userData.username,\n        password: userData.password,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        onboardingCompleted: 0,\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserPreferences(userId: string, preferences: {\n    preferredCategories?: string[];\n    hasMentalHealthConcerns?: string;\n    mentalHealthDetails?: string;\n    preferredDays?: number[];\n    onboardingCompleted?: number;\n  }): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        preferredCategories: preferences.preferredCategories as any,\n        hasMentalHealthConcerns: preferences.hasMentalHealthConcerns,\n        mentalHealthDetails: preferences.mentalHealthDetails,\n        preferredDays: preferences.preferredDays as any,\n        onboardingCompleted: preferences.onboardingCompleted,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Challenges\n  async getAllChallenges(): Promise<Challenge[]> {\n    return await db.select().from(challenges);\n  }\n\n  async getChallengeById(id: string): Promise<Challenge | undefined> {\n    const [challenge] = await db.select().from(challenges).where(eq(challenges.id, id));\n    return challenge;\n  }\n\n  async getChallengesByCategory(category: string): Promise<Challenge[]> {\n    return await db.select().from(challenges).where(eq(challenges.category, category));\n  }\n\n  async getRandomChallenge(): Promise<Challenge | undefined> {\n    const [challenge] = await db\n      .select()\n      .from(challenges)\n      .orderBy(sql`RANDOM()`)\n      .limit(1);\n    return challenge;\n  }\n\n  async createChallenge(insertChallenge: InsertChallenge, userId: string): Promise<Challenge> {\n    const [challenge] = await db.insert(challenges).values({\n      ...insertChallenge,\n      createdBy: userId,\n    }).returning();\n    return challenge;\n  }\n\n  async updateChallenge(id: string, updates: Partial<InsertChallenge>, userId: string): Promise<Challenge | undefined> {\n    // Check if challenge exists and was created by this user\n    const existing = await this.getChallengeById(id);\n    if (!existing || existing.createdBy !== userId) {\n      return undefined;\n    }\n\n    const [challenge] = await db\n      .update(challenges)\n      .set(updates)\n      .where(eq(challenges.id, id))\n      .returning();\n    return challenge;\n  }\n\n  async deleteChallenge(id: string, userId: string): Promise<boolean> {\n    // Check if challenge exists and was created by this user\n    const existing = await this.getChallengeById(id);\n    if (!existing || existing.createdBy !== userId) {\n      return false;\n    }\n\n    // System challenges (createdBy is null) cannot be deleted\n    if (existing.createdBy === null) {\n      return false;\n    }\n\n    await db.delete(challenges).where(eq(challenges.id, id));\n    return true;\n  }\n\n  async getUserChallenges(userId: string): Promise<Challenge[]> {\n    return await db.select().from(challenges).where(eq(challenges.createdBy, userId));\n  }\n\n  // User Progress\n  async getUserProgress(userId: string): Promise<UserProgress> {\n    let [progress] = await db\n      .select()\n      .from(userProgress)\n      .where(eq(userProgress.userId, userId));\n\n    // Create initial progress if it doesn't exist\n    if (!progress) {\n      [progress] = await db\n        .insert(userProgress)\n        .values({\n          userId,\n          totalChallengesCompleted: 0,\n          currentStreak: 0,\n          longestStreak: 0,\n          totalPoints: 0,\n          lastCompletedDate: null,\n        })\n        .returning();\n    }\n\n    return progress;\n  }\n\n  async updateUserProgress(userId: string, updates: Partial<InsertUserProgress>): Promise<UserProgress> {\n    const [progress] = await db\n      .update(userProgress)\n      .set(updates)\n      .where(eq(userProgress.userId, userId))\n      .returning();\n    return progress;\n  }\n\n  async incrementStreak(userId: string): Promise<void> {\n    const progress = await this.getUserProgress(userId);\n    const newStreak = progress.currentStreak + 1;\n    const newLongest = Math.max(newStreak, progress.longestStreak);\n\n    await db\n      .update(userProgress)\n      .set({\n        currentStreak: newStreak,\n        longestStreak: newLongest,\n      })\n      .where(eq(userProgress.userId, userId));\n  }\n\n  async resetStreak(userId: string): Promise<void> {\n    await db\n      .update(userProgress)\n      .set({ currentStreak: 0 })\n      .where(eq(userProgress.userId, userId));\n  }\n\n  async addPoints(userId: string, points: number): Promise<void> {\n    const progress = await this.getUserProgress(userId);\n    await db\n      .update(userProgress)\n      .set({ totalPoints: progress.totalPoints + points })\n      .where(eq(userProgress.userId, userId));\n  }\n\n  // Challenge History\n  async getAllHistory(userId: string): Promise<ChallengeWithDetails[]> {\n    const history = await db\n      .select()\n      .from(challengeHistory)\n      .where(eq(challengeHistory.userId, userId))\n      .orderBy(desc(challengeHistory.completedAt));\n\n    // Enrich with challenge details\n    const enriched: ChallengeWithDetails[] = [];\n    for (const h of history) {\n      const challenge = await this.getChallengeById(h.challengeId);\n      if (challenge) {\n        enriched.push({\n          ...challenge,\n          completedAt: h.completedAt,\n          timeSpent: h.timeSpent,\n          pointsEarned: h.pointsEarned,\n        });\n      }\n    }\n\n    return enriched;\n  }\n\n  async addHistoryEntry(userId: string, entry: InsertChallengeHistory): Promise<ChallengeHistory> {\n    const [historyEntry] = await db\n      .insert(challengeHistory)\n      .values({ ...entry, userId })\n      .returning();\n\n    const progress = await this.getUserProgress(userId);\n\n    // Update total challenges and points\n    const newTotal = progress.totalChallengesCompleted + 1;\n    const newPoints = progress.totalPoints + entry.pointsEarned;\n\n    // Update streak\n    const today = new Date().toISOString().split(\"T\")[0];\n    const lastDate = progress.lastCompletedDate;\n\n    let newStreak = progress.currentStreak;\n    let newLongest = progress.longestStreak;\n\n    if (!lastDate) {\n      // First challenge ever\n      newStreak = 1;\n      newLongest = 1;\n    } else {\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      const yesterdayStr = yesterday.toISOString().split(\"T\")[0];\n\n      if (lastDate === today) {\n        // Already completed one today, streak unchanged\n      } else if (lastDate === yesterdayStr) {\n        // Consecutive day\n        newStreak = progress.currentStreak + 1;\n        newLongest = Math.max(newStreak, progress.longestStreak);\n      } else {\n        // Streak broken\n        newStreak = 1;\n      }\n    }\n\n    await db\n      .update(userProgress)\n      .set({\n        totalChallengesCompleted: newTotal,\n        totalPoints: newPoints,\n        currentStreak: newStreak,\n        longestStreak: newLongest,\n        lastCompletedDate: today,\n      })\n      .where(eq(userProgress.userId, userId));\n\n    return historyEntry;\n  }\n\n  async getHistoryByDate(userId: string, date: string): Promise<ChallengeHistory[]> {\n    return await db\n      .select()\n      .from(challengeHistory)\n      .where(\n        and(\n          eq(challengeHistory.userId, userId),\n          sql`${challengeHistory.completedAt} LIKE ${date + '%'}`\n        )\n      );\n  }\n\n  // Achievements\n  async getAllAchievements(): Promise<Achievement[]> {\n    return await db\n      .select()\n      .from(achievements)\n      .orderBy(achievements.sortOrder);\n  }\n\n  async getUserAchievements(userId: string): Promise<AchievementWithProgress[]> {\n    // Get all achievements\n    const allAchievements = await this.getAllAchievements();\n    \n    // Get user's unlocked achievements\n    const unlockedAchievements = await db\n      .select()\n      .from(userAchievements)\n      .where(eq(userAchievements.userId, userId));\n\n    // Get user progress for calculating progress on locked achievements\n    const progress = await this.getUserProgress(userId);\n    \n    // Get category-specific progress\n    const categoryProgress = await db\n      .select({\n        category: challenges.category,\n        count: sql<number>`COUNT(*)`,\n      })\n      .from(challengeHistory)\n      .innerJoin(challenges, eq(challengeHistory.challengeId, challenges.id))\n      .where(eq(challengeHistory.userId, userId))\n      .groupBy(challenges.category);\n\n    const categoryMap = new Map(categoryProgress.map(c => [c.category, Number(c.count)]));\n\n    // Combine achievement data with unlock status and progress\n    return allAchievements.map(achievement => {\n      const unlocked = unlockedAchievements.find(ua => ua.achievementId === achievement.id);\n      \n      let currentProgress = 0;\n      let requirementValue = achievement.requirementValue;\n\n      // Calculate progress based on requirement type\n      switch (achievement.requirementType) {\n        case \"challenges_completed\":\n          currentProgress = progress.totalChallengesCompleted;\n          break;\n        case \"streak_days\":\n          currentProgress = progress.currentStreak;\n          break;\n        case \"total_points\":\n          currentProgress = progress.totalPoints;\n          break;\n        case \"category_challenges\":\n          const category = (achievement.requirementMeta as { category?: string })?.category;\n          if (category) {\n            currentProgress = categoryMap.get(category) || 0;\n          }\n          break;\n        case \"all_categories\":\n          // Check if all categories have at least requirementValue completions\n          const allCategoriesMet = [\"physical\", \"mental\", \"learning\", \"finance\", \"relationships\"]\n            .every(cat => (categoryMap.get(cat) || 0) >= requirementValue);\n          currentProgress = allCategoriesMet ? requirementValue : 0;\n          break;\n      }\n\n      return {\n        ...achievement,\n        unlocked: !!unlocked,\n        unlockedAt: unlocked?.unlockedAt?.toISOString() || null,\n        progress: currentProgress,\n        progressPercent: Math.min(100, Math.floor((currentProgress / requirementValue) * 100)),\n        userAchievementId: unlocked?.id || null, // Include for sharing\n      };\n    });\n  }\n\n  async unlockAchievement(userId: string, achievementId: string): Promise<UserAchievement> {\n    // Check if already unlocked\n    const existing = await db\n      .select()\n      .from(userAchievements)\n      .where(\n        and(\n          eq(userAchievements.userId, userId),\n          eq(userAchievements.achievementId, achievementId)\n        )\n      );\n\n    if (existing.length > 0) {\n      return existing[0];\n    }\n\n    // Unlock the achievement\n    const [unlocked] = await db\n      .insert(userAchievements)\n      .values({\n        userId,\n        achievementId,\n      })\n      .returning();\n\n    return unlocked;\n  }\n\n  async checkAndUnlockAchievements(userId: string): Promise<Achievement[]> {\n    const userAchievementsWithProgress = await this.getUserAchievements(userId);\n    const newlyUnlocked: Achievement[] = [];\n\n    for (const achievement of userAchievementsWithProgress) {\n      // Skip if already unlocked\n      if (achievement.unlocked) {\n        continue;\n      }\n\n      // Check if requirement is met\n      if (achievement.progress >= achievement.requirementValue) {\n        await this.unlockAchievement(userId, achievement.id);\n        newlyUnlocked.push(achievement);\n      }\n    }\n\n    return newlyUnlocked;\n  }\n\n  async getAchievementShare(userAchievementId: string): Promise<{\n    achievement: Achievement;\n    user: Pick<User, 'firstName' | 'lastName' | 'profileImageUrl'>;\n    unlockedAt: Date | null;\n  } | null> {\n    // Get the user achievement with joined data\n    const [result] = await db\n      .select({\n        achievement: achievements,\n        userFirstName: users.firstName,\n        userLastName: users.lastName,\n        userProfileImageUrl: users.profileImageUrl,\n        unlockedAt: userAchievements.unlockedAt,\n      })\n      .from(userAchievements)\n      .innerJoin(achievements, eq(achievements.id, userAchievements.achievementId))\n      .innerJoin(users, eq(users.id, userAchievements.userId))\n      .where(eq(userAchievements.id, userAchievementId));\n\n    if (!result) {\n      return null;\n    }\n\n    return {\n      achievement: result.achievement,\n      user: {\n        firstName: result.userFirstName,\n        lastName: result.userLastName,\n        profileImageUrl: result.userProfileImageUrl,\n      },\n      unlockedAt: result.unlockedAt,\n    };\n  }\n\n  // Analytics\n  async getDailyStats(userId: string, days: number): Promise<Array<{ date: string; count: number; points: number }>> {\n    // Get the date range\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    // Query history for the date range\n    const history = await db\n      .select({\n        date: sql<string>`DATE(${challengeHistory.completedAt}::timestamptz)`,\n        count: sql<number>`COUNT(*)`,\n        points: sql<number>`SUM(${challengeHistory.pointsEarned})`,\n      })\n      .from(challengeHistory)\n      .where(\n        and(\n          eq(challengeHistory.userId, userId),\n          sql`${challengeHistory.completedAt}::timestamptz >= ${startDate.toISOString()}::timestamptz`\n        )\n      )\n      .groupBy(sql`DATE(${challengeHistory.completedAt}::timestamptz)`)\n      .orderBy(sql`DATE(${challengeHistory.completedAt}::timestamptz)`);\n\n    // Fill in missing dates with zero values\n    const result: Array<{ date: string; count: number; points: number }> = [];\n    for (let i = 0; i < days; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() - (days - 1 - i));\n      const dateStr = date.toISOString().split('T')[0];\n      \n      const existing = history.find(h => h.date === dateStr);\n      result.push({\n        date: dateStr,\n        count: existing ? Number(existing.count) : 0,\n        points: existing ? Number(existing.points) : 0,\n      });\n    }\n\n    return result;\n  }\n\n  async getCategoryDistribution(userId: string): Promise<Array<{ category: string; count: number; percentage: number }>> {\n    const distribution = await db\n      .select({\n        category: challenges.category,\n        count: sql<number>`COUNT(*)`,\n      })\n      .from(challengeHistory)\n      .innerJoin(challenges, eq(challengeHistory.challengeId, challenges.id))\n      .where(eq(challengeHistory.userId, userId))\n      .groupBy(challenges.category);\n\n    const total = distribution.reduce((sum, item) => sum + Number(item.count), 0);\n\n    return distribution.map(item => ({\n      category: item.category,\n      count: Number(item.count),\n      percentage: total > 0 ? Math.round((Number(item.count) / total) * 100) : 0,\n    }));\n  }\n\n  async getWeeklyTrend(userId: string): Promise<Array<{ week: string; count: number; points: number }>> {\n    // Get last 12 weeks\n    const twelveWeeksAgo = new Date();\n    twelveWeeksAgo.setDate(twelveWeeksAgo.getDate() - 84); // 12 weeks = 84 days\n    \n    const weeks = await db\n      .select({\n        week: sql<string>`TO_CHAR(DATE_TRUNC('week', ${challengeHistory.completedAt}::timestamptz), 'YYYY-MM-DD')`,\n        count: sql<number>`COUNT(*)`,\n        points: sql<number>`SUM(${challengeHistory.pointsEarned})`,\n      })\n      .from(challengeHistory)\n      .where(\n        and(\n          eq(challengeHistory.userId, userId),\n          sql`${challengeHistory.completedAt}::timestamptz >= ${twelveWeeksAgo.toISOString()}::timestamptz`\n        )\n      )\n      .groupBy(sql`DATE_TRUNC('week', ${challengeHistory.completedAt}::timestamptz)`)\n      .orderBy(sql`DATE_TRUNC('week', ${challengeHistory.completedAt}::timestamptz)`);\n\n    return weeks.map(w => ({\n      week: w.week,\n      count: Number(w.count),\n      points: Number(w.points),\n    }));\n  }\n\n  async getMonthlyTrend(userId: string): Promise<Array<{ month: string; count: number; points: number }>> {\n    // Get last 12 months\n    const twelveMonthsAgo = new Date();\n    twelveMonthsAgo.setMonth(twelveMonthsAgo.getMonth() - 12);\n    \n    const months = await db\n      .select({\n        month: sql<string>`TO_CHAR(DATE_TRUNC('month', ${challengeHistory.completedAt}::timestamptz), 'YYYY-MM')`,\n        count: sql<number>`COUNT(*)`,\n        points: sql<number>`SUM(${challengeHistory.pointsEarned})`,\n      })\n      .from(challengeHistory)\n      .where(\n        and(\n          eq(challengeHistory.userId, userId),\n          sql`${challengeHistory.completedAt}::timestamptz >= ${twelveMonthsAgo.toISOString()}::timestamptz`\n        )\n      )\n      .groupBy(sql`DATE_TRUNC('month', ${challengeHistory.completedAt}::timestamptz)`)\n      .orderBy(sql`DATE_TRUNC('month', ${challengeHistory.completedAt}::timestamptz)`);\n\n    return months.map(m => ({\n      month: m.month,\n      count: Number(m.count),\n      points: Number(m.points),\n    }));\n  }\n\n  // Friends operations\n  async sendFriendRequest(requesterId: string, receiverEmail: string): Promise<Friendship | null> {\n    // Find receiver by email\n    const [receiver] = await db.select().from(users).where(eq(users.email, receiverEmail));\n    if (!receiver) {\n      return null; // Receiver not found\n    }\n\n    // Cannot send request to yourself\n    if (receiver.id === requesterId) {\n      return null;\n    }\n\n    // Check if friendship already exists (any status)\n    const [existing] = await db\n      .select()\n      .from(friendships)\n      .where(\n        or(\n          and(eq(friendships.requesterId, requesterId), eq(friendships.receiverId, receiver.id)),\n          and(eq(friendships.requesterId, receiver.id), eq(friendships.receiverId, requesterId))\n        )\n      );\n\n    if (existing) {\n      return null; // Friendship already exists\n    }\n\n    // Create friend request\n    const [friendship] = await db\n      .insert(friendships)\n      .values({\n        requesterId,\n        receiverId: receiver.id,\n        status: \"pending\",\n      })\n      .returning();\n\n    return friendship;\n  }\n\n  async acceptFriendRequest(friendshipId: string, userId: string): Promise<Friendship | null> {\n    // Find the friendship and verify the user is the receiver\n    const [friendship] = await db\n      .select()\n      .from(friendships)\n      .where(and(eq(friendships.id, friendshipId), eq(friendships.receiverId, userId)));\n\n    if (!friendship || friendship.status !== \"pending\") {\n      return null;\n    }\n\n    // Update status to accepted\n    const [updated] = await db\n      .update(friendships)\n      .set({\n        status: \"accepted\",\n        respondedAt: new Date(),\n      })\n      .where(eq(friendships.id, friendshipId))\n      .returning();\n\n    return updated;\n  }\n\n  async declineFriendRequest(friendshipId: string, userId: string): Promise<boolean> {\n    // Find the friendship and verify the user is the receiver\n    const [friendship] = await db\n      .select()\n      .from(friendships)\n      .where(and(eq(friendships.id, friendshipId), eq(friendships.receiverId, userId)));\n\n    if (!friendship || friendship.status !== \"pending\") {\n      return false;\n    }\n\n    // Update status to declined\n    await db\n      .update(friendships)\n      .set({\n        status: \"declined\",\n        respondedAt: new Date(),\n      })\n      .where(eq(friendships.id, friendshipId));\n\n    return true;\n  }\n\n  async getFriends(userId: string): Promise<FriendWithDetails[]> {\n    // Get all accepted friendships where user is either requester or receiver\n    const allFriendships = await db\n      .select({\n        friendshipId: friendships.id,\n        requesterId: friendships.requesterId,\n        receiverId: friendships.receiverId,\n        status: friendships.status,\n        createdAt: friendships.createdAt,\n        requesterEmail: users.email,\n        requesterFirstName: users.firstName,\n        requesterLastName: users.lastName,\n        requesterProfileImageUrl: users.profileImageUrl,\n      })\n      .from(friendships)\n      .innerJoin(users, eq(users.id, friendships.requesterId))\n      .where(\n        and(\n          or(eq(friendships.requesterId, userId), eq(friendships.receiverId, userId)),\n          eq(friendships.status, \"accepted\")\n        )\n      );\n\n    const receiverFriendships = await db\n      .select({\n        friendshipId: friendships.id,\n        requesterId: friendships.requesterId,\n        receiverId: friendships.receiverId,\n        status: friendships.status,\n        createdAt: friendships.createdAt,\n        receiverEmail: users.email,\n        receiverFirstName: users.firstName,\n        receiverLastName: users.lastName,\n        receiverProfileImageUrl: users.profileImageUrl,\n      })\n      .from(friendships)\n      .innerJoin(users, eq(users.id, friendships.receiverId))\n      .where(\n        and(\n          or(eq(friendships.requesterId, userId), eq(friendships.receiverId, userId)),\n          eq(friendships.status, \"accepted\")\n        )\n      );\n\n    // Combine and format results\n    const friends: FriendWithDetails[] = [];\n\n    for (const f of allFriendships) {\n      if (f.receiverId === userId) {\n        friends.push({\n          friendshipId: f.friendshipId,\n          userId: f.requesterId,\n          email: f.requesterEmail,\n          firstName: f.requesterFirstName,\n          lastName: f.requesterLastName,\n          profileImageUrl: f.requesterProfileImageUrl,\n          status: f.status as any,\n          createdAt: f.createdAt,\n        });\n      }\n    }\n\n    for (const f of receiverFriendships) {\n      if (f.requesterId === userId) {\n        friends.push({\n          friendshipId: f.friendshipId,\n          userId: f.receiverId,\n          email: f.receiverEmail,\n          firstName: f.receiverFirstName,\n          lastName: f.receiverLastName,\n          profileImageUrl: f.receiverProfileImageUrl,\n          status: f.status as any,\n          createdAt: f.createdAt,\n        });\n      }\n    }\n\n    return friends;\n  }\n\n  async getPendingRequests(userId: string): Promise<FriendWithDetails[]> {\n    // Get incoming pending requests (where user is receiver)\n    const incoming = await db\n      .select({\n        friendshipId: friendships.id,\n        userId: friendships.requesterId,\n        email: users.email,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        profileImageUrl: users.profileImageUrl,\n        status: friendships.status,\n        createdAt: friendships.createdAt,\n      })\n      .from(friendships)\n      .innerJoin(users, eq(users.id, friendships.requesterId))\n      .where(and(eq(friendships.receiverId, userId), eq(friendships.status, \"pending\")));\n\n    return incoming.map(f => ({\n      friendshipId: f.friendshipId,\n      userId: f.userId,\n      email: f.email,\n      firstName: f.firstName,\n      lastName: f.lastName,\n      profileImageUrl: f.profileImageUrl,\n      status: f.status as any,\n      createdAt: f.createdAt,\n    }));\n  }\n\n  async unfriend(friendshipId: string, userId: string): Promise<boolean> {\n    // Verify the user is part of this friendship\n    const [friendship] = await db\n      .select()\n      .from(friendships)\n      .where(\n        and(\n          eq(friendships.id, friendshipId),\n          or(eq(friendships.requesterId, userId), eq(friendships.receiverId, userId))\n        )\n      );\n\n    if (!friendship) {\n      return false;\n    }\n\n    // Delete the friendship\n    await db.delete(friendships).where(eq(friendships.id, friendshipId));\n    return true;\n  }\n\n  async getFriendActivity(\n    userId: string,\n    limit: number = 20\n  ): Promise<\n    Array<{\n      userId: string;\n      firstName: string | null;\n      lastName: string | null;\n      profileImageUrl: string | null;\n      challengeTitle: string;\n      completedAt: string;\n      pointsEarned: number;\n    }>\n  > {\n    // Get list of friend user IDs\n    const friends = await this.getFriends(userId);\n    const friendIds = friends.map(f => f.userId);\n\n    if (friendIds.length === 0) {\n      return [];\n    }\n\n    // Get recent challenge completions from friends\n    const activity = await db\n      .select({\n        userId: users.id,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        profileImageUrl: users.profileImageUrl,\n        challengeTitle: challenges.title,\n        completedAt: challengeHistory.completedAt,\n        pointsEarned: challengeHistory.pointsEarned,\n      })\n      .from(challengeHistory)\n      .innerJoin(users, eq(users.id, challengeHistory.userId))\n      .innerJoin(challenges, eq(challenges.id, challengeHistory.challengeId))\n      .where(inArray(challengeHistory.userId, friendIds))\n      .orderBy(desc(challengeHistory.completedAt))\n      .limit(limit);\n\n    return activity;\n  }\n}\n\n// Seed challenges data\nexport const challengeSeedData: InsertChallenge[] = [\n  // Physical Challenges - Easy\n  {\n    title: \"Desk Stretch Series\",\n    description: \"Relieve tension with simple stretches you can do at your desk\",\n    category: \"physical\",\n    subcategory: \"stretching\",\n    difficulty: \"easy\",\n    points: 10,\n    instructions: \"Stand up and perform neck rolls, shoulder shrugs, and seated twists. Hold each stretch for 10-15 seconds. Focus on deep breathing throughout.\",\n  },\n  {\n    title: \"Two-Minute Walk\",\n    description: \"Get your blood flowing with a quick walking break\",\n    category: \"physical\",\n    subcategory: \"cardio\",\n    difficulty: \"easy\",\n    points: 10,\n    instructions: \"Walk around your space at a comfortable pace. If possible, go outside or to a different room. Swing your arms naturally and breathe deeply.\",\n  },\n  {\n    title: \"Wall Push-Ups\",\n    description: \"Build upper body strength with wall-assisted push-ups\",\n    category: \"physical\",\n    subcategory: \"strength\",\n    difficulty: \"easy\",\n    points: 10,\n    instructions: \"Stand arm's length from a wall. Place hands on wall at shoulder height. Do slow, controlled push-ups for 2 minutes. Rest as needed.\",\n  },\n\n  // Physical Challenges - Medium\n  {\n    title: \"Plank Challenge\",\n    description: \"Build core strength with a timed plank hold\",\n    category: \"physical\",\n    subcategory: \"strength\",\n    difficulty: \"medium\",\n    points: 20,\n    instructions: \"Hold a forearm plank with proper form. Keep your body in a straight line. Start with 30 seconds, rest 15 seconds, repeat. Focus on engaging your core.\",\n  },\n  {\n    title: \"Stair Climbing\",\n    description: \"Boost your cardio with quick stair intervals\",\n    category: \"physical\",\n    subcategory: \"cardio\",\n    difficulty: \"medium\",\n    points: 20,\n    instructions: \"Find a staircase and walk up and down at a moderate pace for 2 minutes. Use the railing for support if needed. Maintain steady breathing.\",\n  },\n  {\n    title: \"Yoga Flow\",\n    description: \"Flow through basic yoga poses for flexibility and balance\",\n    category: \"physical\",\n    subcategory: \"flexibility\",\n    difficulty: \"medium\",\n    points: 20,\n    instructions: \"Move through: Mountain Pose → Forward Fold → Downward Dog → Cobra → Child's Pose. Repeat the sequence slowly, holding each pose for 15-20 seconds.\",\n  },\n\n  // Physical Challenges - Hard\n  {\n    title: \"High-Intensity Cardio Burst\",\n    description: \"Push your limits with jumping jacks and high knees\",\n    category: \"physical\",\n    subcategory: \"cardio\",\n    difficulty: \"hard\",\n    points: 30,\n    instructions: \"Alternate 20 seconds of jumping jacks with 20 seconds of high knees. Repeat for 2 minutes. Go at your maximum safe intensity.\",\n  },\n  {\n    title: \"Advanced Core Circuit\",\n    description: \"Challenge your core with dynamic exercises\",\n    category: \"physical\",\n    subcategory: \"strength\",\n    difficulty: \"hard\",\n    points: 30,\n    instructions: \"Do 30 seconds each: bicycle crunches, Russian twists, leg raises, plank. Rest 15 seconds between exercises. Repeat the circuit.\",\n  },\n\n  // Mental Challenges - Easy\n  {\n    title: \"Mindful Breathing\",\n    description: \"Center yourself with focused breathing exercises\",\n    category: \"mental\",\n    subcategory: \"meditation\",\n    difficulty: \"easy\",\n    points: 10,\n    instructions: \"Sit comfortably. Breathe in for 4 counts, hold for 4, exhale for 4. Focus only on your breath. When your mind wanders, gently return to counting.\",\n  },\n  {\n    title: \"Gratitude Reflection\",\n    description: \"Boost positivity by listing things you're grateful for\",\n    category: \"mental\",\n    subcategory: \"mindfulness\",\n    difficulty: \"easy\",\n    points: 10,\n    instructions: \"Write down or mentally list 5-10 things you're grateful for today. They can be big or small. Notice how you feel as you think about each one.\",\n  },\n  {\n    title: \"Observation Exercise\",\n    description: \"Practice presence by noticing your surroundings\",\n    category: \"mental\",\n    subcategory: \"awareness\",\n    difficulty: \"easy\",\n    points: 10,\n    instructions: \"Look around and name 5 things you can see, 4 you can touch, 3 you can hear, 2 you can smell, and 1 you can taste. Take your time with each sense.\",\n  },\n\n  // Mental Challenges - Medium\n  {\n    title: \"Worry Time\",\n    description: \"Contain anxiety by scheduling dedicated worry time\",\n    category: \"mental\",\n    subcategory: \"anxiety-management\",\n    difficulty: \"medium\",\n    points: 20,\n    instructions: \"Set a timer for 2 minutes. Write down all your worries without censoring. When time's up, close the list and promise to revisit it later if needed.\",\n  },\n  {\n    title: \"Visualization Journey\",\n    description: \"Create a peaceful mental sanctuary through guided imagery\",\n    category: \"mental\",\n    subcategory: \"meditation\",\n    difficulty: \"medium\",\n    points: 20,\n    instructions: \"Close your eyes. Imagine a peaceful place in vivid detail - colors, sounds, smells, textures. Spend 2 minutes exploring this sanctuary in your mind.\",\n  },\n  {\n    title: \"Memory Palace\",\n    description: \"Sharpen your memory by recalling details from your day\",\n    category: \"mental\",\n    subcategory: \"cognitive\",\n    difficulty: \"medium\",\n    points: 20,\n    instructions: \"Close your eyes and mentally walk through your morning from the moment you woke up. Try to remember as many specific details as possible - sounds, colors, feelings.\",\n  },\n\n  // Mental Challenges - Hard\n  {\n    title: \"Mental Math Sprint\",\n    description: \"Exercise your brain with rapid calculations\",\n    category: \"mental\",\n    subcategory: \"cognitive\",\n    difficulty: \"hard\",\n    points: 30,\n    instructions: \"Pick a 2-digit number. Add 17, subtract 9, multiply by 2, divide by 3. Repeat with new starting numbers. Do as many sequences as possible mentally.\",\n  },\n  {\n    title: \"Mindfulness Body Scan\",\n    description: \"Deep meditation practice scanning every part of your body\",\n    category: \"mental\",\n    subcategory: \"meditation\",\n    difficulty: \"hard\",\n    points: 30,\n    instructions: \"Sit or lie down. Starting at your toes, slowly move attention through each body part. Notice sensations without judgment. Reach the top of your head by 2 minutes.\",\n  },\n\n  // Learning Challenges - Easy\n  {\n    title: \"One New Word\",\n    description: \"Expand your vocabulary with a new word\",\n    category: \"learning\",\n    subcategory: \"language\",\n    difficulty: \"easy\",\n    points: 10,\n    instructions: \"Look up a word you don't know. Read its definition, etymology, and example usage. Try to use it in a sentence. Write it down to remember.\",\n  },\n  {\n    title: \"Current Events Check\",\n    description: \"Stay informed by reading a news headline and summary\",\n    category: \"learning\",\n    subcategory: \"news\",\n    difficulty: \"easy\",\n    points: 10,\n    instructions: \"Read one news article or summary about a current event. Focus on understanding the who, what, where, when, and why. Consider different perspectives.\",\n  },\n  {\n    title: \"Fun Fact Deep Dive\",\n    description: \"Learn something fascinating about any topic\",\n    category: \"learning\",\n    subcategory: \"general-knowledge\",\n    difficulty: \"easy\",\n    points: 10,\n    instructions: \"Look up an interesting fact about something you're curious about. Read for 2 minutes to understand the context. Share what you learned with someone.\",\n  },\n\n  // Learning Challenges - Medium\n  {\n    title: \"TED Talk Speed Learning\",\n    description: \"Watch a 2-minute segment of an educational video\",\n    category: \"learning\",\n    subcategory: \"education\",\n    difficulty: \"medium\",\n    points: 20,\n    instructions: \"Find a TED talk or educational video on a topic you want to learn. Watch 2 minutes of it with full attention. Take one key insight to remember.\",\n  },\n  {\n    title: \"Historical Event Study\",\n    description: \"Learn about an important event from history\",\n    category: \"learning\",\n    subcategory: \"history\",\n    difficulty: \"medium\",\n    points: 20,\n    instructions: \"Pick a historical date or event you're curious about. Read a summary and key facts. Try to understand its significance and lasting impact.\",\n  },\n  {\n    title: \"Science Concept\",\n    description: \"Understand a basic scientific principle\",\n    category: \"learning\",\n    subcategory: \"science\",\n    difficulty: \"medium\",\n    points: 20,\n    instructions: \"Choose a scientific concept (photosynthesis, gravity, etc.). Read a simple explanation. See if you can explain it to yourself in your own words.\",\n  },\n\n  // Learning Challenges - Hard\n  {\n    title: \"Code a Mini Function\",\n    description: \"Write a small piece of code to solve a problem\",\n    category: \"learning\",\n    subcategory: \"programming\",\n    difficulty: \"hard\",\n    points: 30,\n    instructions: \"Write a simple function in any programming language (e.g., FizzBuzz, palindrome checker). Focus on clean, working code even if it's basic.\",\n  },\n  {\n    title: \"Language Practice\",\n    description: \"Practice a foreign language you're learning\",\n    category: \"learning\",\n    subcategory: \"language\",\n    difficulty: \"hard\",\n    points: 30,\n    instructions: \"Spend 2 minutes speaking, writing, or listening to a foreign language. Use a language app, read a paragraph, or practice conversation out loud.\",\n  },\n\n  // Finance Challenges - Easy\n  {\n    title: \"Expense Tracker Check\",\n    description: \"Review your recent spending\",\n    category: \"finance\",\n    subcategory: \"budgeting\",\n    difficulty: \"easy\",\n    points: 10,\n    instructions: \"Open your bank app or recent receipts. Review the last 3 transactions. Categorize them as necessary, discretionary, or impulse purchases.\",\n  },\n  {\n    title: \"Money Goal Reflection\",\n    description: \"Think about your financial goals\",\n    category: \"finance\",\n    subcategory: \"planning\",\n    difficulty: \"easy\",\n    points: 10,\n    instructions: \"Write down one short-term (this month) and one long-term (this year) financial goal. Be specific about the amounts and timeline.\",\n  },\n  {\n    title: \"Unsubscribe Audit\",\n    description: \"Check for unused subscriptions\",\n    category: \"finance\",\n    subcategory: \"savings\",\n    difficulty: \"easy\",\n    points: 10,\n    instructions: \"Look through your recent bank statements or emails. Identify one subscription or recurring charge you might not need anymore. Consider canceling it.\",\n  },\n\n  // Finance Challenges - Medium\n  {\n    title: \"Savings Rate Calculation\",\n    description: \"Calculate your current savings rate\",\n    category: \"finance\",\n    subcategory: \"analysis\",\n    difficulty: \"medium\",\n    points: 20,\n    instructions: \"Calculate: (Monthly Savings ÷ Monthly Income) × 100. Write down the percentage. Set a goal to increase it by 1-2% next month.\",\n  },\n  {\n    title: \"Price Comparison\",\n    description: \"Compare prices on something you need to buy\",\n    category: \"finance\",\n    subcategory: \"smart-shopping\",\n    difficulty: \"medium\",\n    points: 20,\n    instructions: \"Think of something you need to purchase soon. Quickly compare prices across 3 different sellers or platforms. Calculate potential savings.\",\n  },\n  {\n    title: \"Investment Check-In\",\n    description: \"Review your investment accounts if you have them\",\n    category: \"finance\",\n    subcategory: \"investing\",\n    difficulty: \"medium\",\n    points: 20,\n    instructions: \"If you have investments, check their performance. Note the current value. If you don't invest, research one type of investment vehicle for beginners.\",\n  },\n\n  // Finance Challenges - Hard\n  {\n    title: \"Budget Category Deep Dive\",\n    description: \"Analyze and optimize one spending category\",\n    category: \"finance\",\n    subcategory: \"budgeting\",\n    difficulty: \"hard\",\n    points: 30,\n    instructions: \"Pick one spending category (food, transport, etc.). Calculate total spent this month. Identify 2-3 specific ways to reduce it by 10-20% next month.\",\n  },\n  {\n    title: \"Financial Article Study\",\n    description: \"Read and understand a financial concept\",\n    category: \"finance\",\n    subcategory: \"education\",\n    difficulty: \"hard\",\n    points: 30,\n    instructions: \"Read an article about a financial topic you don't fully understand (compound interest, index funds, etc.). Summarize the key takeaway in one sentence.\",\n  },\n\n  // Relationships Challenges - Easy\n  {\n    title: \"Send a Quick Message\",\n    description: \"Reach out to someone you care about\",\n    category: \"relationships\",\n    subcategory: \"communication\",\n    difficulty: \"easy\",\n    points: 10,\n    instructions: \"Send a text, email, or message to someone you haven't talked to in a while. Keep it simple - ask how they're doing or share something that reminded you of them.\",\n  },\n  {\n    title: \"Appreciation Expression\",\n    description: \"Tell someone why you appreciate them\",\n    category: \"relationships\",\n    subcategory: \"gratitude\",\n    difficulty: \"easy\",\n    points: 10,\n    instructions: \"Think of someone in your life. Write down or tell them one specific thing you appreciate about them. Be genuine and specific.\",\n  },\n  {\n    title: \"Active Listening Practice\",\n    description: \"Give someone your full attention\",\n    category: \"relationships\",\n    subcategory: \"connection\",\n    difficulty: \"easy\",\n    points: 10,\n    instructions: \"If someone is talking to you, put away your phone and make eye contact. Listen without planning your response. Show you're engaged with nods and follow-up questions.\",\n  },\n\n  // Relationships Challenges - Medium\n  {\n    title: \"Conflict Resolution Planning\",\n    description: \"Think through a relationship tension constructively\",\n    category: \"relationships\",\n    subcategory: \"conflict-resolution\",\n    difficulty: \"medium\",\n    points: 20,\n    instructions: \"Identify one minor conflict or tension. Write down: your feelings, the other person's perspective, and one step toward resolution. Focus on understanding, not blame.\",\n  },\n  {\n    title: \"Quality Time Planning\",\n    description: \"Schedule meaningful time with someone\",\n    category: \"relationships\",\n    subcategory: \"bonding\",\n    difficulty: \"medium\",\n    points: 20,\n    instructions: \"Think of someone you'd like to spend time with. Send them a specific invitation - a date, time, and activity. Make it something you'd both enjoy.\",\n  },\n  {\n    title: \"Vulnerability Share\",\n    description: \"Open up about something real\",\n    category: \"relationships\",\n    subcategory: \"intimacy\",\n    difficulty: \"medium\",\n    points: 20,\n    instructions: \"Share something genuine with someone you trust - a fear, a hope, or something you're struggling with. Allow yourself to be authentic.\",\n  },\n\n  // Relationships Challenges - Hard\n  {\n    title: \"Difficult Conversation\",\n    description: \"Have a conversation you've been avoiding\",\n    category: \"relationships\",\n    subcategory: \"communication\",\n    difficulty: \"hard\",\n    points: 30,\n    instructions: \"Identify a conversation you've been putting off. Initiate it with empathy and honesty. Use 'I feel' statements. Listen without defensiveness.\",\n  },\n  {\n    title: \"Apology and Repair\",\n    description: \"Make amends for something you regret\",\n    category: \"relationships\",\n    subcategory: \"reconciliation\",\n    difficulty: \"hard\",\n    points: 30,\n    instructions: \"Think of something you wish you'd handled differently. Reach out to that person with a sincere apology. Take responsibility without excuses. Ask what you can do to make it right.\",\n  },\n];\n\n// Achievement seed data\nconst achievementSeedData: InsertAchievement[] = [\n  // Completion Achievements\n  {\n    name: \"First Steps\",\n    description: \"Complete your first challenge\",\n    icon: \"Footprints\",\n    category: \"completion\",\n    requirementType: \"challenges_completed\",\n    requirementValue: 1,\n    tier: \"bronze\",\n    sortOrder: 1,\n  },\n  {\n    name: \"Getting Started\",\n    description: \"Complete 5 challenges\",\n    icon: \"TrendingUp\",\n    category: \"completion\",\n    requirementType: \"challenges_completed\",\n    requirementValue: 5,\n    tier: \"bronze\",\n    sortOrder: 2,\n  },\n  {\n    name: \"Consistent\",\n    description: \"Complete 10 challenges\",\n    icon: \"Target\",\n    category: \"completion\",\n    requirementType: \"challenges_completed\",\n    requirementValue: 10,\n    tier: \"silver\",\n    sortOrder: 3,\n  },\n  {\n    name: \"Dedicated\",\n    description: \"Complete 50 challenges\",\n    icon: \"Award\",\n    category: \"completion\",\n    requirementType: \"challenges_completed\",\n    requirementValue: 50,\n    tier: \"gold\",\n    sortOrder: 4,\n  },\n  {\n    name: \"Champion\",\n    description: \"Complete 100 challenges\",\n    icon: \"Trophy\",\n    category: \"completion\",\n    requirementType: \"challenges_completed\",\n    requirementValue: 100,\n    tier: \"platinum\",\n    sortOrder: 5,\n  },\n\n  // Streak Achievements\n  {\n    name: \"On a Roll\",\n    description: \"Maintain a 3-day streak\",\n    icon: \"Flame\",\n    category: \"streak\",\n    requirementType: \"streak_days\",\n    requirementValue: 3,\n    tier: \"bronze\",\n    sortOrder: 6,\n  },\n  {\n    name: \"Week Warrior\",\n    description: \"Maintain a 7-day streak\",\n    icon: \"Zap\",\n    category: \"streak\",\n    requirementType: \"streak_days\",\n    requirementValue: 7,\n    tier: \"silver\",\n    sortOrder: 7,\n  },\n  {\n    name: \"Streak Master\",\n    description: \"Maintain a 30-day streak\",\n    icon: \"Crown\",\n    category: \"streak\",\n    requirementType: \"streak_days\",\n    requirementValue: 30,\n    tier: \"gold\",\n    sortOrder: 8,\n  },\n  {\n    name: \"Unstoppable\",\n    description: \"Maintain a 100-day streak\",\n    icon: \"Sparkles\",\n    category: \"streak\",\n    requirementType: \"streak_days\",\n    requirementValue: 100,\n    tier: \"platinum\",\n    sortOrder: 9,\n  },\n\n  // Points Achievements\n  {\n    name: \"Points Collector\",\n    description: \"Earn 100 total points\",\n    icon: \"Coins\",\n    category: \"points\",\n    requirementType: \"total_points\",\n    requirementValue: 100,\n    tier: \"bronze\",\n    sortOrder: 10,\n  },\n  {\n    name: \"Points Master\",\n    description: \"Earn 500 total points\",\n    icon: \"Gem\",\n    category: \"points\",\n    requirementType: \"total_points\",\n    requirementValue: 500,\n    tier: \"silver\",\n    sortOrder: 11,\n  },\n  {\n    name: \"Points Champion\",\n    description: \"Earn 1000 total points\",\n    icon: \"Star\",\n    category: \"points\",\n    requirementType: \"total_points\",\n    requirementValue: 1000,\n    tier: \"gold\",\n    sortOrder: 12,\n  },\n  {\n    name: \"Points Legend\",\n    description: \"Earn 5000 total points\",\n    icon: \"Crown\",\n    category: \"points\",\n    requirementType: \"total_points\",\n    requirementValue: 5000,\n    tier: \"platinum\",\n    sortOrder: 13,\n  },\n\n  // Category-Specific Achievements\n  {\n    name: \"Physical Enthusiast\",\n    description: \"Complete 10 physical challenges\",\n    icon: \"Activity\",\n    category: \"category_specific\",\n    requirementType: \"category_challenges\",\n    requirementValue: 10,\n    requirementMeta: { category: \"physical\" },\n    tier: \"silver\",\n    sortOrder: 14,\n  },\n  {\n    name: \"Mental Wellness\",\n    description: \"Complete 10 mental challenges\",\n    icon: \"Brain\",\n    category: \"category_specific\",\n    requirementType: \"category_challenges\",\n    requirementValue: 10,\n    requirementMeta: { category: \"mental\" },\n    tier: \"silver\",\n    sortOrder: 15,\n  },\n  {\n    name: \"Lifelong Learner\",\n    description: \"Complete 10 learning challenges\",\n    icon: \"BookOpen\",\n    category: \"category_specific\",\n    requirementType: \"category_challenges\",\n    requirementValue: 10,\n    requirementMeta: { category: \"learning\" },\n    tier: \"silver\",\n    sortOrder: 16,\n  },\n  {\n    name: \"Finance Guru\",\n    description: \"Complete 10 finance challenges\",\n    icon: \"DollarSign\",\n    category: \"category_specific\",\n    requirementType: \"category_challenges\",\n    requirementValue: 10,\n    requirementMeta: { category: \"finance\" },\n    tier: \"silver\",\n    sortOrder: 17,\n  },\n  {\n    name: \"Relationship Builder\",\n    description: \"Complete 10 relationships challenges\",\n    icon: \"Heart\",\n    category: \"category_specific\",\n    requirementType: \"category_challenges\",\n    requirementValue: 10,\n    requirementMeta: { category: \"relationships\" },\n    tier: \"silver\",\n    sortOrder: 18,\n  },\n\n  // Well-Rounded Achievement\n  {\n    name: \"Well-Rounded\",\n    description: \"Complete at least 5 challenges in each category\",\n    icon: \"CircleDot\",\n    category: \"category_master\",\n    requirementType: \"all_categories\",\n    requirementValue: 5,\n    tier: \"gold\",\n    sortOrder: 19,\n  },\n];\n\n// Initialize database with seed data (idempotent - checks before inserting)\nexport async function seedDatabase() {\n  try {\n    // Seed challenges - use count to check if data exists\n    try {\n      const challengeCount = await db.select({ count: sql<number>`count(*)` }).from(challenges);\n      const count = challengeCount[0]?.count || 0;\n      \n      if (count === 0) {\n        console.log(\"Seeding database with challenges...\");\n        await db.insert(challenges).values(challengeSeedData);\n        console.log(`Successfully seeded ${challengeSeedData.length} challenges`);\n      } else {\n        console.log(\"Database already seeded with challenges\");\n      }\n    } catch (error) {\n      console.log(\"Could not check challenges, attempting to seed anyway...\");\n      try {\n        await db.insert(challenges).values(challengeSeedData);\n        console.log(`Successfully seeded ${challengeSeedData.length} challenges`);\n      } catch (insertError) {\n        console.log(\"Challenges may already exist or insert failed\");\n      }\n    }\n\n    // Seed achievements - use count to check if data exists\n    try {\n      const achievementCount = await db.select({ count: sql<number>`count(*)` }).from(achievements);\n      const count = achievementCount[0]?.count || 0;\n      \n      if (count === 0) {\n        console.log(\"Seeding database with achievements...\");\n        await db.insert(achievements).values(achievementSeedData);\n        console.log(`Successfully seeded ${achievementSeedData.length} achievements`);\n      } else {\n        console.log(\"Database already seeded with achievements\");\n      }\n    } catch (error) {\n      console.log(\"Could not check achievements, attempting to seed anyway...\");\n      try {\n        await db.insert(achievements).values(achievementSeedData);\n        console.log(`Successfully seeded ${achievementSeedData.length} achievements`);\n      } catch (insertError) {\n        console.log(\"Achievements may already exist or insert failed\");\n      }\n    }\n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n    // Don't throw - allow app to start even if seeding fails\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":52612},"mobile/src/screens/LandingScreen.tsx":{"content":"import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { RootStackParamList } from '../navigation/RootNavigator';\nimport { colors, typography } from '../constants/colors';\nimport { Ionicons } from '@expo/vector-icons';\n\ntype NavigationProp = NativeStackNavigationProp<RootStackParamList, 'Landing'>;\n\nexport default function LandingScreen() {\n  const navigation = useNavigation<NavigationProp>();\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.content}>\n        <View style={styles.iconContainer}>\n          <Ionicons name=\"flash\" size={64} color={colors.primary} />\n        </View>\n        <Text style={styles.title}>2Mins Challenge</Text>\n        <Text style={styles.subtitle}>\n          Build better habits through quick, 2-minute challenges\n        </Text>\n        <Text style={styles.description}>\n          Complete challenges across 5 life areas: Physical, Mental, Learning, Finance, and Relationships\n        </Text>\n      </View>\n      \n      <View style={styles.buttonContainer}>\n        <TouchableOpacity\n          style={styles.primaryButton}\n          onPress={() => navigation.navigate('Login')}\n        >\n          <Text style={styles.primaryButtonText}>Get Started</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n    justifyContent: 'space-between',\n    padding: 24,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconContainer: {\n    width: 120,\n    height: 120,\n    borderRadius: 60,\n    backgroundColor: colors.card,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  title: {\n    fontSize: typography.fontSize['4xl'],\n    fontFamily: typography.fontFamily.heading,\n    color: colors.foreground,\n    marginBottom: 16,\n  },\n  subtitle: {\n    fontSize: typography.fontSize.lg,\n    fontFamily: typography.fontFamily.medium,\n    color: colors.foreground,\n    textAlign: 'center',\n    marginBottom: 12,\n  },\n  description: {\n    fontSize: typography.fontSize.base,\n    fontFamily: typography.fontFamily.regular,\n    color: colors.mutedForeground,\n    textAlign: 'center',\n    paddingHorizontal: 24,\n  },\n  buttonContainer: {\n    gap: 12,\n  },\n  primaryButton: {\n    backgroundColor: colors.primary,\n    paddingVertical: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n  },\n  primaryButtonText: {\n    color: colors.primaryForeground,\n    fontSize: typography.fontSize.base,\n    fontFamily: typography.fontFamily.semibold,\n  },\n});\n","size_bytes":2739},"client/src/components/CircularTimer.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Play, Pause, RotateCcw } from \"lucide-react\";\n\ninterface CircularTimerProps {\n  duration: number; // in seconds\n  onComplete: () => void;\n  onTimeUpdate?: (timeRemaining: number) => void;\n}\n\nexport function CircularTimer({ duration, onComplete, onTimeUpdate }: CircularTimerProps) {\n  const [timeRemaining, setTimeRemaining] = useState(duration);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isComplete, setIsComplete] = useState(false);\n\n  const progress = ((duration - timeRemaining) / duration) * 100;\n  const radius = 90;\n  const circumference = 2 * Math.PI * radius;\n  const strokeDashoffset = circumference - (progress / 100) * circumference;\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n\n    if (isRunning && timeRemaining > 0) {\n      interval = setInterval(() => {\n        setTimeRemaining((prev) => {\n          const newTime = prev - 1;\n          if (onTimeUpdate) {\n            onTimeUpdate(newTime);\n          }\n          if (newTime <= 0) {\n            setIsRunning(false);\n            setIsComplete(true);\n            onComplete();\n            return 0;\n          }\n          return newTime;\n        });\n      }, 1000);\n    }\n\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [isRunning, timeRemaining, onComplete, onTimeUpdate]);\n\n  const handleToggle = () => {\n    if (isComplete) return; // Don't allow toggling after completion\n    setIsRunning(!isRunning);\n  };\n\n  const handleReset = () => {\n    if (isComplete) return; // Don't allow reset after completion\n    setIsRunning(false);\n    setIsComplete(false);\n    setTimeRemaining(duration);\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, \"0\")}`;\n  };\n\n  return (\n    <div className=\"flex flex-col items-center gap-8\" data-testid=\"circular-timer\">\n      {/* Circular Progress */}\n      <div className=\"relative\">\n        <svg className=\"w-64 h-64 -rotate-90\" viewBox=\"0 0 200 200\">\n          {/* Background circle */}\n          <circle\n            cx=\"100\"\n            cy=\"100\"\n            r={radius}\n            fill=\"none\"\n            stroke=\"hsl(var(--border))\"\n            strokeWidth=\"8\"\n            className=\"opacity-20\"\n          />\n          {/* Progress circle */}\n          <circle\n            cx=\"100\"\n            cy=\"100\"\n            r={radius}\n            fill=\"none\"\n            stroke=\"hsl(var(--primary))\"\n            strokeWidth=\"8\"\n            strokeDasharray={circumference}\n            strokeDashoffset={strokeDashoffset}\n            strokeLinecap=\"round\"\n            className=\"transition-all duration-1000 ease-linear\"\n            style={{\n              filter: \"drop-shadow(0 0 8px hsl(var(--primary) / 0.5))\",\n            }}\n          />\n        </svg>\n\n        {/* Time display */}\n        <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n          <div className=\"text-6xl font-bold tabular-nums text-foreground\" data-testid=\"timer-display\">\n            {formatTime(timeRemaining)}\n          </div>\n          <div className=\"text-sm text-muted-foreground mt-2\">\n            {isComplete ? \"Complete!\" : \"Remaining\"}\n          </div>\n        </div>\n      </div>\n\n      {/* Controls */}\n      <div className=\"flex gap-3\">\n        {!isComplete ? (\n          <>\n            <Button\n              size=\"lg\"\n              onClick={handleToggle}\n              className=\"min-w-32\"\n              data-testid=\"button-toggle-timer\"\n            >\n              {isRunning ? (\n                <>\n                  <Pause className=\"h-5 w-5 mr-2\" />\n                  Pause\n                </>\n              ) : (\n                <>\n                  <Play className=\"h-5 w-5 mr-2\" />\n                  {timeRemaining === duration ? \"Start\" : \"Resume\"}\n                </>\n              )}\n            </Button>\n            <Button\n              size=\"lg\"\n              variant=\"outline\"\n              onClick={handleReset}\n              data-testid=\"button-reset-timer\"\n            >\n              <RotateCcw className=\"h-5 w-5 mr-2\" />\n              Reset\n            </Button>\n          </>\n        ) : (\n          <Button\n            size=\"lg\"\n            onClick={handleReset}\n            className=\"min-w-32\"\n            data-testid=\"button-restart-timer\"\n          >\n            <RotateCcw className=\"h-5 w-5 mr-2\" />\n            Try Again\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4621},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage, seedDatabase } from \"./storage\";\nimport {\n  insertChallengeHistorySchema,\n  insertChallengeSchema,\n  users,\n} from \"@shared/schema\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { setupLocalAuth, registerUser } from \"./localAuth\";\nimport passport from \"passport\";\nimport { z } from \"zod\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth & seed\n  await setupAuth(app);\n  setupLocalAuth();\n  await seedDatabase();\n\n  // -----------------------\n  // AUTH: Register & Login\n  // -----------------------\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { email, username, password, firstName, lastName } = req.body;\n      if (!email || !username || !password) {\n        return res\n          .status(400)\n          .json({ message: \"Email, username, and password are required\" });\n      }\n\n      const user = await registerUser(\n        email,\n        username,\n        password,\n        firstName,\n        lastName,\n      );\n\n      req.login(user, (err) => {\n        if (err) {\n          return res\n            .status(500)\n            .json({ message: \"Registration successful but login failed\" });\n        }\n        const { password: _pw, ...sanitizedUser } = user as any;\n        res.json(sanitizedUser);\n      });\n    } catch (error: any) {\n      console.error(\"Registration error:\", error);\n      res.status(400).json({ message: error.message || \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/local/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) return res.status(500).json({ message: \"Authentication error\" });\n      if (!user)\n        return res\n          .status(401)\n          .json({ message: info?.message || \"Invalid credentials\" });\n\n      req.login(user, (err) => {\n        if (err) return res.status(500).json({ message: \"Login failed\" });\n        const { password: _pw, ...sanitizedUser } = user as any;\n        res.json(sanitizedUser);\n      });\n    })(req, res, next);\n  });\n\n  // -----------------------\n  // AUTH: Logout (EKLENDİ)\n  // -----------------------\n  const doLogout = (req: any, res: any) => {\n    try {\n      // Passport logout (callback’li veya senkron olabilir)\n      if (typeof req.logout === \"function\") {\n        // Passport v0.6+\n        return req.logout((err: any) => {\n          if (err) {\n            console.error(\"Logout error:\", err);\n            return res.status(500).json({ message: \"Logout failed\" });\n          }\n          // Session’ı kapat\n          if (req.session) {\n            req.session.destroy(() => {\n              res.clearCookie(\"connect.sid\"); // cookie adı sizin setup’a göre değişebilir\n              return res.status(200).json({ success: true });\n            });\n          } else {\n            res.clearCookie(\"connect.sid\");\n            return res.status(200).json({ success: true });\n          }\n        });\n      }\n\n      // Fallback: session destroy\n      if (req.session) {\n        req.session.destroy(() => {\n          res.clearCookie(\"connect.sid\");\n          return res.status(200).json({ success: true });\n        });\n      } else {\n        res.clearCookie(\"connect.sid\");\n        return res.status(200).json({ success: true });\n      }\n    } catch (e) {\n      console.error(\"Logout exception:\", e);\n      return res.status(500).json({ message: \"Logout failed\" });\n    }\n  };\n\n  app.post(\"/api/logout\", doLogout);\n  app.get(\"/api/logout\", doLogout); // bazı client’lar GET çağırabilir\n\n  // -----------------------\n  // AUTH: Onboarding (FIX)\n  // -----------------------\n  app.post(\"/api/auth/onboarding\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || req.user?.id;\n      if (!userId) return res.status(401).json({ message: \"Unauthorized\" });\n\n      const {\n        preferredCategories = [],\n        hasMentalHealthConcerns = \"no\",\n        mentalHealthDetails = \"\",\n        preferredDays = [],\n      } = req.body ?? {};\n\n      const updated = await storage.updateUserPreferences(userId, {\n        preferredCategories,\n        hasMentalHealthConcerns,\n        mentalHealthDetails,\n        preferredDays,\n        onboardingCompleted: 1,\n      });\n\n      if (!updated) {\n        return res\n          .status(404)\n          .json({ message: \"User not found or update failed\" });\n      }\n\n      const { password: _pw, ...sanitizedUser } = updated as any;\n      res.json(sanitizedUser);\n    } catch (error) {\n      console.error(\"Onboarding error:\", error);\n      res.status(500).json({ message: \"Failed to update preferences\" });\n    }\n  });\n\n  // -----------------------\n  // AUTH: Current User\n  // -----------------------\n  app.get(\"/api/auth/user\", async (req: any, res) => {\n    try {\n      if (!req.isAuthenticated?.() || !req.user) return res.json(null);\n\n      const userId = req.user?.claims?.sub || req.user?.id;\n      if (!userId) return res.json(null);\n\n      const user = await storage.getUser(userId);\n      if (!user) return res.json(null);\n\n      const { password: _pw, ...sanitizedUser } = user as any;\n      res.json(sanitizedUser);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // -----------------------\n  // Public challenge routes\n  // -----------------------\n  app.get(\"/api/challenges\", async (_req, res) => {\n    try {\n      const challenges = await storage.getAllChallenges();\n      res.json(challenges);\n    } catch {\n      res.status(500).json({ error: \"Failed to fetch challenges\" });\n    }\n  });\n\n  app.get(\"/api/challenges/random\", async (_req, res) => {\n    try {\n      const challenge = await storage.getRandomChallenge();\n      if (!challenge)\n        return res.status(404).json({ error: \"No challenges available\" });\n      res.json(challenge);\n    } catch {\n      res.status(500).json({ error: \"Failed to fetch random challenge\" });\n    }\n  });\n\n  app.get(\"/api/challenges/:id\", async (req, res) => {\n    try {\n      const challenge = await storage.getChallengeById(req.params.id);\n      if (!challenge)\n        return res.status(404).json({ error: \"Challenge not found\" });\n      res.json(challenge);\n    } catch {\n      res.status(500).json({ error: \"Failed to fetch challenge\" });\n    }\n  });\n\n  app.get(\"/api/challenges/category/:category\", async (req, res) => {\n    try {\n      const challenges = await storage.getChallengesByCategory(\n        req.params.category,\n      );\n      res.json(challenges);\n    } catch {\n      res.status(500).json({ error: \"Failed to fetch challenges by category\" });\n    }\n  });\n\n  // -----------------------\n  // Personalized challenges\n  // -----------------------\n  app.get(\n    \"/api/challenges/personalized\",\n    isAuthenticated,\n    async (req: any, res) => {\n      try {\n        const userId = req.user?.claims?.sub || req.user?.id;\n        const user = await storage.getUser(userId);\n        if (!user) return res.status(404).json({ error: \"User not found\" });\n\n        let challenges = await storage.getAllChallenges();\n\n        if (\n          user.onboardingCompleted === 1 &&\n          user.preferredCategories?.length > 0\n        ) {\n          challenges = challenges.filter((c) =>\n            (user.preferredCategories as string[]).includes(c.category),\n          );\n          // Ek filtreler burada uygulanabilir\n        }\n\n        const shuffled = challenges.sort(() => Math.random() - 0.5);\n        res.json(shuffled);\n      } catch (error) {\n        console.error(\"Error fetching personalized challenges:\", error);\n        res\n          .status(500)\n          .json({ error: \"Failed to fetch personalized challenges\" });\n      }\n    },\n  );\n\n  // -----------------------\n  // Protected: CRUD\n  // -----------------------\n  app.post(\"/api/challenges\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || req.user?.id;\n      const challengeData = insertChallengeSchema.parse(req.body);\n      const challenge = await storage.createChallenge(challengeData, userId);\n      res.status(201).json(challenge);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res\n          .status(400)\n          .json({ error: \"Invalid challenge data\", details: error.errors });\n      }\n      console.error(\"Error creating challenge:\", error);\n      res.status(500).json({ error: \"Failed to create challenge\" });\n    }\n  });\n\n  app.patch(\"/api/challenges/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || req.user?.id;\n      const challengeId = req.params.id;\n      const updates = insertChallengeSchema.partial().parse(req.body);\n      const challenge = await storage.updateChallenge(\n        challengeId,\n        updates,\n        userId,\n      );\n      if (!challenge) {\n        return res\n          .status(404)\n          .json({ error: \"Challenge not found or unauthorized\" });\n      }\n      res.json(challenge);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res\n          .status(400)\n          .json({ error: \"Invalid challenge data\", details: error.errors });\n      }\n      console.error(\"Error updating challenge:\", error);\n      res.status(500).json({ error: \"Failed to update challenge\" });\n    }\n  });\n\n  app.delete(\"/api/challenges/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || req.user?.id;\n      const challengeId = req.params.id;\n      const deleted = await storage.deleteChallenge(challengeId, userId);\n      if (!deleted) {\n        return res\n          .status(404)\n          .json({ error: \"Challenge not found or unauthorized\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting challenge:\", error);\n      res.status(500).json({ error: \"Failed to delete challenge\" });\n    }\n  });\n\n  app.get(\n    \"/api/challenges/user/my-challenges\",\n    isAuthenticated,\n    async (req: any, res) => {\n      try {\n        const userId = req.user?.claims?.sub || req.user?.id;\n        const challenges = await storage.getUserChallenges(userId);\n        res.json(challenges);\n      } catch (error) {\n        console.error(\"Error fetching user challenges:\", error);\n        res.status(500).json({ error: \"Failed to fetch user challenges\" });\n      }\n    },\n  );\n\n  app.post(\n    \"/api/challenges/:id/complete\",\n    isAuthenticated,\n    async (req: any, res) => {\n      try {\n        const userId = req.user?.claims?.sub || req.user?.id;\n        const challengeId = req.params.id;\n        const challenge = await storage.getChallengeById(challengeId);\n        if (!challenge)\n          return res.status(404).json({ error: \"Challenge not found\" });\n\n        const bodySchema = z.object({\n          timeSpent: z.number().int().min(0).max(120),\n        });\n        const { timeSpent } = bodySchema.parse(req.body);\n\n        const historyEntry = await storage.addHistoryEntry(userId, {\n          challengeId,\n          completedAt: new Date().toISOString(),\n          timeSpent,\n          pointsEarned: challenge.points,\n        });\n\n        const newAchievements =\n          await storage.checkAndUnlockAchievements(userId);\n\n        res.json({\n          success: true,\n          historyEntry,\n          pointsEarned: challenge.points,\n          newAchievements,\n        });\n      } catch (error) {\n        if (error instanceof z.ZodError) {\n          return res\n            .status(400)\n            .json({ error: \"Invalid request data\", details: error.errors });\n        }\n        res.status(500).json({ error: \"Failed to complete challenge\" });\n      }\n    },\n  );\n\n  // -----------------------\n  // Progress & History\n  // -----------------------\n  app.get(\"/api/progress\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || req.user?.id;\n      const progress = await storage.getUserProgress(userId);\n      res.json(progress);\n    } catch {\n      res.status(500).json({ error: \"Failed to fetch progress\" });\n    }\n  });\n\n  app.get(\"/api/history\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || req.user?.id;\n      const history = await storage.getAllHistory(userId);\n      res.json(history);\n    } catch {\n      res.status(500).json({ error: \"Failed to fetch history\" });\n    }\n  });\n\n  // -----------------------\n  // Achievements\n  // -----------------------\n  app.get(\"/api/achievements\", async (_req, res) => {\n    try {\n      const achievements = await storage.getAllAchievements();\n      res.json(achievements);\n    } catch {\n      res.status(500).json({ error: \"Failed to fetch achievements\" });\n    }\n  });\n\n  app.get(\"/api/achievements/user\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || req.user?.id;\n      const achievements = await storage.getUserAchievements(userId);\n      res.json(achievements);\n    } catch {\n      res.status(500).json({ error: \"Failed to fetch user achievements\" });\n    }\n  });\n\n  app.post(\n    \"/api/achievements/check\",\n    isAuthenticated,\n    async (req: any, res) => {\n      try {\n        const userId = req.user?.claims?.sub || req.user?.id;\n        const newAchievements =\n          await storage.checkAndUnlockAchievements(userId);\n        res.json({ newAchievements });\n      } catch {\n        res.status(500).json({ error: \"Failed to check achievements\" });\n      }\n    },\n  );\n\n  // -----------------------\n  // Share (Public)\n  // -----------------------\n  app.get(\"/api/achievements/share/:userAchievementId\", async (req, res) => {\n    try {\n      const { userAchievementId } = req.params;\n      const share = await storage.getAchievementShare(userAchievementId);\n      if (!share)\n        return res.status(404).json({ error: \"Achievement not found\" });\n      res.json(share);\n    } catch (error) {\n      console.error(\"Error fetching shared achievement:\", error);\n      res.status(500).json({ error: \"Failed to fetch shared achievement\" });\n    }\n  });\n\n  // -----------------------\n  // Analytics\n  // -----------------------\n  app.get(\"/api/analytics/daily\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || req.user?.id;\n      const days = parseInt(req.query.days as string) || 30;\n      const stats = await storage.getDailyStats(userId, days);\n      res.json(stats);\n    } catch {\n      res.status(500).json({ error: \"Failed to fetch daily stats\" });\n    }\n  });\n\n  app.get(\"/api/analytics/category\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || req.user?.id;\n      const distribution = await storage.getCategoryDistribution(userId);\n      res.json(distribution);\n    } catch {\n      res.status(500).json({ error: \"Failed to fetch category distribution\" });\n    }\n  });\n\n  app.get(\"/api/analytics/weekly\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || req.user?.id;\n      const trend = await storage.getWeeklyTrend(userId);\n      res.json(trend);\n    } catch {\n      res.status(500).json({ error: \"Failed to fetch weekly trend\" });\n    }\n  });\n\n  app.get(\"/api/analytics/monthly\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || req.user?.id;\n      const trend = await storage.getMonthlyTrend(userId);\n      res.json(trend);\n    } catch {\n      res.status(500).json({ error: \"Failed to fetch monthly trend\" });\n    }\n  });\n\n  // -----------------------\n  // Friends\n  // -----------------------\n  app.post(\"/api/friends/request\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || req.user?.id;\n      const { email } = req.body;\n      if (!email) return res.status(400).json({ error: \"Email is required\" });\n\n      const friendship = await storage.sendFriendRequest(userId, email);\n      if (!friendship) {\n        return res.status(400).json({\n          error:\n            \"Unable to send friend request. User may not exist or friendship already exists.\",\n        });\n      }\n      res.status(201).json(friendship);\n    } catch (error) {\n      console.error(\"Error sending friend request:\", error);\n      res.status(500).json({ error: \"Failed to send friend request\" });\n    }\n  });\n\n  app.patch(\n    \"/api/friends/:id/accept\",\n    isAuthenticated,\n    async (req: any, res) => {\n      try {\n        const userId = req.user?.claims?.sub || req.user?.id;\n        const friendshipId = req.params.id;\n        const friendship = await storage.acceptFriendRequest(\n          friendshipId,\n          userId,\n        );\n        if (!friendship) {\n          return res\n            .status(404)\n            .json({\n              error: \"Friend request not found or already responded to\",\n            });\n        }\n        res.json(friendship);\n      } catch (error) {\n        console.error(\"Error accepting friend request:\", error);\n        res.status(500).json({ error: \"Failed to accept friend request\" });\n      }\n    },\n  );\n\n  app.patch(\n    \"/api/friends/:id/decline\",\n    isAuthenticated,\n    async (req: any, res) => {\n      try {\n        const userId = req.user?.claims?.sub || req.user?.id;\n        const friendshipId = req.params.id;\n        const success = await storage.declineFriendRequest(\n          friendshipId,\n          userId,\n        );\n        if (!success) {\n          return res\n            .status(404)\n            .json({\n              error: \"Friend request not found or already responded to\",\n            });\n        }\n        res.json({ success: true });\n      } catch (error) {\n        console.error(\"Error declining friend request:\", error);\n        res.status(500).json({ error: \"Failed to decline friend request\" });\n      }\n    },\n  );\n\n  app.get(\"/api/friends\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || req.user?.id;\n      const friends = await storage.getFriends(userId);\n      res.json(friends);\n    } catch (error) {\n      console.error(\"Error fetching friends:\", error);\n      res.status(500).json({ error: \"Failed to fetch friends\" });\n    }\n  });\n\n  app.get(\"/api/friends/pending\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || req.user?.id;\n      const pending = await storage.getPendingRequests(userId);\n      res.json(pending);\n    } catch (error) {\n      console.error(\"Error fetching pending requests:\", error);\n      res.status(500).json({ error: \"Failed to fetch pending requests\" });\n    }\n  });\n\n  app.delete(\"/api/friends/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || req.user?.id;\n      const friendshipId = req.params.id;\n      const success = await storage.unfriend(friendshipId, userId);\n      if (!success) {\n        return res.status(404).json({ error: \"Friendship not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error unfriending:\", error);\n      res.status(500).json({ error: \"Failed to unfriend\" });\n    }\n  });\n\n  app.get(\"/api/friends/activity\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || req.user?.id;\n      const limit = parseInt(req.query.limit as string) || 20;\n      const activity = await storage.getFriendActivity(userId, limit);\n      res.json(activity);\n    } catch (error) {\n      console.error(\"Error fetching friend activity:\", error);\n      res.status(500).json({ error: \"Failed to fetch friend activity\" });\n    }\n  });\n\n  // -----------------------\n  // Settings\n  // -----------------------\n  app.get(\"/api/settings\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || req.user?.id;\n      const user = await storage.getUser(userId);\n      if (!user) return res.status(404).json({ error: \"User not found\" });\n\n      const settings = {\n        firstName: user.firstName || \"\",\n        lastName: user.lastName || \"\",\n        username: user.username || \"\",\n        email: user.email || \"\",\n        language: \"en\",\n        theme: \"system\" as const,\n        emailNotifications: true,\n        pushNotifications: true,\n        weeklySummary: true,\n        profileVisibility: \"friends\" as const,\n        dataSharing: false,\n        profileImageUrl: user.profileImageUrl || undefined,\n      };\n\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching settings:\", error);\n      res.status(500).json({ error: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.post(\"/api/settings\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.claims?.sub || req.user?.id;\n      const { firstName, lastName, username, email, profileImageUrl } =\n        req.body;\n\n      const user = await storage.getUser(userId);\n      if (!user) return res.status(404).json({ error: \"User not found\" });\n\n      const updateData: any = {};\n      if (firstName !== undefined) updateData.firstName = firstName;\n      if (lastName !== undefined) updateData.lastName = lastName;\n      if (username !== undefined) updateData.username = username;\n      if (email !== undefined) updateData.email = email;\n      if (profileImageUrl !== undefined)\n        updateData.profileImageUrl = profileImageUrl;\n\n      if (Object.keys(updateData).length > 0) {\n        updateData.updatedAt = new Date();\n        await db.update(users).set(updateData).where(eq(users.id, userId));\n      }\n\n      const updatedUser = await storage.getUser(userId);\n      const settings = {\n        firstName: updatedUser?.firstName || \"\",\n        lastName: updatedUser?.lastName || \"\",\n        username: updatedUser?.username || \"\",\n        email: updatedUser?.email || \"\",\n        language: \"en\",\n        theme: \"system\" as const,\n        emailNotifications: true,\n        pushNotifications: true,\n        weeklySummary: true,\n        profileVisibility: \"friends\" as const,\n        dataSharing: false,\n        profileImageUrl: updatedUser?.profileImageUrl || undefined,\n      };\n\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error saving settings:\", error);\n      res.status(500).json({ error: \"Failed to save settings\" });\n    }\n  });\n\n  // -----------------------\n  // HTTP server\n  // -----------------------\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":22684},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"mobile/src/screens/ProgressScreen.tsx":{"content":"import { View, Text, StyleSheet } from 'react-native';\nimport { colors, typography } from '../constants/colors';\n\nexport default function ProgressScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Progress</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: colors.background, padding: 20, justifyContent: 'center', alignItems: 'center' },\n  title: { fontSize: typography.fontSize['3xl'], fontFamily: typography.fontFamily.heading, color: colors.foreground },\n});\n","size_bytes":555},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/CategoryCard.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { categoryConfig } from \"@/lib/categories\";\nimport type { ChallengeCategory } from \"@shared/schema\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface CategoryCardProps {\n  category: ChallengeCategory;\n  onClick: () => void;\n  challengeCount?: number;\n}\n\nexport function CategoryCard({ category, onClick, challengeCount }: CategoryCardProps) {\n  const config = categoryConfig[category];\n  const Icon: LucideIcon = config.icon;\n\n  return (\n    <Card\n      className={`relative overflow-hidden cursor-pointer hover-elevate active-elevate-2 transition-all border-card-border bg-gradient-to-br ${config.gradient}`}\n      onClick={onClick}\n      data-testid={`card-category-${category}`}\n    >\n      <div className=\"p-6 flex flex-col items-center text-center gap-3\">\n        <div className=\"w-16 h-16 rounded-full bg-card/50 flex items-center justify-center\">\n          <Icon className=\"h-8 w-8 text-foreground\" />\n        </div>\n        <div>\n          <h3 className=\"font-semibold text-lg text-foreground\">{config.label}</h3>\n          <p className=\"text-sm text-muted-foreground mt-1\">{config.description}</p>\n        </div>\n        {challengeCount !== undefined && (\n          <div className=\"text-xs text-muted-foreground\">\n            {challengeCount} {challengeCount === 1 ? \"challenge\" : \"challenges\"}\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":1421},"client/src/pages/Onboarding.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Activity, Brain, BookOpen, DollarSign, Heart, Zap } from \"lucide-react\";\n\ntype ChallengeCategory = \"physical\" | \"mental\" | \"learning\" | \"finance\" | \"relationships\";\n\nconst categories: { value: ChallengeCategory; label: string; icon: typeof Activity }[] = [\n  { value: \"physical\", label: \"Physical\", icon: Activity },\n  { value: \"mental\", label: \"Mental\", icon: Brain },\n  { value: \"learning\", label: \"Learning\", icon: BookOpen },\n  { value: \"finance\", label: \"Finance\", icon: DollarSign },\n  { value: \"relationships\", label: \"Relationships\", icon: Heart },\n];\n\nconst daysOfWeek = [\n  { value: 0, label: \"Sunday\" },\n  { value: 1, label: \"Monday\" },\n  { value: 2, label: \"Tuesday\" },\n  { value: 3, label: \"Wednesday\" },\n  { value: 4, label: \"Thursday\" },\n  { value: 5, label: \"Friday\" },\n  { value: 6, label: \"Saturday\" },\n];\n\nexport default function Onboarding() {\n  const [step, setStep] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  const [preferences, setPreferences] = useState<{\n    preferredCategories: ChallengeCategory[];\n    hasMentalHealthConcerns: string;\n    mentalHealthDetails: string;\n    preferredDays: number[];\n  }>({\n    preferredCategories: [],\n    hasMentalHealthConcerns: \"no\",\n    mentalHealthDetails: \"\",\n    preferredDays: [],\n  });\n\n  const toggleCategory = (category: ChallengeCategory) => {\n    setPreferences((prev) => ({\n      ...prev,\n      preferredCategories: prev.preferredCategories.includes(category)\n        ? prev.preferredCategories.filter((c) => c !== category)\n        : [...prev.preferredCategories, category],\n    }));\n  };\n\n  const toggleDay = (day: number) => {\n    setPreferences((prev) => ({\n      ...prev,\n      preferredDays: prev.preferredDays.includes(day)\n        ? prev.preferredDays.filter((d) => d !== day)\n        : [...prev.preferredDays, day],\n    }));\n  };\n\n  const handleNext = () => {\n    if (step === 1 && preferences.preferredCategories.length === 0) {\n      toast({\n        title: \"Please select at least one category\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Skip mental health questions if mental category is not selected\n    if (step === 1 && !preferences.preferredCategories.includes(\"mental\")) {\n      setStep(3);\n    } else {\n      setStep(step + 1);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (preferences.preferredDays.length === 0) {\n      toast({\n        title: \"Please select at least one day\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/onboarding\", preferences);\n\n      if (response.ok) {\n        // Invalidate user query to refresh user data\n        await queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n        window.location.href = \"/\";\n      } else {\n        toast({\n          title: \"Failed to save preferences\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-background via-background to-primary/5\">\n      <div className=\"w-full max-w-2xl\">\n        <div className=\"text-center mb-6\">\n          <div className=\"flex items-center justify-center gap-2 mb-4\">\n            <div className=\"h-12 w-12 rounded-full bg-primary flex items-center justify-center\">\n              <Zap className=\"h-6 w-6 text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-3xl font-bold\">Welcome to 2Mins Challenge</h1>\n          </div>\n          <p className=\"text-muted-foreground\">\n            Let's personalize your experience in just a few steps\n          </p>\n        </div>\n\n        <Card data-testid=\"card-onboarding\">\n          <CardHeader>\n            <CardTitle data-testid=\"text-onboarding-title\">\n              {step === 1 && \"Select Your Challenge Categories\"}\n              {step === 2 && \"Mental Health Assessment\"}\n              {step === 3 && \"Choose Your Challenge Days\"}\n            </CardTitle>\n            <CardDescription>\n              {step === 1 && \"Pick the areas you want to focus on\"}\n              {step === 2 && \"Help us provide better mental wellness challenges\"}\n              {step === 3 && \"When do you prefer to do challenges?\"}\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {step === 1 && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {categories.map(({ value, label, icon: Icon }) => (\n                  <button\n                    key={value}\n                    type=\"button\"\n                    onClick={() => toggleCategory(value)}\n                    className={`p-4 rounded-md border-2 transition-all hover-elevate ${\n                      preferences.preferredCategories.includes(value)\n                        ? \"border-primary bg-primary/5\"\n                        : \"border-border\"\n                    }`}\n                    data-testid={`button-category-${value}`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <Icon className=\"h-6 w-6 text-primary\" />\n                      <span className=\"font-medium\">{label}</span>\n                    </div>\n                  </button>\n                ))}\n              </div>\n            )}\n\n            {step === 2 && (\n              <div className=\"space-y-4\">\n                <Label>Do you have any mental health concerns we should know about?</Label>\n                <RadioGroup\n                  value={preferences.hasMentalHealthConcerns}\n                  onValueChange={(value) =>\n                    setPreferences({ ...preferences, hasMentalHealthConcerns: value })\n                  }\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"no\" id=\"no\" data-testid=\"radio-no-concerns\" />\n                    <Label htmlFor=\"no\">No</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"yes\" id=\"yes\" data-testid=\"radio-yes-concerns\" />\n                    <Label htmlFor=\"yes\">Yes</Label>\n                  </div>\n                </RadioGroup>\n\n                {preferences.hasMentalHealthConcerns === \"yes\" && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"details\">\n                      Please share any details that would help us provide better challenges\n                      (optional)\n                    </Label>\n                    <Textarea\n                      id=\"details\"\n                      data-testid=\"textarea-mental-health-details\"\n                      placeholder=\"E.g., anxiety, depression, stress management needs...\"\n                      value={preferences.mentalHealthDetails}\n                      onChange={(e) =>\n                        setPreferences({ ...preferences, mentalHealthDetails: e.target.value })\n                      }\n                      rows={4}\n                    />\n                    <p className=\"text-xs text-muted-foreground\">\n                      This information is private and will only be used to personalize your\n                      challenges\n                    </p>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {step === 3 && (\n              <div className=\"space-y-4\">\n                <Label>Select the days you'd like to receive challenges</Label>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                  {daysOfWeek.map(({ value, label }) => (\n                    <button\n                      key={value}\n                      type=\"button\"\n                      onClick={() => toggleDay(value)}\n                      className={`p-3 rounded-md border-2 transition-all hover-elevate ${\n                        preferences.preferredDays.includes(value)\n                          ? \"border-primary bg-primary/5\"\n                          : \"border-border\"\n                      }`}\n                      data-testid={`button-day-${value}`}\n                    >\n                      <span className=\"font-medium\">{label}</span>\n                    </button>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex justify-between pt-4\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  if (step === 3 && !preferences.preferredCategories.includes(\"mental\")) {\n                    setStep(1);\n                  } else {\n                    setStep(step - 1);\n                  }\n                }}\n                disabled={step === 1 || loading}\n                data-testid=\"button-back\"\n              >\n                Back\n              </Button>\n              {step < 3 ? (\n                <Button onClick={handleNext} data-testid=\"button-next\">\n                  Next\n                </Button>\n              ) : (\n                <Button onClick={handleSubmit} disabled={loading} data-testid=\"button-finish\">\n                  {loading ? \"Saving...\" : \"Finish Setup\"}\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10092},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"mobile/tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./App.{js,jsx,ts,tsx}\",\n    \"./src/**/*.{js,jsx,ts,tsx}\"\n  ],\n  theme: {\n    extend: {\n      colors: {\n        // Dark-first color scheme matching web app\n        background: \"#0a0a0a\",\n        foreground: \"#fafafa\",\n        card: \"#1a1a1a\",\n        \"card-foreground\": \"#fafafa\",\n        primary: \"#3b82f6\",\n        \"primary-foreground\": \"#fafafa\",\n        secondary: \"#27272a\",\n        \"secondary-foreground\": \"#fafafa\",\n        muted: \"#27272a\",\n        \"muted-foreground\": \"#a1a1aa\",\n        accent: \"#27272a\",\n        \"accent-foreground\": \"#fafafa\",\n        destructive: \"#ef4444\",\n        \"destructive-foreground\": \"#fafafa\",\n        border: \"#27272a\",\n        input: \"#27272a\",\n        ring: \"#3b82f6\",\n      },\n      fontFamily: {\n        inter: [\"Inter_400Regular\", \"Inter_500Medium\", \"Inter_600SemiBold\", \"Inter_700Bold\"],\n        dmSans: [\"DMSans_400Regular\", \"DMSans_500Medium\", \"DMSans_700Bold\"],\n      },\n    },\n  },\n  plugins: [],\n}\n","size_bytes":1028},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/pages/Progress.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { StatCard } from \"@/components/StatCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, Flame, Trophy, Target, Award, TrendingUp } from \"lucide-react\";\nimport type { UserProgress, ChallengeHistory } from \"@shared/schema\";\n\nexport default function Progress() {\n  // Fetch user progress\n  const { data: progress, isLoading: progressLoading } = useQuery<UserProgress>({\n    queryKey: [\"/api/progress\"],\n  });\n\n  // Fetch challenge history for stats\n  const { data: history } = useQuery<ChallengeHistory[]>({\n    queryKey: [\"/api/history\"],\n  });\n\n  const longestStreak = progress?.longestStreak || 0;\n  const totalChallenges = progress?.totalChallengesCompleted || 0;\n  const avgPointsPerChallenge = totalChallenges > 0 \n    ? Math.round((progress?.totalPoints || 0) / totalChallenges)\n    : 0;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border bg-card/30 backdrop-blur-sm sticky top-0 z-10\">\n        <div className=\"container max-w-6xl mx-auto px-4 py-4\">\n          <Button variant=\"ghost\" asChild data-testid=\"button-back\">\n            <Link href=\"/\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back\n            </Link>\n          </Button>\n        </div>\n      </header>\n\n      <main className=\"container max-w-6xl mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-3\" data-testid=\"heading-page\">Your Progress</h1>\n          <p className=\"text-muted-foreground text-lg\" data-testid=\"text-page-description\">\n            Track your journey and celebrate your achievements\n          </p>\n        </div>\n\n        {/* Main Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <StatCard\n            title=\"Current Streak\"\n            value={progressLoading ? \"...\" : `${progress?.currentStreak || 0} days`}\n            icon={Flame}\n            description=\"Consecutive days with challenges\"\n          />\n          <StatCard\n            title=\"Total Points\"\n            value={progressLoading ? \"...\" : progress?.totalPoints || 0}\n            icon={Trophy}\n            description=\"All-time points earned\"\n          />\n          <StatCard\n            title=\"Challenges Completed\"\n            value={progressLoading ? \"...\" : totalChallenges}\n            icon={Target}\n            description=\"Total challenges finished\"\n          />\n        </div>\n\n        {/* Additional Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <Card className=\"border-card-border\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <Award className=\"h-5 w-5 text-primary\" />\n                Personal Best\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <div className=\"text-sm text-muted-foreground mb-1\">Longest Streak</div>\n                  <div className=\"text-2xl font-bold text-foreground\" data-testid=\"text-longest-streak\">\n                    {longestStreak} days\n                  </div>\n                </div>\n                <div>\n                  <div className=\"text-sm text-muted-foreground mb-1\">Avg. Points Per Challenge</div>\n                  <div className=\"text-2xl font-bold text-foreground\" data-testid=\"text-avg-points\">\n                    {avgPointsPerChallenge}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-card-border\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <TrendingUp className=\"h-5 w-5 text-primary\" />\n                Activity Summary\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <div className=\"text-sm text-muted-foreground mb-1\">Total Challenges</div>\n                  <div className=\"text-2xl font-bold text-foreground\">\n                    {totalChallenges}\n                  </div>\n                </div>\n                <div>\n                  <div className=\"text-sm text-muted-foreground mb-1\">Last Completed</div>\n                  <div className=\"text-sm font-medium text-foreground\">\n                    {progress?.lastCompletedDate \n                      ? new Date(progress.lastCompletedDate).toLocaleDateString()\n                      : \"No challenges yet\"}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Motivation Message */}\n        {totalChallenges === 0 && (\n          <div className=\"mt-12 text-center py-12\" data-testid=\"empty-state\">\n            <div className=\"w-20 h-20 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-4\">\n              <Target className=\"h-10 w-10 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-foreground mb-2\" data-testid=\"text-empty-title\">\n              Start Your Journey\n            </h3>\n            <p className=\"text-muted-foreground max-w-md mx-auto mb-6\" data-testid=\"text-empty-description\">\n              Complete your first challenge to start tracking your progress and building streaks!\n            </p>\n            <Button asChild data-testid=\"button-start-first\">\n              <Link href=\"/\">Browse Challenges</Link>\n            </Button>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":5820},"mobile/src/screens/MyChallengesScreen.tsx":{"content":"import { View, Text, StyleSheet } from 'react-native';\nimport { colors, typography } from '../constants/colors';\n\nexport default function MyChallengesScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>MyChallenges</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: colors.background, padding: 20, justifyContent: 'center', alignItems: 'center' },\n  title: { fontSize: typography.fontSize['3xl'], fontFamily: typography.fontFamily.heading, color: colors.foreground },\n});\n","size_bytes":563},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/MyChallenges.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { categoryConfig } from \"@/lib/categories\";\nimport { Plus, Edit, Trash2, ArrowLeft, Sparkles } from \"lucide-react\";\nimport type { Challenge } from \"@shared/schema\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { useState } from \"react\";\n\nexport default function MyChallenges() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [challengeToDelete, setChallengeToDelete] = useState<Challenge | null>(null);\n\n  const { data: userChallenges, isLoading } = useQuery<Challenge[]>({\n    queryKey: [\"/api/challenges/user/my-challenges\"],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/challenges/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Challenge Deleted\",\n        description: \"Your challenge has been removed.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/challenges/user/my-challenges\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/challenges\"] });\n      setDeleteDialogOpen(false);\n      setChallengeToDelete(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete challenge. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteClick = (challenge: Challenge) => {\n    setChallengeToDelete(challenge);\n    setDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (challengeToDelete) {\n      deleteMutation.mutate(challengeToDelete.id);\n    }\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"easy\": return \"bg-green-500/20 text-green-400 border-green-500/30\";\n      case \"medium\": return \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\";\n      case \"hard\": return \"bg-red-500/20 text-red-400 border-red-500/30\";\n      default: return \"bg-gray-500/20 text-gray-400 border-gray-500/30\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-4 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto\" />\n          <p className=\"text-muted-foreground mt-4\">Loading your challenges...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-4xl mx-auto p-4 md:p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <Button variant=\"ghost\" size=\"icon\" onClick={() => navigate(\"/\")} data-testid=\"button-back-home\">\n              <ArrowLeft className=\"h-5 w-5\" />\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">\n                My Custom Challenges\n              </h1>\n              <p className=\"text-muted-foreground\">\n                Manage your personalized 2-minute challenges\n              </p>\n            </div>\n          </div>\n          <Button onClick={() => navigate(\"/create-challenge\")} data-testid=\"button-create-challenge\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Create Challenge\n          </Button>\n        </div>\n\n        {/* Challenges List */}\n        {!userChallenges || userChallenges.length === 0 ? (\n          <Card className=\"border-dashed\">\n            <CardContent className=\"flex flex-col items-center justify-center py-12 text-center\">\n              <div className=\"w-16 h-16 rounded-full bg-primary/10 flex items-center justify-center mb-4\">\n                <Sparkles className=\"h-8 w-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">No Custom Challenges Yet</h3>\n              <p className=\"text-muted-foreground mb-6 max-w-md\">\n                Create your first custom challenge to personalize your 2Mins experience. Design challenges that fit your unique goals and interests!\n              </p>\n              <Button onClick={() => navigate(\"/create-challenge\")} data-testid=\"button-create-first\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Your First Challenge\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 gap-4\" data-testid=\"challenges-list\">\n            {userChallenges.map((challenge) => (\n              <Card key={challenge.id} className=\"hover-elevate\" data-testid={`challenge-card-${challenge.id}`}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between gap-4\">\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"flex items-center gap-2 flex-wrap\">\n                        <CardTitle className=\"text-xl\" data-testid={`challenge-title-${challenge.id}`}>\n                          {challenge.title}\n                        </CardTitle>\n                        <Badge variant=\"outline\" className={getDifficultyColor(challenge.difficulty)}>\n                          {challenge.difficulty}\n                        </Badge>\n                        <Badge variant=\"outline\">\n                          {categoryConfig[challenge.category as keyof typeof categoryConfig]?.label}\n                        </Badge>\n                        <Badge variant=\"secondary\">\n                          {challenge.points} points\n                        </Badge>\n                      </div>\n                      <CardDescription>{challenge.description}</CardDescription>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => navigate(`/edit-challenge/${challenge.id}`)}\n                        data-testid={`button-edit-${challenge.id}`}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => handleDeleteClick(challenge)}\n                        data-testid={`button-delete-${challenge.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm font-medium\">Instructions:</p>\n                    <p className=\"text-sm text-muted-foreground\">{challenge.instructions}</p>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Challenge?</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete \"{challengeToDelete?.title}\"? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmDelete}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":8521},"mobile/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { apiRequest } from '../utils/queryClient';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string | null;\n  lastName: string | null;\n  profileImageUrl: string | null;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  checkAuth: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const checkAuth = async () => {\n    try {\n      const data = await apiRequest('/api/auth/me');\n      setUser(data.user);\n    } catch (error) {\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (email: string, password: string) => {\n    const data = await apiRequest('/api/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({ email, password }),\n    });\n    setUser(data.user);\n    await AsyncStorage.setItem('isAuthenticated', 'true');\n  };\n\n  const logout = async () => {\n    await apiRequest('/api/auth/logout', { method: 'POST' });\n    setUser(null);\n    await AsyncStorage.removeItem('isAuthenticated');\n  };\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isAuthenticated: !!user,\n        isLoading,\n        login,\n        logout,\n        checkAuth,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":1982},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ChallengeCard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { categoryConfig, difficultyConfig } from \"@/lib/categories\";\nimport type { Challenge } from \"@shared/schema\";\nimport { ArrowRight } from \"lucide-react\";\n\ninterface ChallengeCardProps {\n  challenge: Challenge;\n  onStart: () => void;\n  featured?: boolean;\n}\n\nexport function ChallengeCard({ challenge, onStart, featured = false }: ChallengeCardProps) {\n  const category = categoryConfig[challenge.category as keyof typeof categoryConfig];\n  const difficulty = difficultyConfig[challenge.difficulty as keyof typeof difficultyConfig];\n  const Icon = category?.icon;\n\n  return (\n    <Card\n      className={`border-card-border hover-elevate transition-all ${featured ? 'ring-2 ring-primary/20' : ''}`}\n      data-testid={`card-challenge-${challenge.id}`}\n    >\n      <CardHeader className=\"gap-3\">\n        <div className=\"flex items-start justify-between gap-4\">\n          <div className=\"flex items-center gap-3\">\n            {Icon && (\n              <div className=\"w-12 h-12 rounded-full bg-card flex items-center justify-center shrink-0\">\n                <Icon className=\"h-6 w-6 text-foreground\" />\n              </div>\n            )}\n            <div className=\"flex-1 min-w-0\">\n              <CardTitle className=\"text-xl leading-tight\" data-testid={`text-challenge-title-${challenge.id}`}>\n                {challenge.title}\n              </CardTitle>\n              <CardDescription className=\"mt-1\">{category?.label}</CardDescription>\n            </div>\n          </div>\n          <Badge variant=\"secondary\" className=\"shrink-0\">\n            <span className={difficulty.color}>{difficulty.label}</span>\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <p className=\"text-sm text-muted-foreground leading-relaxed\">\n          {challenge.description}\n        </p>\n        <div className=\"flex items-center justify-between gap-4 pt-2\">\n          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n            <div className=\"flex items-center gap-1\">\n              <span className=\"font-medium text-foreground\" data-testid={`text-points-${challenge.id}`}>{challenge.points}</span>\n              <span>points</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <span className=\"font-medium text-foreground\" data-testid={`text-duration-${challenge.id}`}>2</span>\n              <span>minutes</span>\n            </div>\n          </div>\n          <Button onClick={onStart} data-testid={`button-start-challenge-${challenge.id}`}>\n            Start Challenge\n            <ArrowRight className=\"h-4 w-4 ml-2\" />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2897},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Activity, Brain, BookOpen, DollarSign, Heart, Clock, Trophy, Flame } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <div className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/20 via-background to-background\" />\n        <div className=\"relative max-w-6xl mx-auto px-4 py-16 md:py-24\">\n          <div className=\"text-center space-y-6\">\n            <h1 className=\"text-5xl md:text-7xl font-bold bg-gradient-to-r from-primary via-blue-400 to-primary bg-clip-text text-transparent\">\n              2Mins\n            </h1>\n            <p className=\"text-xl md:text-2xl text-muted-foreground max-w-2xl mx-auto\">\n              Transform your life, two minutes at a time\n            </p>\n            <p className=\"text-base md:text-lg text-muted-foreground/80 max-w-xl mx-auto\">\n              Build better habits through quick daily challenges. Complete 2-minute activities across physical health, mental wellness, learning, finance, and relationships.\n            </p>\n            <div className=\"pt-4\">\n              <Button\n                size=\"lg\"\n                onClick={() => window.location.href = \"/api/login\"}\n                className=\"text-lg px-8 py-6\"\n                data-testid=\"button-login\"\n              >\n                Get Started\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Features Grid */}\n      <div className=\"max-w-6xl mx-auto px-4 py-16\">\n        <h2 className=\"text-3xl font-bold text-center mb-12\">\n          Five Areas of Growth\n        </h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          <Card className=\"hover-elevate\">\n            <CardContent className=\"p-6 space-y-3\">\n              <div className=\"h-12 w-12 rounded-lg bg-primary/10 flex items-center justify-center\">\n                <Activity className=\"h-6 w-6 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold\">Physical Health</h3>\n              <p className=\"text-muted-foreground\">\n                Quick workouts, stretches, and cardio bursts to keep you active\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover-elevate\">\n            <CardContent className=\"p-6 space-y-3\">\n              <div className=\"h-12 w-12 rounded-lg bg-primary/10 flex items-center justify-center\">\n                <Brain className=\"h-6 w-6 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold\">Mental Wellness</h3>\n              <p className=\"text-muted-foreground\">\n                Meditation, mindfulness, and cognitive exercises for mental clarity\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover-elevate\">\n            <CardContent className=\"p-6 space-y-3\">\n              <div className=\"h-12 w-12 rounded-lg bg-primary/10 flex items-center justify-center\">\n                <BookOpen className=\"h-6 w-6 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold\">Learning & Discovery</h3>\n              <p className=\"text-muted-foreground\">\n                Expand your knowledge with facts, skills, and new concepts\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover-elevate\">\n            <CardContent className=\"p-6 space-y-3\">\n              <div className=\"h-12 w-12 rounded-lg bg-primary/10 flex items-center justify-center\">\n                <DollarSign className=\"h-6 w-6 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold\">Personal Finance</h3>\n              <p className=\"text-muted-foreground\">\n                Track spending, set goals, and make smarter money decisions\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover-elevate\">\n            <CardContent className=\"p-6 space-y-3\">\n              <div className=\"h-12 w-12 rounded-lg bg-primary/10 flex items-center justify-center\">\n                <Heart className=\"h-6 w-6 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold\">Relationships</h3>\n              <p className=\"text-muted-foreground\">\n                Strengthen connections through meaningful communication\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover-elevate\">\n            <CardContent className=\"p-6 space-y-3\">\n              <div className=\"h-12 w-12 rounded-lg bg-primary/10 flex items-center justify-center\">\n                <Clock className=\"h-6 w-6 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold\">Just 2 Minutes</h3>\n              <p className=\"text-muted-foreground\">\n                Every challenge takes exactly 2 minutes - perfect for any schedule\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Benefits Section */}\n      <div className=\"max-w-4xl mx-auto px-4 py-16\">\n        <h2 className=\"text-3xl font-bold text-center mb-12\">\n          Why 2Mins Works\n        </h2>\n        <div className=\"grid gap-8\">\n          <div className=\"flex gap-4\">\n            <div className=\"flex-shrink-0\">\n              <div className=\"h-10 w-10 rounded-lg bg-primary/10 flex items-center justify-center\">\n                <Flame className=\"h-5 w-5 text-primary\" />\n              </div>\n            </div>\n            <div>\n              <h3 className=\"text-xl font-semibold mb-2\">Build Streaks</h3>\n              <p className=\"text-muted-foreground\">\n                Complete challenges daily to build momentum. Track your streaks and watch your consistency grow.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex gap-4\">\n            <div className=\"flex-shrink-0\">\n              <div className=\"h-10 w-10 rounded-lg bg-primary/10 flex items-center justify-center\">\n                <Trophy className=\"h-5 w-5 text-primary\" />\n              </div>\n            </div>\n            <div>\n              <h3 className=\"text-xl font-semibold mb-2\">Earn Points</h3>\n              <p className=\"text-muted-foreground\">\n                Easy challenges earn 10 points, medium 20, and hard 30. Level up your life systematically.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex gap-4\">\n            <div className=\"flex-shrink-0\">\n              <div className=\"h-10 w-10 rounded-lg bg-primary/10 flex items-center justify-center\">\n                <Activity className=\"h-5 w-5 text-primary\" />\n              </div>\n            </div>\n            <div>\n              <h3 className=\"text-xl font-semibold mb-2\">Micro Habits</h3>\n              <p className=\"text-muted-foreground\">\n                Small, consistent actions create lasting change. 2 minutes is easy to start, impossible to skip.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* CTA Section */}\n      <div className=\"max-w-4xl mx-auto px-4 py-16 text-center\">\n        <Card className=\"bg-gradient-to-br from-primary/10 to-background\">\n          <CardContent className=\"p-12 space-y-6\">\n            <h2 className=\"text-3xl md:text-4xl font-bold\">\n              Ready to get started?\n            </h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Join thousands building better habits. Your first 2-minute challenge awaits.\n            </p>\n            <Button\n              size=\"lg\"\n              onClick={() => window.location.href = \"/api/login\"}\n              className=\"text-lg px-8 py-6\"\n              data-testid=\"button-login-cta\"\n            >\n              Start Your Journey\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8070},"mobile/README.md":{"content":"# 2Mins Challenge - Mobile App (React Native / Expo)\n\n## 📱 Genel Bakış / Overview\n\nBu, mevcut 2Mins Challenge web uygulamasının **Expo React Native** tabanlı çapraz-platform (iOS + Android) mobil uygulamasıdır.\n\nThis is the **Expo React Native** cross-platform (iOS + Android) mobile application conversion of the existing 2Mins Challenge web app.\n\n## 🏗️ Proje Yapısı / Project Structure\n\n```\nmobile/\n├── App.tsx                 # Ana uygulama giriş noktası / Main app entry point\n├── app.json               # Expo yapılandırması / Expo configuration\n├── babel.config.js        # Babel yapılandırması / Babel config\n├── metro.config.js        # Metro bundler yapılandırması / Metro config\n├── tailwind.config.js     # Tailwind CSS yapılandırması / Tailwind config\n├── tsconfig.json          # TypeScript yapılandırması / TypeScript config\n├── package.json           # Bağımlılıklar / Dependencies\n├── assets/                # App simgesi, splash screen vb. / Icons, splash, etc.\n└── src/\n    ├── navigation/        # React Navigation yapısı / Navigation structure\n    │   ├── RootNavigator.tsx      # Ana navigasyon / Root navigation\n    │   └── MainNavigator.tsx      # Tab ve stack navigasyon / Tab & stack nav\n    ├── screens/           # Uygulama ekranları / App screens\n    │   ├── LandingScreen.tsx      # Giriş ekranı / Landing screen\n    │   ├── LoginScreen.tsx        # Giriş yapma / Login screen\n    │   ├── HomeScreen.tsx         # Ana sayfa / Home screen\n    │   ├── ChallengesScreen.tsx   # Görev listesi / Challenges list\n    │   ├── ChallengeDetailScreen.tsx  # Görev detayı / Challenge detail\n    │   ├── ProgressScreen.tsx     # İlerleme / Progress\n    │   ├── HistoryScreen.tsx      # Geçmiş / History\n    │   ├── AchievementsScreen.tsx # Başarımlar / Achievements\n    │   ├── AnalyticsScreen.tsx    # Analitik / Analytics\n    │   ├── FriendsScreen.tsx      # Arkadaşlar / Friends\n    │   ├── MyChallengesScreen.tsx # Özel görevler / Custom challenges\n    │   ├── CreateChallengeScreen.tsx  # Görev oluştur / Create challenge\n    │   ├── ShareAchievementScreen.tsx # Başarım paylaş / Share achievement\n    │   └── MoreScreen.tsx         # Daha fazla / More options\n    ├── components/        # Yeniden kullanılabilir bileşenler / Reusable components\n    ├── contexts/          # React Context (Auth vb.) / React contexts\n    │   └── AuthContext.tsx        # Kimlik doğrulama / Authentication\n    ├── hooks/             # Özel React hooks / Custom hooks\n    ├── utils/             # Yardımcı fonksiyonlar / Utility functions\n    │   └── queryClient.ts         # TanStack Query istemcisi / Query client\n    └── constants/         # Sabitler (renkler, tipografi) / Constants\n        └── colors.ts              # Renk paleti / Color palette\n```\n\n## 🎨 Tasarım Sistemi / Design System\n\nMobil uygulama, web uygulamasının dark-first Material Design estetiğini korumaktadır:\n\nThe mobile app preserves the web app's dark-first Material Design aesthetic:\n\n### Renkler / Colors\n- **Background:** #0a0a0a (koyu siyah / dark black)\n- **Foreground:** #fafafa (açık beyaz / light white)\n- **Primary:** #3b82f6 (mavi / blue)\n- **Card:** #1a1a1a (koyu gri / dark gray)\n\n### Kategori Renkleri / Category Colors\n- **Physical:** #3b82f6 (mavi / blue)\n- **Mental:** #8b5cf6 (mor / purple)\n- **Learning:** #eab308 (sarı / yellow)\n- **Finance:** #10b981 (yeşil / green)\n- **Relationships:** #ec4899 (pembe / pink)\n\n### Tipografi / Typography\n- **Heading Font:** DM Sans (700 Bold)\n- **Body Font:** Inter (400 Regular, 500 Medium, 600 Semibold, 700 Bold)\n\n## 📦 Kurulum / Installation\n\n### Ön Gereksinimler / Prerequisites\n\n1. **Node.js** (v18 veya üzeri / v18 or higher)\n2. **npm** veya **yarn**\n3. **Expo CLI** (global olarak yüklenmiş / globally installed):\n   ```bash\n   npm install -g expo-cli\n   ```\n4. **Expo Go** uygulaması (iOS/Android cihazınızda / on your iOS/Android device)\n   - [iOS App Store](https://apps.apple.com/app/expo-go/id982107779)\n   - [Google Play Store](https://play.google.com/store/apps/details?id=host.exp.exponent)\n\n### Adımlar / Steps\n\n1. **Projeyi klonlayın / Clone the project:**\n   ```bash\n   cd mobile\n   ```\n\n2. **Bağımlılıkları yükleyin / Install dependencies:**\n   ```bash\n   npm install\n   ```\n\n3. **API URL'sini yapılandırın / Configure API URL:**\n   \n   `app.json` dosyasında `extra.apiUrl` değerini backend sunucu adresinize güncelleyin:\n   \n   Update `extra.apiUrl` in `app.json` to your backend server address:\n   ```json\n   {\n     \"expo\": {\n       \"extra\": {\n         \"apiUrl\": \"http://YOUR_SERVER_IP:5000\"\n       }\n     }\n   }\n   ```\n   \n   **Not:** Localhost için `127.0.0.1` kullanmayın, yerel ağ IP adresinizi kullanın.\n   \n   **Note:** Don't use `127.0.0.1` for localhost, use your local network IP address.\n\n## 🚀 Çalıştırma / Running\n\n### Development Mode\n\n```bash\nnpm start\n```\n\nBu komut Expo development server'ı başlatır. QR kodu Expo Go uygulaması ile tarayarak uygulamayı cihazınızda açabilirsiniz.\n\nThis starts the Expo development server. Scan the QR code with Expo Go to open the app on your device.\n\n### Platform-Specific Development\n\n```bash\n# iOS (Mac gerekli / requires Mac)\nnpm run ios\n\n# Android\nnpm run android\n\n# Web (tarayıcıda test için / for browser testing)\nnpm run web\n```\n\n## 🔨 Build ve Deploy\n\n### EAS Build ile Build Alma / Building with EAS Build\n\n1. **EAS CLI'yi yükleyin / Install EAS CLI:**\n   ```bash\n   npm install -g eas-cli\n   ```\n\n2. **Expo hesabınıza giriş yapın / Login to your Expo account:**\n   ```bash\n   eas login\n   ```\n\n3. **EAS Build yapılandırması / Configure EAS Build:**\n   ```bash\n   eas build:configure\n   ```\n\n4. **Build alın / Build:**\n   ```bash\n   # Android APK\n   npm run build:android\n   \n   # iOS IPA (Mac gerekli / requires Mac)\n   npm run build:ios\n   \n   # Her iki platform / Both platforms\n   npm run build:all\n   ```\n\n### Store Yayınlama / Publishing to Stores\n\nBuild alma tamamlandıktan sonra:\n\nAfter builds complete:\n\n1. **Android:** Google Play Console'a APK/AAB yükleyin / Upload APK/AAB to Google Play Console\n2. **iOS:** App Store Connect'e IPA yükleyin / Upload IPA to App Store Connect\n\n## 🔧 Yapılandırma / Configuration\n\n### App İsimleri ve Bundle IDs\n\n`app.json` dosyasında güncelleyin / Update in `app.json`:\n\n```json\n{\n  \"expo\": {\n    \"name\": \"2Mins Challenge\",\n    \"slug\": \"2mins-challenge\",\n    \"ios\": {\n      \"bundleIdentifier\": \"com.yourcompany.2mins\"\n    },\n    \"android\": {\n      \"package\": \"com.yourcompany.2mins\"\n    }\n  }\n}\n```\n\n### Native İzinler / Native Permissions\n\nUygulama aşağıdaki izinleri kullanır / App uses the following permissions:\n\n- **Kamera / Camera:** Görev tamamlama fotoğrafları için / For challenge completion photos\n- **Konum / Location:** Konum tabanlı görevler için / For location-based challenges\n- **Bildirimler / Notifications:** Günlük hatırlatmalar için / For daily reminders\n- **Depolama / Storage:** Fotoğraf kaydetmek için / For saving photos\n\nİzinler `app.json` içinde yapılandırılmıştır / Permissions are configured in `app.json`.\n\n## 🌐 API Entegrasyonu / API Integration\n\nMobil uygulama, mevcut backend API'yi kullanır (backend sunucunun çalışıyor olması gerekir):\n\nThe mobile app uses the existing backend API (backend server must be running):\n\n### API Endpoints Kullanımı / Using API Endpoints\n\n```typescript\nimport { useQuery } from '@tanstack/react-query';\n\n// Örnek kullanım / Example usage\nconst { data, isLoading } = useQuery({\n  queryKey: ['/api/challenges'],\n});\n```\n\n### Authentication\n\nKimlik doğrulama cookie tabanlıdır ve `AuthContext` tarafından yönetilir:\n\nAuthentication is cookie-based and managed by `AuthContext`:\n\n```typescript\nimport { useAuth } from '@/contexts/AuthContext';\n\nconst { user, isAuthenticated, login, logout } = useAuth();\n```\n\n## 📱 Özellikler / Features\n\n### Tamamlanan / Completed\n✅ Proje yapısı kurulumu / Project structure setup  \n✅ Expo yapılandırması / Expo configuration  \n✅ React Navigation kurulumu / React Navigation setup  \n✅ Kimlik doğrulama akışı / Authentication flow  \n✅ Temel ekranlar (Landing, Login, Home) / Basic screens  \n✅ API entegrasyonu / API integration  \n✅ TanStack Query entegrasyonu / TanStack Query integration  \n✅ Dark theme renk paleti / Dark theme color palette  \n✅ Font yönetimi (Inter, DM Sans) / Font management  \n✅ Tab ve stack navigasyon / Tab and stack navigation  \n\n### Devam Eden / In Progress\n🔨 UI bileşenlerinin tam dönüşümü / Full UI component conversion  \n🔨 Tüm ekranların tam implementasyonu / Complete implementation of all screens  \n🔨 Circular timer bileşeni / Circular timer component  \n🔨 Achievement badge sistemi / Achievement badge system  \n🔨 Analytics charts (React Native için uyarlanmış) / Analytics charts (adapted for RN)  \n\n### Yapılacak / To Do\n📋 Offline data caching (AsyncStorage) / Offline data caching  \n📋 Push bildirimleri / Push notifications  \n📋 Kamera entegrasyonu / Camera integration  \n📋 Konum entegrasyonu / Location integration  \n📋 Social sharing / Social sharing  \n📋 **App icon ve splash screen (Task 6.6) / App icon and splash screen (Task 6.6)**  \n📋 E2E testler / E2E tests\n\n**Not:** App icon ve splash screen dosyaları Task 6.6'da eklenecektir. Şu anda app.json bu dosyalara referans vermiyor, böylece proje çalıştırılabilir durumda.\n\n**Note:** App icon and splash screen files will be added in Task 6.6. Currently app.json doesn't reference these files, so the project is runnable.  \n\n## 🔄 Web'den Mobil'e Dönüşüm Notları / Web to Mobile Conversion Notes\n\n### Teknolojik Kararlar / Technical Decisions\n\n1. **UI Framework:**\n   - **Web:** shadcn/ui + Radix UI + Tailwind CSS\n   - **Mobil:** React Native Paper + NativeWind (Tailwind for RN) + Özel bileşenler / Custom components\n\n2. **Navigation:**\n   - **Web:** Wouter\n   - **Mobil:** React Navigation (Stack + Bottom Tabs)\n\n3. **State Management:**\n   - Aynı / Same: TanStack Query for server state\n   - Ekstra / Additional: AsyncStorage for offline persistence\n\n4. **Styling:**\n   - Inline StyleSheet + NativeWind utilities\n   - Renkler constants dosyasından / Colors from constants file\n\n### Uyumluluk Notları / Compatibility Notes\n\n- **Recharts:** React Native'de çalışmaz / Doesn't work in React Native  \n  → **Alternatif / Alternative:** react-native-chart-kit veya Victory Native\n\n- **Radix UI:** React Native'de kullanılamaz / Not available for React Native  \n  → **Alternatif / Alternative:** React Native Paper + özel bileşenler / custom components\n\n- **HTML/CSS:** React Native kullanmaz / Not used in React Native  \n  → View, Text, StyleSheet kullanımı / Use View, Text, StyleSheet\n\n## 🐛 Bilinen Sorunlar / Known Issues\n\n1. **Placeholder Screens:** Çoğu ekran henüz placeholder durumunda (Task 6.2'de tamamlanacak) / Most screens are still placeholders (will be completed in Task 6.2)\n2. **Package Installation Required:** İlk çalıştırmadan önce `npm install` çalıştırılmalı / Must run `npm install` before first run\n3. **Assets To Be Added:** Icon ve splash screen dosyaları Task 6.6'da eklenecek / Icon and splash screen files will be added in Task 6.6\n\n## ⚙️ İlk Kurulum Adımları / First Time Setup\n\n```bash\ncd mobile\nnpm install\nnpm start\n```\n\nBu, Expo development server'ı başlatacak ve QR kod gösterecektir. / This will start the Expo development server and show a QR code.\n\n## 🧪 Test\n\n```bash\n# Unit testler / Unit tests (TODO)\nnpm test\n\n# E2E testler (Detox) / E2E tests (TODO)\nnpm run e2e\n```\n\n## 📚 Kaynaklar / Resources\n\n- [Expo Documentation](https://docs.expo.dev/)\n- [React Navigation](https://reactnavigation.org/)\n- [React Native Paper](https://reactnativepaper.com/)\n- [TanStack Query](https://tanstack.com/query/latest)\n\n## 👥 Katkıda Bulunma / Contributing\n\n1. Fork yapın / Fork the project\n2. Feature branch oluşturun / Create feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit yapın / Commit changes (`git commit -m 'Add amazing feature'`)\n4. Push yapın / Push to branch (`git push origin feature/amazing-feature`)\n5. Pull Request açın / Open a Pull Request\n\n## 📄 Lisans / License\n\nMIT License - Detaylar için LICENSE dosyasına bakın / See LICENSE file for details\n\n---\n\n**Not:** Bu mobil uygulama aktif geliştirme aşamasındadır. Tam özellikli sürüm için Task 6.2-6.6'nın tamamlanması gerekmektedir.\n\n**Note:** This mobile app is in active development. Tasks 6.2-6.6 need to be completed for a fully-featured version.\n","size_bytes":12904},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"mobile/src/utils/queryClient.ts":{"content":"import { QueryClient } from '@tanstack/react-query';\nimport Constants from 'expo-constants';\n\n// Get API URL from environment or use default\nconst API_URL = Constants.expoConfig?.extra?.apiUrl || 'http://localhost:5000';\n\nasync function customFetch(url: string, options?: RequestInit) {\n  const fullUrl = url.startsWith('http') ? url : `${API_URL}${url}`;\n  \n  const response = await fetch(fullUrl, {\n    ...options,\n    headers: {\n      'Content-Type': 'application/json',\n      ...options?.headers,\n    },\n    credentials: 'include', // Important for cookie-based auth\n  });\n\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({ message: response.statusText }));\n    throw new Error(error.message || 'Request failed');\n  }\n\n  return response.json();\n}\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: async ({ queryKey }) => {\n        const url = queryKey[0] as string;\n        return customFetch(url);\n      },\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      retry: 1,\n    },\n  },\n});\n\n// Helper function for mutations\nexport async function apiRequest(url: string, options?: RequestInit) {\n  return customFetch(url, options);\n}\n","size_bytes":1205},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"mobile/src/screens/ChallengesScreen.tsx":{"content":"import { View, Text, StyleSheet } from 'react-native';\nimport { colors, typography } from '../constants/colors';\n\nexport default function ChallengesScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Challenges</Text>\n      <Text style={styles.subtitle}>Browse all available challenges</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: colors.background, padding: 20 },\n  title: { fontSize: typography.fontSize['3xl'], fontFamily: typography.fontFamily.heading, color: colors.foreground },\n  subtitle: { fontSize: typography.fontSize.base, color: colors.mutedForeground, marginTop: 8 },\n});\n","size_bytes":683},"client/src/pages/CreateChallenge.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { categoryConfig } from \"@/lib/categories\";\nimport { ArrowLeft } from \"lucide-react\";\nimport type { Challenge } from \"@shared/schema\";\n\nconst formSchema = z.object({\n  title: z.string().min(3, \"Title must be at least 3 characters\").max(100, \"Title too long\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\").max(500, \"Description too long\"),\n  category: z.enum([\"physical\", \"mental\", \"learning\", \"finance\", \"relationships\"]),\n  subcategory: z.string().optional(),\n  difficulty: z.enum([\"easy\", \"medium\", \"hard\"]),\n  points: z.coerce.number().int().min(10).max(50),\n  instructions: z.string().min(20, \"Instructions must be at least 20 characters\").max(1000, \"Instructions too long\"),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface CreateChallengeProps {\n  editId?: string;\n}\n\nexport default function CreateChallenge({ editId }: CreateChallengeProps) {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const isEditing = !!editId;\n\n  // Fetch existing challenge if editing\n  const { data: existingChallenge, isLoading: loadingChallenge } = useQuery<Challenge>({\n    queryKey: [`/api/challenges/${editId}`],\n    enabled: isEditing,\n  });\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      category: \"physical\",\n      subcategory: \"\",\n      difficulty: \"easy\",\n      points: 10,\n      instructions: \"\",\n    },\n  });\n\n  // Reset form with existing challenge data when it loads\n  useEffect(() => {\n    if (existingChallenge && isEditing) {\n      form.reset({\n        title: existingChallenge.title,\n        description: existingChallenge.description,\n        category: existingChallenge.category as any,\n        subcategory: existingChallenge.subcategory || \"\",\n        difficulty: existingChallenge.difficulty as any,\n        points: existingChallenge.points,\n        instructions: existingChallenge.instructions,\n      });\n    }\n  }, [existingChallenge, isEditing, form]);\n\n  const createMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      if (isEditing) {\n        return await apiRequest(\"PATCH\", `/api/challenges/${editId}`, data);\n      } else {\n        return await apiRequest(\"POST\", \"/api/challenges\", data);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: isEditing ? \"Challenge Updated!\" : \"Challenge Created!\",\n        description: isEditing \n          ? \"Your challenge has been updated successfully.\"\n          : \"Your custom challenge is now available.\",\n      });\n      \n      // Invalidate challenges cache\n      queryClient.invalidateQueries({ queryKey: [\"/api/challenges\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/challenges/user/my-challenges\"] });\n      \n      navigate(\"/my-challenges\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save challenge. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    createMutation.mutate(data);\n  };\n\n  if (loadingChallenge) {\n    return (\n      <div className=\"min-h-screen bg-background p-4 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto\" />\n          <p className=\"text-muted-foreground mt-4\">Loading challenge...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-2xl mx-auto p-4 md:p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4\">\n          <Button variant=\"ghost\" size=\"icon\" onClick={() => navigate(\"/my-challenges\")} data-testid=\"button-back\">\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">\n              {isEditing ? \"Edit Challenge\" : \"Create Custom Challenge\"}\n            </h1>\n            <p className=\"text-muted-foreground\">\n              {isEditing ? \"Update your custom challenge\" : \"Design your own 2-minute challenge\"}\n            </p>\n          </div>\n        </div>\n\n        {/* Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Challenge Details</CardTitle>\n            <CardDescription>\n              Fill in the details for your custom 2-minute challenge\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {/* Title */}\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., Morning Gratitude Journal\" {...field} data-testid=\"input-title\" />\n                      </FormControl>\n                      <FormDescription>\n                        A short, catchy name for your challenge\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Description */}\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"e.g., Write down three things you're grateful for\" \n                          {...field} \n                          data-testid=\"input-description\"\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        A brief overview of what the challenge involves\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Category and Difficulty Row */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-category\">\n                              <SelectValue placeholder=\"Select a category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {Object.entries(categoryConfig).map(([key, config]) => (\n                              <SelectItem key={key} value={key}>\n                                {config.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"difficulty\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Difficulty</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-difficulty\">\n                              <SelectValue placeholder=\"Select difficulty\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"easy\">Easy</SelectItem>\n                            <SelectItem value=\"medium\">Medium</SelectItem>\n                            <SelectItem value=\"hard\">Hard</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Subcategory and Points Row */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"subcategory\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Subcategory (Optional)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., gratitude, mindfulness\" {...field} data-testid=\"input-subcategory\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"points\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Points (10-50)</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" min={10} max={50} {...field} data-testid=\"input-points\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Instructions */}\n                <FormField\n                  control={form.control}\n                  name=\"instructions\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Instructions</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Provide step-by-step instructions for completing this challenge...\"\n                          className=\"min-h-32\"\n                          {...field}\n                          data-testid=\"input-instructions\"\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Detailed instructions on how to complete the challenge in 2 minutes\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Submit Button */}\n                <div className=\"flex gap-3\">\n                  <Button\n                    type=\"submit\"\n                    disabled={createMutation.isPending}\n                    data-testid=\"button-submit\"\n                  >\n                    {createMutation.isPending ? \"Saving...\" : (isEditing ? \"Update Challenge\" : \"Create Challenge\")}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => navigate(\"/my-challenges\")}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12481},"client/src/pages/Settings.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n  CardFooter,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectContent,\n  SelectItem,\n} from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Link } from \"wouter\";\nimport {\n  User as UserIcon,\n  Mail,\n  Globe,\n  Shield,\n  Bell,\n  Palette,\n  Camera,\n  Save,\n  Trash2,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ntype SettingsData = {\n  firstName: string;\n  lastName: string;\n  username: string;\n  email: string;\n  language: string;\n  theme: \"system\" | \"light\" | \"dark\";\n  emailNotifications: boolean;\n  pushNotifications: boolean;\n  weeklySummary: boolean;\n  profileVisibility: \"public\" | \"friends\" | \"private\";\n  dataSharing: boolean;\n  profileImageUrl?: string;\n};\n\nconst DEFAULTS: SettingsData = {\n  firstName: \"\",\n  lastName: \"\",\n  username: \"\",\n  email: \"\",\n  language: \"en\",\n  theme: \"system\",\n  emailNotifications: true,\n  pushNotifications: true,\n  weeklySummary: true,\n  profileVisibility: \"friends\",\n  dataSharing: false,\n  profileImageUrl: undefined,\n};\n\nexport default function SettingsPage() {\n  const { toast } = useToast();\n  const { data, isLoading } = useQuery<SettingsData>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const [form, setForm] = useState<SettingsData>(data ?? DEFAULTS);\n\n  useEffect(() => {\n    if (data) {\n      setForm(data);\n    }\n  }, [data]);\n\n  const saveMutation = useMutation({\n    mutationFn: async (payload: SettingsData) => {\n      const response = await apiRequest(\"POST\", \"/api/settings\", payload);\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to save settings\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n      toast({\n        title: \"Success\",\n        description: \"Settings saved successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Could not save settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAvatarChange = async (file?: File) => {\n    if (!file) return;\n    const url = URL.createObjectURL(file);\n    setForm((f) => ({ ...f, profileImageUrl: url }));\n  };\n\n  const initials =\n    (form.firstName?.[0] || \"\") +\n    (form.lastName?.[0] || form.username?.[0] || \"U\");\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"border-b border-border bg-card/30 backdrop-blur-sm sticky top-0 z-10\">\n        <div className=\"container max-w-6xl mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-10 h-10 rounded-full bg-primary flex items-center justify-center\">\n              <Palette className=\"h-5 w-5 text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Settings</h1>\n          </div>\n          <Button asChild variant=\"ghost\" size=\"sm\" data-testid=\"button-back-home\">\n            <Link href=\"/\">Back to Home</Link>\n          </Button>\n        </div>\n      </header>\n\n      <main className=\"container max-w-6xl mx-auto px-4 py-8\">\n        <Card\n          className=\"bg-card/30 border-border rounded-2xl mb-8\"\n          data-testid=\"card-profile\"\n        >\n          <CardHeader>\n            <CardTitle className=\"text-foreground flex items-center gap-2\">\n              <UserIcon className=\"h-5 w-5 opacity-80\" />\n              Profile\n            </CardTitle>\n            <CardDescription className=\"text-muted-foreground\">\n              Update your basic information and profile photo.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"flex items-center gap-4\">\n              <Avatar className=\"h-16 w-16\">\n                <AvatarImage src={form.profileImageUrl || \"\"} />\n                <AvatarFallback>{initials.toUpperCase() || \"U\"}</AvatarFallback>\n              </Avatar>\n              <div className=\"flex items-center gap-3\">\n                <input\n                  id=\"avatar-input\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  className=\"hidden\"\n                  onChange={(e) => handleAvatarChange(e.target.files?.[0])}\n                />\n                <Button\n                  variant=\"secondary\"\n                  onClick={() =>\n                    document.getElementById(\"avatar-input\")?.click()\n                  }\n                  data-testid=\"button-change-photo\"\n                >\n                  <Camera className=\"mr-2 h-4 w-4\" />\n                  Change Photo\n                </Button>\n                {form.profileImageUrl && (\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() =>\n                      setForm((f) => ({ ...f, profileImageUrl: undefined }))\n                    }\n                    data-testid=\"button-remove-photo\"\n                  >\n                    Remove\n                  </Button>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\">First name</Label>\n                <Input\n                  id=\"firstName\"\n                  data-testid=\"input-first-name\"\n                  value={form.firstName}\n                  onChange={(e) =>\n                    setForm((f) => ({ ...f, firstName: e.target.value }))\n                  }\n                  placeholder=\"Jane\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\">Last name</Label>\n                <Input\n                  id=\"lastName\"\n                  data-testid=\"input-last-name\"\n                  value={form.lastName}\n                  onChange={(e) =>\n                    setForm((f) => ({ ...f, lastName: e.target.value }))\n                  }\n                  placeholder=\"Doe\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">Username</Label>\n                <Input\n                  id=\"username\"\n                  data-testid=\"input-username\"\n                  value={form.username}\n                  onChange={(e) =>\n                    setForm((f) => ({ ...f, username: e.target.value }))\n                  }\n                  placeholder=\"janedoe\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 opacity-70\" />\n                  <Input\n                    id=\"email\"\n                    data-testid=\"input-email\"\n                    className=\"pl-9\"\n                    type=\"email\"\n                    value={form.email}\n                    onChange={(e) =>\n                      setForm((f) => ({ ...f, email: e.target.value }))\n                    }\n                    placeholder=\"jane@example.com\"\n                  />\n                </div>\n              </div>\n            </div>\n          </CardContent>\n          <CardFooter className=\"justify-end\">\n            <Button \n              onClick={() => saveMutation.mutate(form)}\n              disabled={saveMutation.isPending}\n              data-testid=\"button-save-profile\"\n            >\n              <Save className=\"mr-2 h-4 w-4\" />\n              {saveMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          </CardFooter>\n        </Card>\n\n        <Card\n          className=\"bg-card/30 border-border rounded-2xl mb-8\"\n          data-testid=\"card-preferences\"\n        >\n          <CardHeader>\n            <CardTitle className=\"text-foreground flex items-center gap-2\">\n              <Palette className=\"h-5 w-5 opacity-80\" />\n              Preferences\n            </CardTitle>\n            <CardDescription className=\"text-muted-foreground\">\n              Appearance and language settings.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label>Theme</Label>\n              <Select\n                value={form.theme}\n                onValueChange={(v: \"system\" | \"light\" | \"dark\") =>\n                  setForm((f) => ({ ...f, theme: v }))\n                }\n              >\n                <SelectTrigger data-testid=\"select-theme\">\n                  <SelectValue placeholder=\"Select a theme\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"system\">System</SelectItem>\n                  <SelectItem value=\"light\">Light</SelectItem>\n                  <SelectItem value=\"dark\">Dark</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Language</Label>\n              <div className=\"relative\">\n                <Globe className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 opacity-70 z-10\" />\n                <Select\n                  value={form.language}\n                  onValueChange={(v) => setForm((f) => ({ ...f, language: v }))}\n                >\n                  <SelectTrigger className=\"pl-9\" data-testid=\"select-language\">\n                    <SelectValue placeholder=\"Select a language\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"en\">English</SelectItem>\n                    <SelectItem value=\"tr\">Türkçe</SelectItem>\n                    <SelectItem value=\"de\">Deutsch</SelectItem>\n                    <SelectItem value=\"es\">Español</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n          <CardFooter className=\"justify-end\">\n            <Button \n              onClick={() => saveMutation.mutate(form)}\n              disabled={saveMutation.isPending}\n              data-testid=\"button-save-preferences\"\n            >\n              <Save className=\"mr-2 h-4 w-4\" />\n              {saveMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          </CardFooter>\n        </Card>\n\n        <Card\n          className=\"bg-card/30 border-border rounded-2xl mb-8\"\n          data-testid=\"card-notifications\"\n        >\n          <CardHeader>\n            <CardTitle className=\"text-foreground flex items-center gap-2\">\n              <Bell className=\"h-5 w-5 opacity-80\" />\n              Notifications\n            </CardTitle>\n            <CardDescription className=\"text-muted-foreground\">\n              Choose how you want to be notified about activity and progress.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Email notifications</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Updates about challenges and weekly summaries.\n                </p>\n              </div>\n              <Switch\n                checked={form.emailNotifications}\n                onCheckedChange={(v) =>\n                  setForm((f) => ({ ...f, emailNotifications: !!v }))\n                }\n                data-testid=\"switch-email-notifications\"\n              />\n            </div>\n            <Separator />\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Push notifications</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Get notified instantly on new activity.\n                </p>\n              </div>\n              <Switch\n                checked={form.pushNotifications}\n                onCheckedChange={(v) =>\n                  setForm((f) => ({ ...f, pushNotifications: !!v }))\n                }\n                data-testid=\"switch-push-notifications\"\n              />\n            </div>\n            <Separator />\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Weekly summary</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  A recap of your progress every week.\n                </p>\n              </div>\n              <Switch\n                checked={form.weeklySummary}\n                onCheckedChange={(v) =>\n                  setForm((f) => ({ ...f, weeklySummary: !!v }))\n                }\n                data-testid=\"switch-weekly-summary\"\n              />\n            </div>\n          </CardContent>\n          <CardFooter className=\"justify-end\">\n            <Button \n              onClick={() => saveMutation.mutate(form)}\n              disabled={saveMutation.isPending}\n              data-testid=\"button-save-notifications\"\n            >\n              <Save className=\"mr-2 h-4 w-4\" />\n              {saveMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          </CardFooter>\n        </Card>\n\n        <Card\n          className=\"bg-card/30 border-border rounded-2xl mb-8\"\n          data-testid=\"card-privacy\"\n        >\n          <CardHeader>\n            <CardTitle className=\"text-foreground flex items-center gap-2\">\n              <Shield className=\"h-5 w-5 opacity-80\" />\n              Privacy\n            </CardTitle>\n            <CardDescription className=\"text-muted-foreground\">\n              Control who can see your activity and how your data is used.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label>Profile visibility</Label>\n              <Select\n                value={form.profileVisibility}\n                onValueChange={(v: \"public\" | \"friends\" | \"private\") =>\n                  setForm((f) => ({ ...f, profileVisibility: v }))\n                }\n              >\n                <SelectTrigger data-testid=\"select-profile-visibility\">\n                  <SelectValue placeholder=\"Select visibility\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"public\">Public</SelectItem>\n                  <SelectItem value=\"friends\">Friends</SelectItem>\n                  <SelectItem value=\"private\">Private</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Allow anonymized data sharing</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Help us improve by sharing usage metrics.\n                </p>\n              </div>\n              <Switch\n                checked={form.dataSharing}\n                onCheckedChange={(v) =>\n                  setForm((f) => ({ ...f, dataSharing: !!v }))\n                }\n                data-testid=\"switch-data-sharing\"\n              />\n            </div>\n          </CardContent>\n          <CardFooter className=\"justify-end\">\n            <Button \n              onClick={() => saveMutation.mutate(form)}\n              disabled={saveMutation.isPending}\n              data-testid=\"button-save-privacy\"\n            >\n              <Save className=\"mr-2 h-4 w-4\" />\n              {saveMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          </CardFooter>\n        </Card>\n\n        <Card\n          className=\"bg-card/30 border-border rounded-2xl\"\n          data-testid=\"card-danger-zone\"\n        >\n          <CardHeader>\n            <CardTitle className=\"text-foreground\">Danger Zone</CardTitle>\n            <CardDescription className=\"text-muted-foreground\">\n              Irreversible actions. Proceed with caution.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n              <div>\n                <p className=\"font-medium text-destructive\">Delete account</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  This will permanently remove your account and all associated\n                  data.\n                </p>\n              </div>\n              <Button\n                variant=\"destructive\"\n                onClick={() => {\n                  toast({\n                    title: \"Not implemented\",\n                    description: \"Account deletion feature is not yet available\",\n                    variant: \"destructive\",\n                  });\n                }}\n                data-testid=\"button-delete-account\"\n              >\n                <Trash2 className=\"mr-2 h-4 w-4\" />\n                Delete Account\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":17728},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"mobile/src/screens/MoreScreen.tsx":{"content":"import { View, Text, StyleSheet } from 'react-native';\nimport { colors, typography } from '../constants/colors';\n\nexport default function MoreScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>More</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: colors.background, padding: 20, justifyContent: 'center', alignItems: 'center' },\n  title: { fontSize: typography.fontSize['3xl'], fontFamily: typography.fontFamily.heading, color: colors.foreground },\n});\n","size_bytes":547},"mobile/src/screens/HistoryScreen.tsx":{"content":"import { View, Text, StyleSheet } from 'react-native';\nimport { colors, typography } from '../constants/colors';\n\nexport default function HistoryScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>History</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: colors.background, padding: 20, justifyContent: 'center', alignItems: 'center' },\n  title: { fontSize: typography.fontSize['3xl'], fontFamily: typography.fontFamily.heading, color: colors.foreground },\n});\n","size_bytes":553},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, index, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (Required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table (Required for Replit Auth and local auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  username: varchar(\"username\").unique(),\n  password: varchar(\"password\"), // hashed password for local auth\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  // Onboarding preferences\n  preferredCategories: jsonb(\"preferred_categories\").$type<ChallengeCategory[]>(), // e.g., [\"mental\", \"physical\"]\n  hasMentalHealthConcerns: text(\"has_mental_health_concerns\"), // \"yes\" or \"no\"\n  mentalHealthDetails: text(\"mental_health_details\"), // specific concerns if any\n  preferredDays: jsonb(\"preferred_days\").$type<number[]>(), // e.g., [1,3,5] for Mon, Wed, Fri (0=Sunday, 6=Saturday)\n  onboardingCompleted: integer(\"onboarding_completed\").default(0), // 0 = not completed, 1 = completed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n// Challenge categories\nexport const challengeCategories = [\n  \"physical\",\n  \"mental\",\n  \"learning\",\n  \"finance\",\n  \"relationships\"\n] as const;\n\nexport type ChallengeCategory = typeof challengeCategories[number];\n\nexport const challengeDifficulties = [\"easy\", \"medium\", \"hard\"] as const;\nexport type ChallengeDifficulty = typeof challengeDifficulties[number];\n\n// Challenges table - includes both system and user-created challenges\nexport const challenges = pgTable(\"challenges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(),\n  subcategory: text(\"subcategory\"),\n  difficulty: text(\"difficulty\").notNull(),\n  points: integer(\"points\").notNull().default(10),\n  instructions: text(\"instructions\").notNull(),\n  createdBy: varchar(\"created_by\").references(() => users.id, { onDelete: \"set null\" }), // null = system challenge, userId = user-created\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertChallengeSchema = createInsertSchema(challenges).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertChallenge = z.infer<typeof insertChallengeSchema>;\nexport type Challenge = typeof challenges.$inferSelect;\n\n// User progress tracking - one row per user\nexport const userProgress = pgTable(\"user_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().unique().references(() => users.id, { onDelete: \"cascade\" }), // link to users table\n  totalChallengesCompleted: integer(\"total_challenges_completed\").notNull().default(0),\n  currentStreak: integer(\"current_streak\").notNull().default(0),\n  longestStreak: integer(\"longest_streak\").notNull().default(0),\n  totalPoints: integer(\"total_points\").notNull().default(0),\n  lastCompletedDate: text(\"last_completed_date\"),\n});\n\nexport const insertUserProgressSchema = createInsertSchema(userProgress).omit({\n  id: true,\n});\n\nexport type InsertUserProgress = z.infer<typeof insertUserProgressSchema>;\nexport type UserProgress = typeof userProgress.$inferSelect;\n\n// Challenge history - one row per completion\nexport const challengeHistory = pgTable(\"challenge_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }), // link to users table\n  challengeId: varchar(\"challenge_id\").notNull().references(() => challenges.id, { onDelete: \"cascade\" }),\n  completedAt: text(\"completed_at\").notNull(),\n  timeSpent: integer(\"time_spent\").notNull(), // in seconds\n  pointsEarned: integer(\"points_earned\").notNull(),\n});\n\nexport const insertChallengeHistorySchema = createInsertSchema(challengeHistory).omit({\n  id: true,\n});\n\nexport const createChallengeHistorySchema = insertChallengeHistorySchema.omit({\n  userId: true,\n});\n\nexport type InsertChallengeHistory = z.infer<typeof insertChallengeHistorySchema>;\nexport type CreateChallengeHistory = z.infer<typeof createChallengeHistorySchema>;\nexport type ChallengeHistory = typeof challengeHistory.$inferSelect;\n\n// Challenge with completion info (for history display)\nexport type ChallengeWithDetails = Challenge & {\n  completedAt?: string;\n  timeSpent?: number;\n  pointsEarned?: number;\n};\n\n// Achievement tiers for visual distinction\nexport const achievementTiers = [\"bronze\", \"silver\", \"gold\", \"platinum\"] as const;\nexport type AchievementTier = typeof achievementTiers[number];\n\n// Achievements table - all available achievements\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  icon: text(\"icon\").notNull(), // lucide-react icon name or emoji\n  category: text(\"category\").notNull(), // \"completion\", \"streak\", \"points\", \"category_master\"\n  requirementType: text(\"requirement_type\").notNull(), // \"challenges_completed\", \"streak_days\", \"total_points\", etc.\n  requirementValue: integer(\"requirement_value\").notNull(), // threshold value\n  requirementMeta: jsonb(\"requirement_meta\"), // optional metadata (e.g., {category: \"physical\"})\n  tier: text(\"tier\").notNull(), // \"bronze\", \"silver\", \"gold\", \"platinum\"\n  sortOrder: integer(\"sort_order\").notNull().default(0), // for display ordering\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertAchievementSchema = createInsertSchema(achievements).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertAchievement = z.infer<typeof insertAchievementSchema>;\nexport type Achievement = typeof achievements.$inferSelect;\n\n// User achievements - tracks which achievements users have unlocked\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  achievementId: varchar(\"achievement_id\").notNull().references(() => achievements.id, { onDelete: \"cascade\" }),\n  unlockedAt: timestamp(\"unlocked_at\").defaultNow(),\n  progress: integer(\"progress\").default(0), // current progress (used before unlocking)\n});\n\nexport const insertUserAchievementSchema = createInsertSchema(userAchievements).omit({\n  id: true,\n  unlockedAt: true,\n});\n\nexport type InsertUserAchievement = z.infer<typeof insertUserAchievementSchema>;\nexport type UserAchievement = typeof userAchievements.$inferSelect;\n\n// Achievement with unlock status for a user\nexport type AchievementWithProgress = Achievement & {\n  unlocked: boolean;\n  unlockedAt?: string | null;\n  progress: number;\n  progressPercent: number;\n  userAchievementId?: string | null; // ID for sharing unlocked achievements\n};\n\n// Friendship status types\nexport const friendshipStatuses = [\"pending\", \"accepted\", \"declined\"] as const;\nexport type FriendshipStatus = typeof friendshipStatuses[number];\n\n// Friendships table - tracks friend relationships\nexport const friendships = pgTable(\"friendships\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  requesterId: varchar(\"requester_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  receiverId: varchar(\"receiver_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  status: text(\"status\").notNull().default(\"pending\"), // \"pending\", \"accepted\", \"declined\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  respondedAt: timestamp(\"responded_at\"),\n}, (table) => [\n  index(\"idx_friendships_requester\").on(table.requesterId),\n  index(\"idx_friendships_receiver\").on(table.receiverId),\n]);\n\nexport const insertFriendshipSchema = createInsertSchema(friendships).omit({\n  id: true,\n  createdAt: true,\n  respondedAt: true,\n});\n\nexport type InsertFriendship = z.infer<typeof insertFriendshipSchema>;\nexport type Friendship = typeof friendships.$inferSelect;\n\n// Friend with user details for display\nexport type FriendWithDetails = {\n  friendshipId: string;\n  userId: string;\n  email: string | null;\n  firstName: string | null;\n  lastName: string | null;\n  profileImageUrl: string | null;\n  status: FriendshipStatus;\n  createdAt: Date | null;\n};\n","size_bytes":8852},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"mobile/src/navigation/MainNavigator.tsx":{"content":"import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Ionicons } from '@expo/vector-icons';\nimport { colors, typography } from '../constants/colors';\n\n// Screens\nimport HomeScreen from '../screens/HomeScreen';\nimport ChallengesScreen from '../screens/ChallengesScreen';\nimport ChallengeDetailScreen from '../screens/ChallengeDetailScreen';\nimport ProgressScreen from '../screens/ProgressScreen';\nimport HistoryScreen from '../screens/HistoryScreen';\nimport AchievementsScreen from '../screens/AchievementsScreen';\nimport AnalyticsScreen from '../screens/AnalyticsScreen';\nimport FriendsScreen from '../screens/FriendsScreen';\nimport MyChallengesScreen from '../screens/MyChallengesScreen';\nimport CreateChallengeScreen from '../screens/CreateChallengeScreen';\n\nexport type MainTabParamList = {\n  HomeTab: undefined;\n  ChallengesTab: undefined;\n  ProgressTab: undefined;\n  FriendsTab: undefined;\n  MoreTab: undefined;\n};\n\nexport type HomeStackParamList = {\n  Home: undefined;\n  ChallengeDetail: { id: string };\n};\n\nexport type ChallengesStackParamList = {\n  Challenges: undefined;\n  ChallengeDetail: { id: string };\n  MyChallenges: undefined;\n  CreateChallenge: { editId?: string };\n};\n\nexport type MoreStackParamList = {\n  More: undefined;\n  Achievements: undefined;\n  Analytics: undefined;\n  History: undefined;\n};\n\nconst Tab = createBottomTabNavigator<MainTabParamList>();\nconst HomeStack = createNativeStackNavigator<HomeStackParamList>();\nconst ChallengesStack = createNativeStackNavigator<ChallengesStackParamList>();\nconst MoreStack = createNativeStackNavigator<MoreStackParamList>();\n\n// Stack Navigators\nfunction HomeStackNavigator() {\n  return (\n    <HomeStack.Navigator\n      screenOptions={{\n        headerShown: false,\n        contentStyle: { backgroundColor: colors.background },\n      }}\n    >\n      <HomeStack.Screen name=\"Home\" component={HomeScreen} />\n      <HomeStack.Screen \n        name=\"ChallengeDetail\" \n        component={ChallengeDetailScreen}\n        options={{ headerShown: true, title: 'Challenge' }}\n      />\n    </HomeStack.Navigator>\n  );\n}\n\nfunction ChallengesStackNavigator() {\n  return (\n    <ChallengesStack.Navigator\n      screenOptions={{\n        headerShown: false,\n        contentStyle: { backgroundColor: colors.background },\n      }}\n    >\n      <ChallengesStack.Screen name=\"Challenges\" component={ChallengesScreen} />\n      <ChallengesStack.Screen \n        name=\"ChallengeDetail\" \n        component={ChallengeDetailScreen}\n        options={{ headerShown: true, title: 'Challenge' }}\n      />\n      <ChallengesStack.Screen \n        name=\"MyChallenges\" \n        component={MyChallengesScreen}\n        options={{ headerShown: true, title: 'My Challenges' }}\n      />\n      <ChallengesStack.Screen \n        name=\"CreateChallenge\" \n        component={CreateChallengeScreen}\n        options={{ headerShown: true, title: 'Create Challenge' }}\n      />\n    </ChallengesStack.Navigator>\n  );\n}\n\nfunction MoreStackNavigator() {\n  return (\n    <MoreStack.Navigator\n      screenOptions={{\n        headerShown: false,\n        contentStyle: { backgroundColor: colors.background },\n      }}\n    >\n      <MoreStack.Screen name=\"More\" component={require('../screens/MoreScreen').default} />\n      <MoreStack.Screen \n        name=\"Achievements\" \n        component={AchievementsScreen}\n        options={{ headerShown: true, title: 'Achievements' }}\n      />\n      <MoreStack.Screen \n        name=\"Analytics\" \n        component={AnalyticsScreen}\n        options={{ headerShown: true, title: 'Analytics' }}\n      />\n      <MoreStack.Screen \n        name=\"History\" \n        component={HistoryScreen}\n        options={{ headerShown: true, title: 'History' }}\n      />\n    </MoreStack.Navigator>\n  );\n}\n\nexport default function MainNavigator() {\n  return (\n    <Tab.Navigator\n      screenOptions={{\n        headerShown: false,\n        tabBarStyle: {\n          backgroundColor: colors.card,\n          borderTopColor: colors.border,\n          borderTopWidth: 1,\n          height: 60,\n          paddingBottom: 8,\n          paddingTop: 8,\n        },\n        tabBarActiveTintColor: colors.primary,\n        tabBarInactiveTintColor: colors.mutedForeground,\n        tabBarLabelStyle: {\n          fontFamily: typography.fontFamily.medium,\n          fontSize: typography.fontSize.xs,\n        },\n      }}\n    >\n      <Tab.Screen\n        name=\"HomeTab\"\n        component={HomeStackNavigator}\n        options={{\n          title: 'Home',\n          tabBarIcon: ({ color, size }) => (\n            <Ionicons name=\"home\" size={size} color={color} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"ChallengesTab\"\n        component={ChallengesStackNavigator}\n        options={{\n          title: 'Challenges',\n          tabBarIcon: ({ color, size }) => (\n            <Ionicons name=\"list\" size={size} color={color} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"ProgressTab\"\n        component={ProgressScreen}\n        options={{\n          title: 'Progress',\n          tabBarIcon: ({ color, size }) => (\n            <Ionicons name=\"stats-chart\" size={size} color={color} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"FriendsTab\"\n        component={FriendsScreen}\n        options={{\n          title: 'Friends',\n          tabBarIcon: ({ color, size }) => (\n            <Ionicons name=\"people\" size={size} color={color} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"MoreTab\"\n        component={MoreStackNavigator}\n        options={{\n          title: 'More',\n          tabBarIcon: ({ color, size }) => (\n            <Ionicons name=\"ellipsis-horizontal\" size={size} color={color} />\n          ),\n        }}\n      />\n    </Tab.Navigator>\n  );\n}\n","size_bytes":5825},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/AppSidebar\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Home from \"@/pages/Home\";\nimport Login from \"@/pages/Login\";\nimport Onboarding from \"@/pages/Onboarding\";\nimport ChallengeDetail from \"@/pages/ChallengeDetail\";\nimport Challenges from \"@/pages/Challenges\";\nimport Progress from \"@/pages/Progress\";\nimport History from \"@/pages/History\";\nimport Achievements from \"@/pages/Achievements\";\nimport Analytics from \"@/pages/Analytics\";\nimport CreateChallenge from \"@/pages/CreateChallenge\";\nimport MyChallenges from \"@/pages/MyChallenges\";\nimport Friends from \"@/pages/Friends\";\nimport Profile from \"@/pages/Profile\";\nimport Settings from \"@/pages/Settings\";\nimport Notifications from \"@/pages/Notifications\";\nimport ShareAchievement from \"@/pages/ShareAchievement\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  // Show loading state while checking auth\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto\" />\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show login page if not authenticated\n  if (!isAuthenticated) {\n    return (\n      <Switch>\n        <Route path=\"/share/achievement/:id\" component={ShareAchievement} />\n        <Route component={Login} />\n      </Switch>\n    );\n  }\n\n  // Show onboarding if user hasn't completed it\n  if (user && user.onboardingCompleted === 0) {\n    return <Onboarding />;\n  }\n\n  // Show main app with sidebar\n  const sidebarStyle = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={sidebarStyle as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex flex-col flex-1\">\n          <header className=\"flex items-center justify-between p-4 border-b\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n          </header>\n          <main className=\"flex-1 overflow-auto\">\n            <Switch>\n              <Route path=\"/\" component={Home} />\n              <Route path=\"/challenge/:id\" component={ChallengeDetail} />\n              <Route path=\"/challenges\" component={Challenges} />\n              <Route path=\"/progress\" component={Progress} />\n              <Route path=\"/history\" component={History} />\n              <Route path=\"/achievements\" component={Achievements} />\n              <Route path=\"/analytics\" component={Analytics} />\n              <Route path=\"/my-challenges\" component={MyChallenges} />\n              <Route path=\"/create-challenge\" component={CreateChallenge} />\n              <Route path=\"/edit-challenge/:id\">\n                {(params) => <CreateChallenge editId={params.id} />}\n              </Route>\n              <Route path=\"/friends\" component={Friends} />\n              <Route path=\"/profile\" component={Profile} />\n              <Route path=\"/settings\" component={Settings} />\n              <Route path=\"/notifications\" component={Notifications} />\n              <Route path=\"/share/achievement/:id\" component={ShareAchievement} />\n              <Route component={NotFound} />\n            </Switch>\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4056},"client/src/pages/Home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { StatCard } from \"@/components/StatCard\";\nimport { CategoryCard } from \"@/components/CategoryCard\";\nimport { ChallengeCard } from \"@/components/ChallengeCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Flame, Trophy, Target, Sparkles } from \"lucide-react\";\nimport type {\n  Challenge,\n  UserProgress,\n  ChallengeCategory,\n} from \"@shared/schema\";\nimport { challengeCategories } from \"@shared/schema\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n\n  // Fetch user progress\n  const { data: progress, isLoading: progressLoading } = useQuery<UserProgress>(\n    {\n      queryKey: [\"/api/progress\"],\n    },\n  );\n\n  // Fetch random featured challenge\n  const { data: featuredChallenge, isLoading: challengeLoading } =\n    useQuery<Challenge>({\n      queryKey: [\"/api/challenges/random\"],\n    });\n\n  const handleStartChallenge = () => {\n    if (featuredChallenge) {\n      setLocation(`/challenge/${featuredChallenge.id}`);\n    }\n  };\n\n  const handleCategoryClick = (category: ChallengeCategory) => {\n    setLocation(`/challenges?category=${category}`);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border bg-card/30 backdrop-blur-sm sticky top-0 z-10\">\n        <div className=\"container max-w-6xl mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <div\n                className=\"w-10 h-10 rounded-full bg-primary flex items-center justify-center\"\n                data-testid=\"logo\"\n              >\n                <Sparkles className=\"h-5 w-5 text-primary-foreground\" />\n              </div>\n              <h1\n                className=\"text-2xl font-bold text-foreground\"\n                data-testid=\"text-app-title\"\n              >\n                2Mins\n              </h1>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"container max-w-6xl mx-auto px-4 py-8\">\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n          <StatCard\n            title=\"Current Streak\"\n            value={\n              progressLoading ? \"...\" : `${progress?.currentStreak || 0} days`\n            }\n            icon={Flame}\n            description=\"Keep it going!\"\n          />\n          <StatCard\n            title=\"Total Points\"\n            value={progressLoading ? \"...\" : progress?.totalPoints || 0}\n            icon={Trophy}\n            description=\"Points earned\"\n          />\n          <StatCard\n            title=\"Completed\"\n            value={\n              progressLoading ? \"...\" : progress?.totalChallengesCompleted || 0\n            }\n            icon={Target}\n            description=\"Challenges done\"\n          />\n        </div>\n\n        {/* Featured Challenge */}\n        {!challengeLoading && featuredChallenge && (\n          <section className=\"mb-12\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2\n                className=\"text-3xl font-bold text-foreground\"\n                data-testid=\"heading-featured\"\n              >\n                Today's Challenge\n              </h2>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                asChild\n                data-testid=\"link-all-challenges\"\n              >\n                <Link href=\"/challenges\">View All</Link>\n              </Button>\n            </div>\n            <ChallengeCard\n              challenge={featuredChallenge}\n              onStart={handleStartChallenge}\n              featured\n            />\n          </section>\n        )}\n\n        {/* Categories */}\n        <section>\n          <h2\n            className=\"text-3xl font-bold text-foreground mb-6\"\n            data-testid=\"heading-categories\"\n          >\n            Explore Categories\n          </h2>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {challengeCategories.map((category) => (\n              <CategoryCard\n                key={category}\n                category={category}\n                onClick={() => handleCategoryClick(category)}\n              />\n            ))}\n          </div>\n        </section>\n\n        {/* Empty State Motivation */}\n        {!progressLoading && progress?.totalChallengesCompleted === 0 && (\n          <div className=\"mt-12 text-center py-12\" data-testid=\"empty-state\">\n            <div className=\"w-20 h-20 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-4\">\n              <Target className=\"h-10 w-10 text-primary\" />\n            </div>\n            <h3\n              className=\"text-xl font-semibold text-foreground mb-2\"\n              data-testid=\"text-empty-title\"\n            >\n              Ready to Transform Your Day?\n            </h3>\n            <p\n              className=\"text-muted-foreground max-w-md mx-auto\"\n              data-testid=\"text-empty-description\"\n            >\n              Start your first 2-minute challenge and begin building habits that\n              last. Every journey begins with a single step.\n            </p>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":5333},"mobile/src/screens/AchievementsScreen.tsx":{"content":"import { View, Text, StyleSheet } from 'react-native';\nimport { colors, typography } from '../constants/colors';\n\nexport default function AchievementsScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Achievements</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: colors.background, padding: 20, justifyContent: 'center', alignItems: 'center' },\n  title: { fontSize: typography.fontSize['3xl'], fontFamily: typography.fontFamily.heading, color: colors.foreground },\n});\n","size_bytes":563},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"mobile/src/screens/AnalyticsScreen.tsx":{"content":"import { View, Text, StyleSheet } from 'react-native';\nimport { colors, typography } from '../constants/colors';\n\nexport default function AnalyticsScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Analytics</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: colors.background, padding: 20, justifyContent: 'center', alignItems: 'center' },\n  title: { fontSize: typography.fontSize['3xl'], fontFamily: typography.fontFamily.heading, color: colors.foreground },\n});\n","size_bytes":557},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  \n  // In production (Replit), secure should be true. In development, allow HTTP\n  const isProduction = process.env.NODE_ENV === \"production\";\n  \n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: isProduction, // Only require HTTPS in production\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(claims: any) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  // Keep track of registered strategies\n  const registeredStrategies = new Set<string>();\n\n  // Helper function to ensure strategy exists for a domain\n  const ensureStrategy = (domain: string) => {\n    const strategyName = `replitauth:${domain}`;\n    if (!registeredStrategies.has(strategyName)) {\n      const strategy = new Strategy(\n        {\n          name: strategyName,\n          config,\n          scope: \"openid email profile offline_access\",\n          callbackURL: `https://${domain}/api/callback`,\n        },\n        verify,\n      );\n      passport.use(strategy);\n      registeredStrategies.add(strategyName);\n    }\n  };\n\n  passport.serializeUser((user: any, cb) => {\n    // Serialize both Replit Auth (user with claims) and local auth (user object)\n    // Remove password if it exists\n    if (user.password) {\n      const { password: _, ...sanitizedUser } = user;\n      cb(null, sanitizedUser);\n    } else {\n      cb(null, user);\n    }\n  });\n  \n  passport.deserializeUser((user: any, cb) => {\n    // Deserialize both types of users\n    cb(null, user);\n  });\n\n  app.get(\"/api/login\", (req, res, next) => {\n    ensureStrategy(req.hostname);\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    ensureStrategy(req.hostname);\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  // For local auth users (no OIDC claims), just check if authenticated\n  if (!user.expires_at) {\n    // This is a local auth user (password-based), they're already authenticated\n    return next();\n  }\n\n  // For Replit Auth users, check token expiration\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":5187},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Zap } from \"lucide-react\";\n\nexport default function Login() {\n  const [isLogin, setIsLogin] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  const [formData, setFormData] = useState({\n    emailOrUsername: \"\",\n    email: \"\",\n    username: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      if (isLogin) {\n        // Login\n        const response = await apiRequest(\"POST\", \"/api/auth/local/login\", {\n          emailOrUsername: formData.emailOrUsername,\n          password: formData.password,\n        });\n\n        if (response.ok) {\n          window.location.href = \"/\";\n        } else {\n          const error = await response.json();\n          toast({\n            title: \"Login failed\",\n            description: error.message || \"Invalid credentials\",\n            variant: \"destructive\",\n          });\n        }\n      } else {\n        // Register\n        const response = await apiRequest(\"POST\", \"/api/auth/register\", {\n          email: formData.email,\n          username: formData.username,\n          password: formData.password,\n          firstName: formData.firstName,\n          lastName: formData.lastName,\n        });\n\n        if (response.ok) {\n          window.location.href = \"/\";\n        } else {\n          const error = await response.json();\n          toast({\n            title: \"Registration failed\",\n            description: error.message || \"Could not create account\",\n            variant: \"destructive\",\n          });\n        }\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-background via-background to-primary/5\">\n      <div className=\"w-full max-w-md space-y-6\">\n        <div className=\"text-center space-y-2\">\n          <div className=\"flex items-center justify-center gap-2 mb-4\">\n            <div className=\"h-12 w-12 rounded-full bg-primary flex items-center justify-center\">\n              <Zap className=\"h-6 w-6 text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-3xl font-bold\">2Mins Challenge</h1>\n          </div>\n          <p className=\"text-muted-foreground\">\n            Build better habits, one 2-minute challenge at a time\n          </p>\n        </div>\n\n        <Card data-testid=\"card-auth\">\n          <CardHeader>\n            <CardTitle data-testid=\"text-auth-title\">\n              {isLogin ? \"Welcome Back\" : \"Create Account\"}\n            </CardTitle>\n            <CardDescription data-testid=\"text-auth-description\">\n              {isLogin\n                ? \"Sign in to continue your wellness journey\"\n                : \"Start your wellness journey today\"}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              {isLogin ? (\n                <>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"emailOrUsername\">Email or Username</Label>\n                    <Input\n                      id=\"emailOrUsername\"\n                      data-testid=\"input-email-or-username\"\n                      type=\"text\"\n                      placeholder=\"Enter your email or username\"\n                      value={formData.emailOrUsername}\n                      onChange={(e) =>\n                        setFormData({ ...formData, emailOrUsername: e.target.value })\n                      }\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"password\">Password</Label>\n                    <Input\n                      id=\"password\"\n                      data-testid=\"input-password\"\n                      type=\"password\"\n                      placeholder=\"Enter your password\"\n                      value={formData.password}\n                      onChange={(e) =>\n                        setFormData({ ...formData, password: e.target.value })\n                      }\n                      required\n                    />\n                  </div>\n                </>\n              ) : (\n                <>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      <Input\n                        id=\"firstName\"\n                        data-testid=\"input-first-name\"\n                        type=\"text\"\n                        placeholder=\"John\"\n                        value={formData.firstName}\n                        onChange={(e) =>\n                          setFormData({ ...formData, firstName: e.target.value })\n                        }\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      <Input\n                        id=\"lastName\"\n                        data-testid=\"input-last-name\"\n                        type=\"text\"\n                        placeholder=\"Doe\"\n                        value={formData.lastName}\n                        onChange={(e) =>\n                          setFormData({ ...formData, lastName: e.target.value })\n                        }\n                      />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      data-testid=\"input-email\"\n                      type=\"email\"\n                      placeholder=\"john@example.com\"\n                      value={formData.email}\n                      onChange={(e) =>\n                        setFormData({ ...formData, email: e.target.value })\n                      }\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"username\">Username</Label>\n                    <Input\n                      id=\"username\"\n                      data-testid=\"input-username\"\n                      type=\"text\"\n                      placeholder=\"johndoe\"\n                      value={formData.username}\n                      onChange={(e) =>\n                        setFormData({ ...formData, username: e.target.value })\n                      }\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"registerPassword\">Password</Label>\n                    <Input\n                      id=\"registerPassword\"\n                      data-testid=\"input-register-password\"\n                      type=\"password\"\n                      placeholder=\"Create a password\"\n                      value={formData.password}\n                      onChange={(e) =>\n                        setFormData({ ...formData, password: e.target.value })\n                      }\n                      required\n                    />\n                  </div>\n                </>\n              )}\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loading}\n                data-testid=\"button-submit-auth\"\n              >\n                {loading\n                  ? \"Please wait...\"\n                  : isLogin\n                  ? \"Sign In\"\n                  : \"Create Account\"}\n              </Button>\n            </form>\n\n            <div className=\"mt-4 text-center\">\n              <button\n                type=\"button\"\n                onClick={() => setIsLogin(!isLogin)}\n                className=\"text-sm text-primary hover:underline\"\n                data-testid=\"button-toggle-auth-mode\"\n              >\n                {isLogin\n                  ? \"Don't have an account? Sign up\"\n                  : \"Already have an account? Sign in\"}\n              </button>\n            </div>\n\n            <div className=\"relative my-6\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-card px-2 text-muted-foreground\">Or</span>\n              </div>\n            </div>\n\n            <Button\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() => (window.location.href = \"/api/login\")}\n              data-testid=\"button-replit-auth\"\n            >\n              Continue with Replit\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9416},"mobile/src/screens/ChallengeDetailScreen.tsx":{"content":"import { View, Text, StyleSheet } from 'react-native';\nimport { RouteProp, useRoute } from '@react-navigation/native';\nimport { HomeStackParamList } from '../navigation/MainNavigator';\nimport { colors, typography } from '../constants/colors';\n\ntype ChallengeDetailRouteProp = RouteProp<HomeStackParamList, 'ChallengeDetail'>;\n\nexport default function ChallengeDetailScreen() {\n  const route = useRoute<ChallengeDetailRouteProp>();\n  const { id } = route.params;\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Challenge Detail</Text>\n      <Text style={styles.subtitle}>ID: {id}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: colors.background, padding: 20 },\n  title: { fontSize: typography.fontSize['3xl'], fontFamily: typography.fontFamily.heading, color: colors.foreground },\n  subtitle: { fontSize: typography.fontSize.base, color: colors.mutedForeground, marginTop: 8 },\n});\n","size_bytes":970},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/pages/History.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Clock, Award } from \"lucide-react\";\nimport type { ChallengeWithDetails } from \"@shared/schema\";\nimport { categoryConfig, difficultyConfig } from \"@/lib/categories\";\n\nexport default function History() {\n  // Fetch challenge history\n  const { data: history, isLoading } = useQuery<ChallengeWithDetails[]>({\n    queryKey: [\"/api/history\"],\n  });\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInDays = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));\n\n    if (diffInDays === 0) return \"Today\";\n    if (diffInDays === 1) return \"Yesterday\";\n    if (diffInDays < 7) return `${diffInDays} days ago`;\n    return date.toLocaleDateString();\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, \"0\")}`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border bg-card/30 backdrop-blur-sm sticky top-0 z-10\">\n        <div className=\"container max-w-4xl mx-auto px-4 py-4\">\n          <Button variant=\"ghost\" asChild data-testid=\"button-back\">\n            <Link href=\"/\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back\n            </Link>\n          </Button>\n        </div>\n      </header>\n\n      <main className=\"container max-w-4xl mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-3\" data-testid=\"heading-page\">Challenge History</h1>\n          <p className=\"text-muted-foreground text-lg\" data-testid=\"text-page-description\">\n            Review your completed challenges and achievements\n          </p>\n        </div>\n\n        {/* History Timeline */}\n        {isLoading ? (\n          <div className=\"text-center py-12 text-muted-foreground\" data-testid=\"loading-history\">\n            Loading history...\n          </div>\n        ) : !history || history.length === 0 ? (\n          <div className=\"text-center py-12\" data-testid=\"empty-state\">\n            <div className=\"w-20 h-20 rounded-full bg-muted/20 flex items-center justify-center mx-auto mb-4\">\n              <Clock className=\"h-10 w-10 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-foreground mb-2\" data-testid=\"text-empty-title\">\n              No History Yet\n            </h3>\n            <p className=\"text-muted-foreground max-w-md mx-auto mb-6\" data-testid=\"text-empty-description\">\n              Complete your first challenge to start building your history!\n            </p>\n            <Button asChild data-testid=\"button-start-first\">\n              <Link href=\"/\">Start a Challenge</Link>\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {history.map((item, index) => {\n              const category = categoryConfig[item.category as keyof typeof categoryConfig];\n              const difficulty = difficultyConfig[item.difficulty as keyof typeof difficultyConfig];\n              const Icon = category?.icon;\n\n              return (\n                <Card\n                  key={`${item.id}-${index}`}\n                  className=\"border-card-border hover-elevate transition-all\"\n                  data-testid={`card-history-${index}`}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start gap-4\">\n                      {Icon && (\n                        <div className=\"w-12 h-12 rounded-full bg-card flex items-center justify-center shrink-0\">\n                          <Icon className=\"h-6 w-6 text-foreground\" />\n                        </div>\n                      )}\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-start justify-between gap-4 mb-2\">\n                          <div className=\"flex-1 min-w-0\">\n                            <h3 className=\"font-semibold text-foreground truncate\" data-testid={`text-challenge-title-${index}`}>\n                              {item.title}\n                            </h3>\n                            <p className=\"text-sm text-muted-foreground\">{category?.label}</p>\n                          </div>\n                          <Badge variant=\"secondary\" className=\"shrink-0\">\n                            <span className={difficulty.color}>{difficulty.label}</span>\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground flex-wrap\">\n                          <div className=\"flex items-center gap-1\">\n                            <Clock className=\"h-4 w-4\" />\n                            <span data-testid={`text-date-${index}`}>{item.completedAt ? formatDate(item.completedAt) : \"Unknown\"}</span>\n                          </div>\n                          {item.timeSpent !== undefined && (\n                            <div className=\"flex items-center gap-1\">\n                              <span>Time:</span>\n                              <span className=\"font-medium text-foreground\" data-testid={`text-time-${index}`}>\n                                {formatTime(item.timeSpent)}\n                              </span>\n                            </div>\n                          )}\n                          <div className=\"flex items-center gap-1\">\n                            <Award className=\"h-4 w-4 text-primary\" />\n                            <span className=\"font-medium text-foreground\" data-testid={`text-points-${index}`}>\n                              {item.pointsEarned || item.points} points\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":6296},"mobile/src/constants/colors.ts":{"content":"// Dark-first color scheme matching web app\nexport const colors = {\n  background: '#0a0a0a',\n  foreground: '#fafafa',\n  card: '#1a1a1a',\n  cardForeground: '#fafafa',\n  primary: '#3b82f6',\n  primaryForeground: '#fafafa',\n  secondary: '#27272a',\n  secondaryForeground: '#fafafa',\n  muted: '#27272a',\n  mutedForeground: '#a1a1aa',\n  accent: '#27272a',\n  accentForeground: '#fafafa',\n  destructive: '#ef4444',\n  destructiveForeground: '#fafafa',\n  border: '#27272a',\n  input: '#27272a',\n  ring: '#3b82f6',\n  \n  // Category colors (matching web app)\n  categories: {\n    physical: '#3b82f6',\n    mental: '#8b5cf6',\n    learning: '#eab308',\n    finance: '#10b981',\n    relationships: '#ec4899',\n  },\n  \n  // Achievement tier colors\n  tiers: {\n    bronze: '#d97706',\n    silver: '#94a3b8',\n    gold: '#eab308',\n    platinum: '#06b6d4',\n  },\n};\n\nexport const typography = {\n  fontFamily: {\n    regular: 'Inter_400Regular',\n    medium: 'Inter_500Medium',\n    semibold: 'Inter_600SemiBold',\n    bold: 'Inter_700Bold',\n    heading: 'DMSans_700Bold',\n  },\n  fontSize: {\n    xs: 12,\n    sm: 14,\n    base: 16,\n    lg: 18,\n    xl: 20,\n    '2xl': 24,\n    '3xl': 30,\n    '4xl': 36,\n  },\n};\n","size_bytes":1172},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"mobile/PROGRESS.md":{"content":"# 2Mins Mobile App - İlerleme Raporu / Progress Report\n\n**Son Güncelleme / Last Updated:** 30 Ekim 2025 / October 30, 2025\n\n## 📊 Genel İlerleme / Overall Progress\n\n### ✅ Tamamlanan Görevler / Completed Tasks\n\n#### Task 6.1: Expo React Native Proje Kurulumu ✅\n**Durum / Status:** %100 Tamamlandı / Complete\n\n**Başarılanlar / Achievements:**\n- ✅ Tam Expo React Native proje yapısı kuruldu\n- ✅ `package.json` yapılandırıldı (React Native 0.76.5, React 19, Expo 52)\n- ✅ `app.json` - iOS/Android ayarları, izinler\n- ✅ Babel, TypeScript, Metro, Tailwind yapılandırmaları\n- ✅ React Navigation kurulumu (Stack + Bottom Tabs)\n- ✅ AuthContext - Kimlik doğrulama yönetimi\n- ✅ TanStack Query entegrasyonu\n- ✅ Dark-first renk paleti (web uygulamasıyla eşleşen)\n- ✅ Font yönetimi (Inter, DM Sans)\n- ✅ Landing, Login, Home ekranları (kısmi/tam)\n- ✅ Diğer ekranlar için placeholder'lar\n- ✅ Kapsamlı README (Türkçe + İngilizce)\n- ✅ Entry point düzeltildi (`node_modules/expo/AppEntry.js`)\n- ✅ Asset referansları kaldırıldı (proje çalıştırılabilir)\n\n**Architect Onayı:** ✅ Pass - Proje bootable, yapılandırma doğru\n\n---\n\n#### Task 6.2.1: Yeniden Kullanılabilir UI Bileşenleri ✅\n**Durum / Status:** %100 Tamamlandı / Complete\n\n**Oluşturulan Bileşenler / Created Components:**\n\n1. **Card Component** (`mobile/src/components/ui/Card.tsx`)\n   - `<Card>` - Ana kart bileşeni\n   - `<CardHeader>` - Kart başlığı\n   - `<CardContent>` - Kart içeriği\n   - Özelliker: elevation desteği, özelleştirilebilir stil\n   - Web uygulamasıyla eşleşen stil (dark card, border)\n\n2. **Button Component** (`mobile/src/components/ui/Button.tsx`)\n   - 5 Variant: primary, secondary, outline, ghost, destructive\n   - 3 Boyut: sm, default, lg\n   - Özellikler: disabled, loading states, custom styles\n   - testID desteği\n   - Web uygulamasıyla eşleşen renkler\n\n3. **Badge Component** (`mobile/src/components/ui/Badge.tsx`)\n   - 6 Variant: default, primary, secondary, success, warning, destructive\n   - Otomatik boyutlandırma\n   - Kategori renkleriyle entegrasyon\n\n4. **Avatar Component** (`mobile/src/components/ui/Avatar.tsx`)\n   - Image + fallback text desteği\n   - Özelleştirilebilir boyut\n   - Circular design\n\n5. **Loading Component** (`mobile/src/components/ui/Loading.tsx`)\n   - Spinner + optional text\n   - Full screen / inline modes\n   - Consistent branding\n\n**Kullanım / Usage:**\n```typescript\nimport { Card, CardContent, Button, Badge, Avatar, Loading } from '@/components/ui';\n```\n\n**HomeScreen Entegrasyonu:**\n- ✅ Card ve Badge bileşenleri entegre edildi\n- ✅ Loading component kullanıldı\n- ✅ Daha temiz, maintainable kod\n\n---\n\n### 🔨 Devam Eden Görevler / In Progress\n\n#### Task 6.2.2: Home Ekranı - Tam İmplementasyon\n**Durum / Status:** %70 Tamamlandı / Complete\n\n**Mevcut Özellikler / Current Features:**\n- ✅ Stats kartları (Total Completed, Streak, Points)\n- ✅ Random daily challenge card\n- ✅ API entegrasyonu (TanStack Query)\n- ✅ Loading states\n- ✅ Yeni UI bileşenleri kullanımı\n\n**Eksik Özellikler / Missing Features:**\n- ⏳ Pull-to-refresh\n- ⏳ Error states ve retry\n\n---\n\n### 📋 Bekleyen Görevler / Pending Tasks\n\n#### Task 6.2.3: Challenges Ekranı\n- Challenge listesi\n- Kategori filtreleri\n- Arama functionality\n- Challenge kartları (kategori renkleri, points)\n\n#### Task 6.2.4: Challenge Detail & Circular Timer\n- 2-dakika geri sayım timer (circular design)\n- Challenge tamamlama\n- İnstructions display\n- **Kritik:** Circular timer component (web'den adapte edilmeli)\n\n#### Task 6.2.5: Progress & History Ekranları\n- Progress dashboard\n- Streak visualization\n- History list (completed challenges)\n\n#### Task 6.2.6: Achievements Ekranı\n- Achievement grid\n- Tier badges (Bronze/Silver/Gold/Platinum)\n- Progress tracking\n- Lock/unlock states\n- Share functionality\n\n#### Task 6.2.7: Analytics Ekranı\n- **Challenge:** Recharts → React Native charts dönüşümü\n- Daily/weekly/monthly stats\n- Category distribution\n- Alternatif: react-native-chart-kit veya Victory Native\n\n#### Task 6.2.8: Friends Ekranı\n- Friends list\n- Pending requests (accept/decline)\n- Add friend form\n- Friend activity feed\n\n#### Task 6.2.9: My Challenges & Create Challenge\n- Custom challenge CRUD\n- Form inputs (React Native TextInput)\n- Category/difficulty pickers\n- Validation\n\n#### Task 6.2.10: More & ShareAchievement\n- More screen (navigation menü)\n- ShareAchievement public view\n\n---\n\n#### Task 6.3: Gelişmiş Navigasyon\n- Deep linking configuration\n- Navigation guards\n- Screen transitions\n- Gesture-based navigation\n\n#### Task 6.4: Native Özellikler\n- Camera permission & integration\n- Location permission & integration\n- Push notifications (Expo Notifications)\n- AsyncStorage (offline caching)\n- Native share dialog\n\n#### Task 6.5: API Optimizasyonu\n- Network error handling\n- Retry logic\n- Timeout handling\n- Slow connection optimization\n\n#### Task 6.6: Build & Deployment\n- EAS Build configuration\n- App icons (1024x1024 için iOS, mipmap için Android)\n- Splash screens\n- Bundle identifiers\n- Store metadata\n\n---\n\n## 🎯 Öncelikli Sonraki Adımlar / Priority Next Steps\n\n### 1. Circular Timer Component (Kritik)\nWeb uygulamasındaki 2-dakika timer'ı React Native'e adapte etmek:\n- `react-native-svg` ile circular progress\n- Countdown logic\n- Animasyonlar\n\n### 2. Challenges List & Detail\nEn sık kullanılan özellikler:\n- Challenge browsing\n- Challenge completion flow\n\n### 3. Charts Conversion\nAnalytics için chart library seçimi ve implementasyon:\n- Option 1: victory-native (recommended)\n- Option 2: react-native-chart-kit\n- Option 3: react-native-svg-charts\n\n### 4. Achievements System\nGamification özellikleri:\n- Badge visualization\n- Progress bars\n- Unlock animations\n\n---\n\n## 📦 Teknik Detaylar / Technical Details\n\n### Dependencies Installed\n```json\n{\n  \"expo\": \"~52.0.0\",\n  \"react\": \"19.0.0\",\n  \"react-native\": \"0.76.5\",\n  \"@react-navigation/native\": \"^7.0.13\",\n  \"@react-navigation/native-stack\": \"^7.2.2\",\n  \"@react-navigation/bottom-tabs\": \"^7.2.2\",\n  \"@tanstack/react-query\": \"^5.60.5\",\n  \"expo-font\": \"~13.0.1\",\n  \"@expo-google-fonts/inter\": \"^0.2.3\",\n  \"@expo-google-fonts/dm-sans\": \"^0.2.3\"\n}\n```\n\n### Proje Yapısı / Project Structure\n```\nmobile/\n├── App.tsx (✅ Complete)\n├── app.json (✅ Complete)\n├── src/\n│   ├── navigation/ (✅ Complete)\n│   ├── contexts/ (✅ Complete)\n│   ├── utils/ (✅ Complete)\n│   ├── constants/ (✅ Complete)\n│   ├── components/\n│   │   └── ui/ (✅ Complete - 5 components)\n│   └── screens/\n│       ├── LandingScreen.tsx (✅ Complete)\n│       ├── LoginScreen.tsx (✅ Complete)\n│       ├── HomeScreen.tsx (🔨 70% Complete)\n│       └── [others] (📋 Placeholders)\n└── README.md (✅ Complete)\n```\n\n---\n\n## 🚀 Çalıştırma Talimatları / Running Instructions\n\n### İlk Kurulum / First Time Setup\n```bash\ncd mobile\nnpm install\nnpm start\n```\n\n### Cihazda Test / Testing on Device\n1. **Expo Go** uygulamasını iOS/Android'de açın\n2. QR kodu tarayın\n3. Uygulama cihazınızda açılacak\n\n### Bilinen Sorunlar / Known Issues\n- ⚠️ LSP errors (package installation'dan sonra düzelecek)\n- ⚠️ Placeholder screens (Task 6.2'de tamamlanacak)\n- ⚠️ Assets eksik (Task 6.6'da eklenecek)\n\n---\n\n## 📈 İlerleme Metrikleri / Progress Metrics\n\n| Kategori | Tamamlanan | Toplam | %  |\n|----------|------------|--------|-----|\n| **Project Setup** | 1/1 | 1 | 100% |\n| **UI Components** | 5/5 | 5 | 100% |\n| **Screens (Full)** | 2/15 | 15 | 13% |\n| **Screens (Partial)** | 3/15 | 15 | 20% |\n| **Navigation** | 1/1 | 1 | 100% |\n| **Overall** | - | - | **~40%** |\n\n---\n\n## 💡 Notlar / Notes\n\n1. **Mimari Kararlar:**\n   - Separate `mobile/` directory (React version conflict çözümü)\n   - Shared backend API (no changes needed)\n   - Reusable UI components (consistency)\n   - Dark-first design preserved\n\n2. **Performans:**\n   - Font pre-loading implemented\n   - Image optimization needed\n   - List virtualization (FlatList) for long lists\n\n3. **Testing Strategy:**\n   - Manual testing on Expo Go\n   - Future: E2E tests with Detox\n   - Future: Unit tests with Jest\n\n---\n\n## 🎨 Design System Status\n\n✅ **Implemented:**\n- Color palette (dark-first)\n- Typography (Inter + DM Sans)\n- Component library (Card, Button, Badge, Avatar, Loading)\n- Spacing system\n- Border radius standards\n\n📋 **To Do:**\n- Form components (TextInput, Select, Checkbox)\n- Chart components\n- Timer component\n- Achievement badge designs\n- Animation system\n\n---\n\n**Hazırlayan / Prepared by:** Replit Agent  \n**Tarih / Date:** 30 Ekim 2025 / October 30, 2025\n","size_bytes":8738},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"mobile/metro.config.js":{"content":"const { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\n// Add support for shared folder\nconfig.watchFolders = [__dirname, __dirname + '/../shared'];\n\n// Add additional file extensions\nconfig.resolver.sourceExts.push('cjs');\n\nmodule.exports = config;\n","size_bytes":300},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"mobile/src/components/ui/Loading.tsx":{"content":"import { View, ActivityIndicator, Text, StyleSheet } from 'react-native';\nimport { colors, typography } from '@/constants/colors';\n\ninterface LoadingProps {\n  text?: string;\n  fullScreen?: boolean;\n}\n\nexport function Loading({ text, fullScreen = true }: LoadingProps) {\n  return (\n    <View style={[styles.container, fullScreen && styles.fullScreen]}>\n      <ActivityIndicator size=\"large\" color={colors.primary} />\n      {text && <Text style={styles.text}>{text}</Text>}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 24,\n  },\n  fullScreen: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  text: {\n    marginTop: 16,\n    fontSize: typography.fontSize.base,\n    fontFamily: typography.fontFamily.regular,\n    color: colors.mutedForeground,\n  },\n});\n","size_bytes":854},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 0 0% 12%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 0 0% 12%;\n\n  --card-border: 0 0% 90%;\n\n  --sidebar: 0 0% 94%;\n\n  --sidebar-foreground: 0 0% 12%;\n\n  --sidebar-border: 0 0% 86%;\n\n  --sidebar-primary: 210 100% 56%;\n\n  --sidebar-primary-foreground: 210 100% 98%;\n\n  --sidebar-accent: 210 8% 88%;\n\n  --sidebar-accent-foreground: 210 8% 18%;\n\n  --sidebar-ring: 210 100% 56%;\n\n  --popover: 0 0% 92%;\n\n  --popover-foreground: 0 0% 12%;\n\n  --popover-border: 0 0% 84%;\n\n  --primary: 210 100% 56%;\n\n  --primary-foreground: 210 100% 98%;\n\n  --secondary: 0 0% 86%;\n\n  --secondary-foreground: 0 0% 14%;\n\n  --muted: 260 6% 90%;\n\n  --muted-foreground: 260 6% 28%;\n\n  --accent: 260 12% 88%;\n\n  --accent-foreground: 260 12% 18%;\n\n  --destructive: 0 72% 35%;\n\n  --destructive-foreground: 0 72% 98%;\n\n  --input: 0 0% 72%;\n  --ring: 210 100% 56%;\n  --chart-1: 210 100% 56%;\n  --chart-2: 340 75% 55%;\n  --chart-3: 160 60% 50%;\n  --chart-4: 30 90% 55%;\n  --chart-5: 280 65% 60%;\n\n  --font-sans: Inter, system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'SF Mono', Menlo, Monaco, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.06), 0px 1px 2px -1px hsl(0 0% 0% / 0.06);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.08), 0px 2px 4px -2px hsl(0 0% 0% / 0.06);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.10), 0px 3px 6px -3px hsl(0 0% 0% / 0.08);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.12), 0px 4px 8px -4px hsl(0 0% 0% / 0.08);\n  --shadow-xl: 0px 20px 30px -6px hsl(0 0% 0% / 0.14), 0px 8px 12px -6px hsl(0 0% 0% / 0.10);\n  --shadow-2xl: 0px 25px 40px -8px hsl(0 0% 0% / 0.16);\n  --tracking-normal: -0.01em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 0 0% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 0 0% 18%;\n\n  --card: 0 0% 10%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 0 0% 16%;\n\n  --sidebar: 0 0% 12%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 0 0% 20%;\n\n  --sidebar-primary: 210 100% 56%;\n\n  --sidebar-primary-foreground: 0 0% 8%;\n\n  --sidebar-accent: 210 8% 18%;\n\n  --sidebar-accent-foreground: 210 8% 92%;\n\n  --sidebar-ring: 210 100% 56%;\n\n  --popover: 0 0% 14%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 0 0% 22%;\n\n  --primary: 210 100% 56%;\n\n  --primary-foreground: 0 0% 8%;\n\n  --secondary: 0 0% 20%;\n\n  --secondary-foreground: 0 0% 92%;\n\n  --muted: 260 6% 16%;\n\n  --muted-foreground: 260 6% 78%;\n\n  --accent: 260 12% 18%;\n\n  --accent-foreground: 260 12% 90%;\n\n  --destructive: 0 72% 32%;\n\n  --destructive-foreground: 0 72% 98%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 0 0% 32%;\n  --ring: 210 100% 56%;\n  --chart-1: 210 100% 56%;\n  --chart-2: 340 75% 55%;\n  --chart-3: 160 60% 50%;\n  --chart-4: 30 90% 55%;\n  --chart-5: 280 65% 60%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.40);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.50);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.45), 0px 1px 2px -1px hsl(0 0% 0% / 0.40);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.50), 0px 2px 4px -2px hsl(0 0% 0% / 0.45);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.55), 0px 3px 6px -3px hsl(0 0% 0% / 0.50);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.60), 0px 4px 8px -4px hsl(0 0% 0% / 0.55);\n  --shadow-xl: 0px 20px 30px -6px hsl(0 0% 0% / 0.65), 0px 8px 12px -6px hsl(0 0% 0% / 0.60);\n  --shadow-2xl: 0px 25px 40px -8px hsl(0 0% 0% / 0.70);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9933},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/pages/Analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { TrendingUp, Calendar, PieChart as PieChartIcon, Activity } from \"lucide-react\";\nimport { categoryConfig } from \"@/lib/categories\";\n\nconst CATEGORY_COLORS = {\n  physical: \"#ef4444\",\n  mental: \"#3b82f6\",\n  learning: \"#8b5cf6\",\n  finance: \"#10b981\",\n  relationships: \"#ec4899\",\n};\n\nexport default function Analytics() {\n  const { data: dailyStats, isLoading: dailyLoading } = useQuery<Array<{ date: string; count: number; points: number }>>({\n    queryKey: [\"/api/analytics/daily?days=30\"],\n  });\n\n  const { data: categoryDistribution, isLoading: categoryLoading } = useQuery<Array<{ category: string; count: number; percentage: number }>>({\n    queryKey: [\"/api/analytics/category\"],\n  });\n\n  const { data: weeklyTrend, isLoading: weeklyLoading } = useQuery<Array<{ week: string; count: number; points: number }>>({\n    queryKey: [\"/api/analytics/weekly\"],\n  });\n\n  const { data: monthlyTrend, isLoading: monthlyLoading } = useQuery<Array<{ month: string; count: number; points: number }>>({\n    queryKey: [\"/api/analytics/monthly\"],\n  });\n\n  const isLoading = dailyLoading || categoryLoading || weeklyLoading || monthlyLoading;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-4\">\n        <div className=\"max-w-6xl mx-auto space-y-6\">\n          <div className=\"text-center\">\n            <div className=\"h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto\" />\n            <p className=\"text-muted-foreground mt-4\">Loading analytics...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Format daily data for display\n  const formattedDailyData = dailyStats?.map(stat => ({\n    ...stat,\n    displayDate: new Date(stat.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n  })) || [];\n\n  // Format category data for pie chart\n  const categoryChartData = categoryDistribution?.map(item => ({\n    name: categoryConfig[item.category as keyof typeof categoryConfig]?.label || item.category,\n    value: item.count,\n    percentage: item.percentage,\n    color: CATEGORY_COLORS[item.category as keyof typeof CATEGORY_COLORS] || '#6b7280',\n  })) || [];\n\n  // Format weekly data\n  const formattedWeeklyData = weeklyTrend?.map(stat => ({\n    ...stat,\n    displayWeek: new Date(stat.week).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n  })) || [];\n\n  // Format monthly data\n  const formattedMonthlyData = monthlyTrend?.map(stat => ({\n    ...stat,\n    displayMonth: new Date(stat.month + '-01').toLocaleDateString('en-US', { month: 'short', year: 'numeric' }),\n  })) || [];\n\n  const totalChallenges = categoryDistribution?.reduce((sum, item) => sum + item.count, 0) || 0;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-6xl mx-auto p-4 md:p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"space-y-2\">\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-analytics-title\">\n            Analytics\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Track your progress and insights over time\n          </p>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Challenges</CardTitle>\n              <Activity className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-total-challenges\">{totalChallenges}</div>\n              <p className=\"text-xs text-muted-foreground\">Completed challenges</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Last 30 Days</CardTitle>\n              <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-last-30-days\">\n                {formattedDailyData.reduce((sum, stat) => sum + stat.count, 0)}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Challenges completed</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Categories</CardTitle>\n              <PieChartIcon className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-active-categories\">\n                {categoryChartData.length}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Categories explored</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Charts Tabs */}\n        <Tabs defaultValue=\"daily\" className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"daily\" data-testid=\"tab-daily\">Daily</TabsTrigger>\n            <TabsTrigger value=\"trends\" data-testid=\"tab-trends\">Trends</TabsTrigger>\n            <TabsTrigger value=\"categories\" data-testid=\"tab-categories\">Categories</TabsTrigger>\n          </TabsList>\n\n          {/* Daily Activity Chart */}\n          <TabsContent value=\"daily\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Daily Activity (Last 30 Days)</CardTitle>\n                <CardDescription>Number of challenges completed each day</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {formattedDailyData.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={formattedDailyData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                      <XAxis \n                        dataKey=\"displayDate\" \n                        className=\"text-xs\"\n                        tick={{ fill: 'hsl(var(--muted-foreground))' }}\n                      />\n                      <YAxis \n                        className=\"text-xs\"\n                        tick={{ fill: 'hsl(var(--muted-foreground))' }}\n                      />\n                      <Tooltip \n                        contentStyle={{\n                          backgroundColor: 'hsl(var(--card))',\n                          border: '1px solid hsl(var(--border))',\n                          borderRadius: '8px',\n                        }}\n                      />\n                      <Bar dataKey=\"count\" fill=\"hsl(var(--primary))\" name=\"Challenges\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"h-[300px] flex items-center justify-center text-muted-foreground\">\n                    No data available for the last 30 days\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Points Earned (Last 30 Days)</CardTitle>\n                <CardDescription>Points accumulated each day</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {formattedDailyData.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <LineChart data={formattedDailyData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                      <XAxis \n                        dataKey=\"displayDate\" \n                        className=\"text-xs\"\n                        tick={{ fill: 'hsl(var(--muted-foreground))' }}\n                      />\n                      <YAxis \n                        className=\"text-xs\"\n                        tick={{ fill: 'hsl(var(--muted-foreground))' }}\n                      />\n                      <Tooltip \n                        contentStyle={{\n                          backgroundColor: 'hsl(var(--card))',\n                          border: '1px solid hsl(var(--border))',\n                          borderRadius: '8px',\n                        }}\n                      />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"points\" \n                        stroke=\"hsl(var(--primary))\" \n                        strokeWidth={2}\n                        name=\"Points\"\n                      />\n                    </LineChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"h-[300px] flex items-center justify-center text-muted-foreground\">\n                    No data available for the last 30 days\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Trends Chart */}\n          <TabsContent value=\"trends\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Weekly Trend</CardTitle>\n                <CardDescription>Challenge completion over the last 12 weeks</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {formattedWeeklyData.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <LineChart data={formattedWeeklyData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                      <XAxis \n                        dataKey=\"displayWeek\" \n                        className=\"text-xs\"\n                        tick={{ fill: 'hsl(var(--muted-foreground))' }}\n                      />\n                      <YAxis \n                        className=\"text-xs\"\n                        tick={{ fill: 'hsl(var(--muted-foreground))' }}\n                      />\n                      <Tooltip \n                        contentStyle={{\n                          backgroundColor: 'hsl(var(--card))',\n                          border: '1px solid hsl(var(--border))',\n                          borderRadius: '8px',\n                        }}\n                      />\n                      <Legend />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"count\" \n                        stroke=\"hsl(var(--primary))\" \n                        strokeWidth={2}\n                        name=\"Challenges\"\n                      />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"points\" \n                        stroke=\"hsl(var(--chart-2))\" \n                        strokeWidth={2}\n                        name=\"Points\"\n                      />\n                    </LineChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"h-[300px] flex items-center justify-center text-muted-foreground\">\n                    No weekly data available\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Monthly Trend</CardTitle>\n                <CardDescription>Challenge completion over the last 12 months</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {formattedMonthlyData.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={formattedMonthlyData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                      <XAxis \n                        dataKey=\"displayMonth\" \n                        className=\"text-xs\"\n                        tick={{ fill: 'hsl(var(--muted-foreground))' }}\n                      />\n                      <YAxis \n                        className=\"text-xs\"\n                        tick={{ fill: 'hsl(var(--muted-foreground))' }}\n                      />\n                      <Tooltip \n                        contentStyle={{\n                          backgroundColor: 'hsl(var(--card))',\n                          border: '1px solid hsl(var(--border))',\n                          borderRadius: '8px',\n                        }}\n                      />\n                      <Legend />\n                      <Bar dataKey=\"count\" fill=\"hsl(var(--primary))\" name=\"Challenges\" />\n                      <Bar dataKey=\"points\" fill=\"hsl(var(--chart-2))\" name=\"Points\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"h-[300px] flex items-center justify-center text-muted-foreground\">\n                    No monthly data available\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Category Distribution */}\n          <TabsContent value=\"categories\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Category Distribution</CardTitle>\n                <CardDescription>Breakdown of challenges by category</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {categoryChartData.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <PieChart>\n                        <Pie\n                          data={categoryChartData}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          labelLine={false}\n                          label={({ name, percentage }) => `${name} (${percentage}%)`}\n                          outerRadius={100}\n                          fill=\"#8884d8\"\n                          dataKey=\"value\"\n                        >\n                          {categoryChartData.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={entry.color} />\n                          ))}\n                        </Pie>\n                        <Tooltip \n                          contentStyle={{\n                            backgroundColor: 'hsl(var(--card))',\n                            border: '1px solid hsl(var(--border))',\n                            borderRadius: '8px',\n                          }}\n                        />\n                      </PieChart>\n                    </ResponsiveContainer>\n\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium text-sm text-muted-foreground\">Category Breakdown</h4>\n                      {categoryChartData.map((item, index) => (\n                        <div key={index} className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            <div \n                              className=\"w-3 h-3 rounded-full\" \n                              style={{ backgroundColor: item.color }}\n                            />\n                            <span className=\"text-sm\">{item.name}</span>\n                          </div>\n                          <div className=\"flex items-center gap-4\">\n                            <span className=\"text-sm font-medium\">{item.value}</span>\n                            <span className=\"text-sm text-muted-foreground w-12 text-right\">\n                              {item.percentage}%\n                            </span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"h-[300px] flex items-center justify-center text-muted-foreground\">\n                    No category data available. Complete some challenges to see your distribution!\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16597},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/StatCard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  description?: string;\n  trend?: {\n    value: number;\n    label: string;\n  };\n}\n\nexport function StatCard({ title, value, icon: Icon, description, trend }: StatCardProps) {\n  return (\n    <Card className=\"border-card-border\" data-testid={`card-stat-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2 gap-2\">\n        <CardTitle className=\"text-sm font-medium text-muted-foreground\">{title}</CardTitle>\n        <Icon className=\"h-5 w-5 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-3xl font-bold text-foreground\" data-testid={`text-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n          {value}\n        </div>\n        {description && (\n          <p className=\"text-xs text-muted-foreground mt-1\">{description}</p>\n        )}\n        {trend && (\n          <div className=\"flex items-center gap-1 mt-2\">\n            <span className={`text-xs font-medium ${trend.value >= 0 ? 'text-chart-3' : 'text-chart-2'}`}>\n              {trend.value >= 0 ? '+' : ''}{trend.value}\n            </span>\n            <span className=\"text-xs text-muted-foreground\">{trend.label}</span>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1482},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"mobile/src/screens/LoginScreen.tsx":{"content":"import { useState } from 'react';\nimport { View, Text, TextInput, StyleSheet, TouchableOpacity, Alert, ActivityIndicator } from 'react-native';\nimport { useAuth } from '../contexts/AuthContext';\nimport { colors, typography } from '../constants/colors';\n\nexport default function LoginScreen() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n\n  const handleLogin = async () => {\n    if (!email || !password) {\n      Alert.alert('Error', 'Please enter email and password');\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      await login(email, password);\n    } catch (error) {\n      Alert.alert('Login Failed', error instanceof Error ? error.message : 'Invalid credentials');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.content}>\n        <Text style={styles.title}>Welcome Back</Text>\n        <Text style={styles.subtitle}>Sign in to continue</Text>\n\n        <View style={styles.form}>\n          <View style={styles.inputGroup}>\n            <Text style={styles.label}>Email</Text>\n            <TextInput\n              style={styles.input}\n              value={email}\n              onChangeText={setEmail}\n              placeholder=\"Enter your email\"\n              placeholderTextColor={colors.mutedForeground}\n              keyboardType=\"email-address\"\n              autoCapitalize=\"none\"\n              autoComplete=\"email\"\n            />\n          </View>\n\n          <View style={styles.inputGroup}>\n            <Text style={styles.label}>Password</Text>\n            <TextInput\n              style={styles.input}\n              value={password}\n              onChangeText={setPassword}\n              placeholder=\"Enter your password\"\n              placeholderTextColor={colors.mutedForeground}\n              secureTextEntry\n              autoComplete=\"password\"\n            />\n          </View>\n\n          <TouchableOpacity\n            style={[styles.button, isLoading && styles.buttonDisabled]}\n            onPress={handleLogin}\n            disabled={isLoading}\n          >\n            {isLoading ? (\n              <ActivityIndicator color={colors.primaryForeground} />\n            ) : (\n              <Text style={styles.buttonText}>Sign In</Text>\n            )}\n          </TouchableOpacity>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  content: {\n    flex: 1,\n    padding: 24,\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: typography.fontSize['3xl'],\n    fontFamily: typography.fontFamily.heading,\n    color: colors.foreground,\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: typography.fontSize.base,\n    fontFamily: typography.fontFamily.regular,\n    color: colors.mutedForeground,\n    marginBottom: 32,\n  },\n  form: {\n    gap: 20,\n  },\n  inputGroup: {\n    gap: 8,\n  },\n  label: {\n    fontSize: typography.fontSize.sm,\n    fontFamily: typography.fontFamily.medium,\n    color: colors.foreground,\n  },\n  input: {\n    backgroundColor: colors.card,\n    borderWidth: 1,\n    borderColor: colors.border,\n    borderRadius: 12,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: typography.fontSize.base,\n    fontFamily: typography.fontFamily.regular,\n    color: colors.foreground,\n  },\n  button: {\n    backgroundColor: colors.primary,\n    paddingVertical: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    marginTop: 12,\n  },\n  buttonDisabled: {\n    opacity: 0.6,\n  },\n  buttonText: {\n    color: colors.primaryForeground,\n    fontSize: typography.fontSize.base,\n    fontFamily: typography.fontFamily.semibold,\n  },\n});\n","size_bytes":3792},"mobile/src/components/ui/Card.tsx":{"content":"import { type ReactNode } from 'react';\nimport { View, StyleSheet, type StyleProp, type ViewStyle } from 'react-native';\nimport { colors } from '@/constants/colors';\n\ninterface CardProps {\n  children: ReactNode;\n  style?: StyleProp<ViewStyle>;\n  elevated?: boolean;\n}\n\nexport function Card({ children, style, elevated = false }: CardProps) {\n  return (\n    <View style={[styles.card, elevated && styles.elevated, style]}>\n      {children}\n    </View>\n  );\n}\n\ninterface CardHeaderProps {\n  children: ReactNode;\n  style?: StyleProp<ViewStyle>;\n}\n\nexport function CardHeader({ children, style }: CardHeaderProps) {\n  return <View style={[styles.cardHeader, style]}>{children}</View>;\n}\n\ninterface CardContentProps {\n  children: ReactNode;\n  style?: StyleProp<ViewStyle>;\n}\n\nexport function CardContent({ children, style }: CardContentProps) {\n  return <View style={[styles.cardContent, style]}>{children}</View>;\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: colors.card,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: colors.border,\n    overflow: 'hidden',\n  },\n  elevated: {\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  cardHeader: {\n    paddingHorizontal: 16,\n    paddingTop: 16,\n    paddingBottom: 8,\n  },\n  cardContent: {\n    padding: 16,\n  },\n});\n","size_bytes":1378},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"mobile/src/screens/HomeScreen.tsx":{"content":"import { View, Text, StyleSheet, ScrollView, TouchableOpacity } from 'react-native';\nimport { useQuery } from '@tanstack/react-query';\nimport { useNavigation } from '@react-navigation/native';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { HomeStackParamList } from '../navigation/MainNavigator';\nimport { colors, typography } from '../constants/colors';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Card, CardContent, Loading, Badge } from '@/components/ui';\n\ntype NavigationProp = NativeStackNavigationProp<HomeStackParamList, 'Home'>;\n\nexport default function HomeScreen() {\n  const navigation = useNavigation<NavigationProp>();\n  \n  const { data: randomChallenge, isLoading } = useQuery({\n    queryKey: ['/api/challenges/random'],\n  });\n\n  const { data: progress } = useQuery({\n    queryKey: ['/api/progress'],\n  });\n\n  return (\n    <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>\n      <View style={styles.header}>\n        <Text style={styles.title}>2Mins Challenge</Text>\n        <Text style={styles.subtitle}>Your daily 2-minute habits</Text>\n      </View>\n\n      {progress && (\n        <View style={styles.statsContainer}>\n          <View style={styles.statCard}>\n            <Text style={styles.statValue}>{progress.totalChallengesCompleted}</Text>\n            <Text style={styles.statLabel}>Completed</Text>\n          </View>\n          <View style={styles.statCard}>\n            <Text style={[styles.statValue, { color: colors.primary }]}>{progress.currentStreak}</Text>\n            <Text style={styles.statLabel}>Streak</Text>\n          </View>\n          <View style={styles.statCard}>\n            <Text style={[styles.statValue, { color: colors.categories.learning }]}>{progress.totalPoints}</Text>\n            <Text style={styles.statLabel}>Points</Text>\n          </View>\n        </View>\n      )}\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Today's Challenge</Text>\n        {isLoading ? (\n          <Loading text=\"Loading challenge...\" fullScreen={false} />\n        ) : randomChallenge ? (\n          <TouchableOpacity\n            onPress={() => navigation.navigate('ChallengeDetail', { id: randomChallenge.id })}\n          >\n            <Card>\n              <CardContent>\n                <View style={styles.challengeHeader}>\n                  <Badge variant=\"primary\">{randomChallenge.category}</Badge>\n                  <View style={styles.pointsBadge}>\n                    <Ionicons name=\"flash\" size={16} color={colors.categories.learning} />\n                    <Text style={styles.pointsText}>{randomChallenge.points}</Text>\n                  </View>\n                </View>\n                <Text style={styles.challengeTitle}>{randomChallenge.title}</Text>\n                <Text style={styles.challengeDescription} numberOfLines={2}>\n                  {randomChallenge.description}\n                </Text>\n              </CardContent>\n            </Card>\n          </TouchableOpacity>\n        ) : null}\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  contentContainer: {\n    padding: 20,\n  },\n  header: {\n    marginBottom: 24,\n  },\n  title: {\n    fontSize: typography.fontSize['3xl'],\n    fontFamily: typography.fontFamily.heading,\n    color: colors.foreground,\n    marginBottom: 4,\n  },\n  subtitle: {\n    fontSize: typography.fontSize.base,\n    fontFamily: typography.fontFamily.regular,\n    color: colors.mutedForeground,\n  },\n  statsContainer: {\n    flexDirection: 'row',\n    gap: 12,\n    marginBottom: 24,\n  },\n  statCard: {\n    flex: 1,\n    backgroundColor: colors.card,\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: colors.border,\n  },\n  statValue: {\n    fontSize: typography.fontSize['2xl'],\n    fontFamily: typography.fontFamily.bold,\n    color: colors.foreground,\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: typography.fontSize.sm,\n    fontFamily: typography.fontFamily.regular,\n    color: colors.mutedForeground,\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: typography.fontSize.xl,\n    fontFamily: typography.fontFamily.semibold,\n    color: colors.foreground,\n    marginBottom: 12,\n  },\n  challengeHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  pointsBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n    backgroundColor: colors.secondary,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 8,\n  },\n  pointsText: {\n    fontSize: typography.fontSize.sm,\n    fontFamily: typography.fontFamily.medium,\n    color: colors.categories.learning,\n  },\n  challengeTitle: {\n    fontSize: typography.fontSize.lg,\n    fontFamily: typography.fontFamily.semibold,\n    color: colors.foreground,\n    marginBottom: 4,\n  },\n  challengeDescription: {\n    fontSize: typography.fontSize.sm,\n    fontFamily: typography.fontFamily.regular,\n    color: colors.mutedForeground,\n  },\n});\n","size_bytes":5135},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"mobile/src/navigation/RootNavigator.tsx":{"content":"import { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useAuth } from '../contexts/AuthContext';\nimport { View, ActivityIndicator } from 'react-native';\nimport { colors } from '../constants/colors';\n\n// Auth screens\nimport LandingScreen from '../screens/LandingScreen';\nimport LoginScreen from '../screens/LoginScreen';\n\n// Main app navigator\nimport MainNavigator from './MainNavigator';\n\nexport type RootStackParamList = {\n  Landing: undefined;\n  Login: undefined;\n  Main: undefined;\n  ShareAchievement: { id: string };\n};\n\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nexport default function RootNavigator() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: colors.background }}>\n        <ActivityIndicator size=\"large\" color={colors.primary} />\n      </View>\n    );\n  }\n\n  return (\n    <NavigationContainer\n      theme={{\n        dark: true,\n        colors: {\n          primary: colors.primary,\n          background: colors.background,\n          card: colors.card,\n          text: colors.foreground,\n          border: colors.border,\n          notification: colors.primary,\n        },\n      }}\n    >\n      <Stack.Navigator\n        screenOptions={{\n          headerShown: false,\n          contentStyle: { backgroundColor: colors.background },\n        }}\n      >\n        {!isAuthenticated ? (\n          <>\n            <Stack.Screen name=\"Landing\" component={LandingScreen} />\n            <Stack.Screen name=\"Login\" component={LoginScreen} />\n          </>\n        ) : (\n          <Stack.Screen name=\"Main\" component={MainNavigator} />\n        )}\n        {/* Public routes */}\n        <Stack.Screen\n          name=\"ShareAchievement\"\n          component={require('../screens/ShareAchievementScreen').default}\n          options={{ headerShown: true, title: 'Shared Achievement' }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n","size_bytes":2095},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/lib/categories.tsx":{"content":"import { Activity, Brain, BookOpen, DollarSign, Heart } from \"lucide-react\";\nimport type { ChallengeCategory } from \"@shared/schema\";\n\nexport const categoryConfig: Record<\n  ChallengeCategory,\n  {\n    label: string;\n    icon: typeof Activity;\n    description: string;\n    gradient: string;\n  }\n> = {\n  physical: {\n    label: \"Physical\",\n    icon: Activity,\n    description: \"Move your body and boost energy\",\n    gradient: \"from-chart-2/20 to-chart-2/5\",\n  },\n  mental: {\n    label: \"Mental\",\n    icon: Brain,\n    description: \"Clear your mind and find focus\",\n    gradient: \"from-chart-5/20 to-chart-5/5\",\n  },\n  learning: {\n    label: \"Learning\",\n    icon: BookOpen,\n    description: \"Discover something new\",\n    gradient: \"from-chart-3/20 to-chart-3/5\",\n  },\n  finance: {\n    label: \"Finance\",\n    icon: DollarSign,\n    description: \"Build better money habits\",\n    gradient: \"from-chart-4/20 to-chart-4/5\",\n  },\n  relationships: {\n    label: \"Relationships\",\n    icon: Heart,\n    description: \"Strengthen your connections\",\n    gradient: \"from-primary/20 to-primary/5\",\n  },\n};\n\nexport const difficultyConfig = {\n  easy: {\n    label: \"Easy\",\n    points: 10,\n    color: \"text-chart-3\",\n  },\n  medium: {\n    label: \"Medium\",\n    points: 20,\n    color: \"text-chart-4\",\n  },\n  hard: {\n    label: \"Hard\",\n    points: 30,\n    color: \"text-chart-2\",\n  },\n};\n","size_bytes":1356},"client/src/pages/Notifications.tsx":{"content":"import { Bell, Check, Clock, Info } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\n\ntype Notification = {\n  id: string;\n  type: \"info\" | \"success\" | \"reminder\";\n  title: string;\n  message: string;\n  timestamp: string;\n  read: boolean;\n};\n\nconst mockNotifications: Notification[] = [\n  {\n    id: \"1\",\n    type: \"success\",\n    title: \"Challenge Completed!\",\n    message: \"You completed '5-minute meditation' and earned 10 points\",\n    timestamp: \"2 hours ago\",\n    read: false,\n  },\n  {\n    id: \"2\",\n    type: \"reminder\",\n    title: \"Daily Challenge Reminder\",\n    message: \"Don't forget to complete your daily challenge today!\",\n    timestamp: \"5 hours ago\",\n    read: false,\n  },\n  {\n    id: \"3\",\n    type: \"info\",\n    title: \"New Achievement Unlocked\",\n    message: \"You've unlocked the 'First Steps' achievement\",\n    timestamp: \"1 day ago\",\n    read: true,\n  },\n  {\n    id: \"4\",\n    type: \"success\",\n    title: \"Streak Milestone!\",\n    message: \"Congratulations! You've maintained a 7-day streak\",\n    timestamp: \"2 days ago\",\n    read: true,\n  },\n];\n\nconst getNotificationIcon = (type: Notification[\"type\"]) => {\n  switch (type) {\n    case \"success\":\n      return <Check className=\"h-5 w-5 text-green-500\" />;\n    case \"reminder\":\n      return <Clock className=\"h-5 w-5 text-blue-500\" />;\n    case \"info\":\n      return <Info className=\"h-5 w-5 text-yellow-500\" />;\n  }\n};\n\nexport default function NotificationsPage() {\n  const unreadCount = mockNotifications.filter((n) => !n.read).length;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container max-w-4xl mx-auto px-4 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-12 h-12 rounded-full bg-primary flex items-center justify-center\">\n              <Bell className=\"h-6 w-6 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\">Notifications</h1>\n              <p className=\"text-muted-foreground\">\n                {unreadCount > 0\n                  ? `You have ${unreadCount} unread notification${unreadCount !== 1 ? \"s\" : \"\"}`\n                  : \"All caught up!\"}\n              </p>\n            </div>\n          </div>\n          {unreadCount > 0 && (\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-mark-all-read\">\n              Mark all as read\n            </Button>\n          )}\n        </div>\n\n        <Card className=\"bg-card/30 border-border rounded-2xl\" data-testid=\"card-notifications\">\n          <CardHeader>\n            <CardTitle className=\"text-foreground\">Recent Activity</CardTitle>\n            <CardDescription className=\"text-muted-foreground\">\n              Stay updated with your wellness journey\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-1\">\n            {mockNotifications.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Bell className=\"h-12 w-12 mx-auto text-muted-foreground/50 mb-4\" />\n                <p className=\"text-muted-foreground\">No notifications yet</p>\n              </div>\n            ) : (\n              mockNotifications.map((notification, index) => (\n                <div key={notification.id}>\n                  <div\n                    className={`flex items-start gap-4 p-4 rounded-lg hover:bg-accent/50 transition-colors ${\n                      !notification.read ? \"bg-accent/30\" : \"\"\n                    }`}\n                    data-testid={`notification-${notification.id}`}\n                  >\n                    <div className=\"mt-1\">{getNotificationIcon(notification.type)}</div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <h3 className=\"font-semibold text-foreground\">\n                          {notification.title}\n                        </h3>\n                        {!notification.read && (\n                          <Badge variant=\"default\" className=\"text-xs\">\n                            New\n                          </Badge>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mb-1\">\n                        {notification.message}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground/70\">\n                        {notification.timestamp}\n                      </p>\n                    </div>\n                  </div>\n                  {index < mockNotifications.length - 1 && <Separator className=\"my-1\" />}\n                </div>\n              ))\n            )}\n          </CardContent>\n        </Card>\n\n        <div className=\"mt-6 text-center\">\n          <p className=\"text-sm text-muted-foreground\">\n            Notification settings can be managed in your{\" \"}\n            <a href=\"/settings\" className=\"text-primary hover:underline\">\n              Account Settings\n            </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5329}},"version":2}